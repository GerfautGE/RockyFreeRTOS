
Nucleo-F410RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  080086d0  080086d0  000186d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c6c  08008c6c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008c6c  08008c6c  00018c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c74  08008c74  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c74  08008c74  00018c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c78  08008c78  00018c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040dc  200001e4  08008e60  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042c0  08008e60  000242c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164bc  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003201  00000000  00000000  000366d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  000398d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003ab50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017415  00000000  00000000  0003bc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e79  00000000  00000000  000530a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008999e  00000000  00000000  00067f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f18bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cbc  00000000  00000000  000f190c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080086b4 	.word	0x080086b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	080086b4 	.word	0x080086b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <vApplicationGetIdleTaskMemory+0x2c>)
 8000efc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <vApplicationGetIdleTaskMemory+0x30>)
 8000f02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000200 	.word	0x20000200
 8000f1c:	200002b4 	.word	0x200002b4

08000f20 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f24:	f3bf 8f4f 	dsb	sy
}
 8000f28:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <__NVIC_SystemReset+0x24>)
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f32:	4904      	ldr	r1, [pc, #16]	; (8000f44 <__NVIC_SystemReset+0x24>)
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_SystemReset+0x28>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3a:	f3bf 8f4f 	dsb	sy
}
 8000f3e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <__NVIC_SystemReset+0x20>
 8000f44:	e000ed00 	.word	0xe000ed00
 8000f48:	05fa0004 	.word	0x05fa0004

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b5b0      	push	{r4, r5, r7, lr}
 8000f4e:	b0a0      	sub	sp, #128	; 0x80
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f52:	f000 fc77 	bl	8001844 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f56:	f000 f89d 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5a:	f000 f92f 	bl	80011bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f5e:	f000 f903 	bl	8001168 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // welcome the user with some text

  char * welcome = "\033[2J\033[HHi I'm Rocky. I use FreeRTOS to do three tasks\r\n - Blink a green LED\r\n - Send Data to earth\r\n - Rearm a watchdog\r\n\r\nPlease press the blue button to continue";
 8000f62:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <main+0x114>)
 8000f64:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_UART_Transmit(&huart2,(uint8_t *) welcome, strlen(welcome), 1000);
 8000f66:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000f68:	f7ff f952 	bl	8000210 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000f76:	483b      	ldr	r0, [pc, #236]	; (8001064 <main+0x118>)
 8000f78:	f001 feb5 	bl	8002ce6 <HAL_UART_Transmit>

  // wait for the user to press the blue button
  for(;;){
      if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_RESET)
 8000f7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f80:	4839      	ldr	r0, [pc, #228]	; (8001068 <main+0x11c>)
 8000f82:	f000 fef7 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1f7      	bne.n	8000f7c <main+0x30>
	{
	  char * pressed = "... pressed \r\n";
 8000f8c:	4b37      	ldr	r3, [pc, #220]	; (800106c <main+0x120>)
 8000f8e:	67bb      	str	r3, [r7, #120]	; 0x78
	  HAL_UART_Transmit(&huart2, (uint8_t *) pressed, strlen(pressed), 1000);
 8000f90:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000f92:	f7ff f93d 	bl	8000210 <strlen>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fa0:	4830      	ldr	r0, [pc, #192]	; (8001064 <main+0x118>)
 8000fa2:	f001 fea0 	bl	8002ce6 <HAL_UART_Transmit>
	  break;
 8000fa6:	bf00      	nop
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of watchdogMutex */
  osSemaphoreDef(watchdogMutex);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	673b      	str	r3, [r7, #112]	; 0x70
 8000fac:	2300      	movs	r3, #0
 8000fae:	677b      	str	r3, [r7, #116]	; 0x74
  watchdogMutexHandle = osSemaphoreCreate(osSemaphore(watchdogMutex), 1);
 8000fb0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fa9b 	bl	80034f2 <osSemaphoreCreate>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4a2c      	ldr	r2, [pc, #176]	; (8001070 <main+0x124>)
 8000fc0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 128);
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <main+0x128>)
 8000fc4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000fc8:	461d      	mov	r5, r3
 8000fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fa28 	bl	8003432 <osThreadCreate>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a24      	ldr	r2, [pc, #144]	; (8001078 <main+0x12c>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Blink */
  osThreadDef(Blink, StartBlinkLED2, osPriorityRealtime, 0, 128);
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <main+0x130>)
 8000fea:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000fee:	461d      	mov	r5, r3
 8000ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkHandle = osThreadCreate(osThread(Blink), NULL);
 8000ffc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fa15 	bl	8003432 <osThreadCreate>
 8001008:	4603      	mov	r3, r0
 800100a:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <main+0x134>)
 800100c:	6013      	str	r3, [r2, #0]

  /* definition and creation of watchdogFeeder */
  osThreadDef(watchdogFeeder, StartWatchdogFeeder, osPriorityRealtime, 0, 128);
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <main+0x138>)
 8001010:	f107 041c 	add.w	r4, r7, #28
 8001014:	461d      	mov	r5, r3
 8001016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogFeederHandle = osThreadCreate(osThread(watchdogFeeder), NULL);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f002 fa02 	bl	8003432 <osThreadCreate>
 800102e:	4603      	mov	r3, r0
 8001030:	4a15      	ldr	r2, [pc, #84]	; (8001088 <main+0x13c>)
 8001032:	6013      	str	r3, [r2, #0]

  /* definition and creation of watchdog */
  osThreadDef(watchdog, StartWatchdog, osPriorityRealtime, 0, 128);
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <main+0x140>)
 8001036:	463c      	mov	r4, r7
 8001038:	461d      	mov	r5, r3
 800103a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 8001046:	463b      	mov	r3, r7
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 f9f1 	bl	8003432 <osThreadCreate>
 8001050:	4603      	mov	r3, r0
 8001052:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <main+0x144>)
 8001054:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001056:	f002 f9e5 	bl	8003424 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  NVIC_SystemReset();
 800105a:	f7ff ff61 	bl	8000f20 <__NVIC_SystemReset>
 800105e:	bf00      	nop
 8001060:	08008700 	.word	0x08008700
 8001064:	200004b4 	.word	0x200004b4
 8001068:	40020800 	.word	0x40020800
 800106c:	080087a4 	.word	0x080087a4
 8001070:	20000508 	.word	0x20000508
 8001074:	080087b4 	.word	0x080087b4
 8001078:	200004f8 	.word	0x200004f8
 800107c:	080087d0 	.word	0x080087d0
 8001080:	200004fc 	.word	0x200004fc
 8001084:	080087ec 	.word	0x080087ec
 8001088:	20000500 	.word	0x20000500
 800108c:	08008808 	.word	0x08008808
 8001090:	20000504 	.word	0x20000504

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	2234      	movs	r2, #52	; 0x34
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f004 fe83 	bl	8005dae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <SystemClock_Config+0xcc>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a27      	ldr	r2, [pc, #156]	; (8001160 <SystemClock_Config+0xcc>)
 80010c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b25      	ldr	r3, [pc, #148]	; (8001160 <SystemClock_Config+0xcc>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d4:	2300      	movs	r3, #0
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <SystemClock_Config+0xd0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a21      	ldr	r2, [pc, #132]	; (8001164 <SystemClock_Config+0xd0>)
 80010de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <SystemClock_Config+0xd0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f8:	2310      	movs	r3, #16
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fc:	2302      	movs	r3, #2
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001100:	2300      	movs	r3, #0
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001104:	2308      	movs	r3, #8
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001110:	2304      	movs	r3, #4
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001114:	2302      	movs	r3, #2
 8001116:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4618      	mov	r0, r3
 800111e:	f001 f8c7 	bl	80022b0 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001128:	f000 f974 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	2103      	movs	r1, #3
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fe5f 	bl	8001e0c <HAL_RCC_ClockConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001154:	f000 f95e 	bl	8001414 <Error_Handler>
  }
}
 8001158:	bf00      	nop
 800115a:	3750      	adds	r7, #80	; 0x50
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_USART2_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f001 fd54 	bl	8002c4c <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011aa:	f000 f933 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200004b4 	.word	0x200004b4
 80011b8:	40004400 	.word	0x40004400

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a2c      	ldr	r2, [pc, #176]	; (800128c <MX_GPIO_Init+0xd0>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <MX_GPIO_Init+0xd0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <MX_GPIO_Init+0xd0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a25      	ldr	r2, [pc, #148]	; (800128c <MX_GPIO_Init+0xd0>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_GPIO_Init+0xd0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <MX_GPIO_Init+0xd0>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_GPIO_Init+0xd0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <MX_GPIO_Init+0xd0>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_GPIO_Init+0xd0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2120      	movs	r1, #32
 8001246:	4812      	ldr	r0, [pc, #72]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001248:	f000 fdac 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800124c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001252:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_GPIO_Init+0xd8>)
 8001264:	f000 fc12 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001268:	2320      	movs	r3, #32
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001280:	f000 fc04 	bl	8001a8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000
 8001294:	40020800 	.word	0x40020800

08001298 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    char *def = "\033[KSending Data to Earth";
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <StartDefaultTask+0x78>)
 80012a2:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&huart2, (uint8_t *) def, strlen(def), 1000);
 80012a4:	68b8      	ldr	r0, [r7, #8]
 80012a6:	f7fe ffb3 	bl	8000210 <strlen>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	4817      	ldr	r0, [pc, #92]	; (8001314 <StartDefaultTask+0x7c>)
 80012b6:	f001 fd16 	bl	8002ce6 <HAL_UART_Transmit>
    for(int i = 0; i < 100; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e018      	b.n	80012f2 <StartDefaultTask+0x5a>
      {
	  osSemaphoreWait(watchdogMutexHandle, osWaitForever);
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <StartDefaultTask+0x80>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 f945 	bl	8003558 <osSemaphoreWait>
	  // Task like sending data
	  HAL_UART_Transmit(&huart2, (uint8_t *) ".", 1, 1000);
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	2201      	movs	r2, #1
 80012d4:	4911      	ldr	r1, [pc, #68]	; (800131c <StartDefaultTask+0x84>)
 80012d6:	480f      	ldr	r0, [pc, #60]	; (8001314 <StartDefaultTask+0x7c>)
 80012d8:	f001 fd05 	bl	8002ce6 <HAL_UART_Transmit>
	  osDelay(10);
 80012dc:	200a      	movs	r0, #10
 80012de:	f002 f8f4 	bl	80034ca <osDelay>

	  osSemaphoreRelease(watchdogMutexHandle);
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <StartDefaultTask+0x80>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 f984 	bl	80035f4 <osSemaphoreRelease>
    for(int i = 0; i < 100; i++)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3301      	adds	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b63      	cmp	r3, #99	; 0x63
 80012f6:	dde3      	ble.n	80012c0 <StartDefaultTask+0x28>
      }
    HAL_UART_Transmit(&huart2, (uint8_t *) "\r", 2, 1000);
 80012f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fc:	2202      	movs	r2, #2
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <StartDefaultTask+0x88>)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <StartDefaultTask+0x7c>)
 8001302:	f001 fcf0 	bl	8002ce6 <HAL_UART_Transmit>
    osDelay(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f002 f8df 	bl	80034ca <osDelay>
  {
 800130c:	e7c8      	b.n	80012a0 <StartDefaultTask+0x8>
 800130e:	bf00      	nop
 8001310:	08008824 	.word	0x08008824
 8001314:	200004b4 	.word	0x200004b4
 8001318:	20000508 	.word	0x20000508
 800131c:	08008840 	.word	0x08008840
 8001320:	08008844 	.word	0x08008844

08001324 <StartBlinkLED2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkLED2 */
void StartBlinkLED2(void const * argument)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkLED2 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800132c:	2120      	movs	r1, #32
 800132e:	4803      	ldr	r0, [pc, #12]	; (800133c <StartBlinkLED2+0x18>)
 8001330:	f000 fd51 	bl	8001dd6 <HAL_GPIO_TogglePin>
    osDelay(250);
 8001334:	20fa      	movs	r0, #250	; 0xfa
 8001336:	f002 f8c8 	bl	80034ca <osDelay>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800133a:	e7f7      	b.n	800132c <StartBlinkLED2+0x8>
 800133c:	40020000 	.word	0x40020000

08001340 <StartWatchdogFeeder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchdogFeeder */
void StartWatchdogFeeder(void const * argument)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWatchdogFeeder */
  /* Infinite loop */
  for(;;)
  {
    if (--file < 5)
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <StartWatchdogFeeder+0x5c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <StartWatchdogFeeder+0x5c>)
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <StartWatchdogFeeder+0x5c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b04      	cmp	r3, #4
 8001358:	dc1b      	bgt.n	8001392 <StartWatchdogFeeder+0x52>
      {
	char * here = "\r\nWatchdog rearmed\r\n";
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <StartWatchdogFeeder+0x60>)
 800135c:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *) here, strlen(here), 1000);
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7fe ff56 	bl	8000210 <strlen>
 8001364:	4603      	mov	r3, r0
 8001366:	b29a      	uxth	r2, r3
 8001368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136c:	68f9      	ldr	r1, [r7, #12]
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <StartWatchdogFeeder+0x64>)
 8001370:	f001 fcb9 	bl	8002ce6 <HAL_UART_Transmit>
	// wait for semaphore
	osSemaphoreWait(watchdogMutexHandle, osWaitForever);
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <StartWatchdogFeeder+0x68>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800137c:	4618      	mov	r0, r3
 800137e:	f002 f8eb 	bl	8003558 <osSemaphoreWait>

	// reset file
	file = WAIT_WATCHDOG_TICKS;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <StartWatchdogFeeder+0x5c>)
 8001384:	2264      	movs	r2, #100	; 0x64
 8001386:	601a      	str	r2, [r3, #0]

	//release semaphore
	osSemaphoreRelease(watchdogMutexHandle);
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <StartWatchdogFeeder+0x68>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f002 f931 	bl	80035f4 <osSemaphoreRelease>
      }
    osDelay(100);
 8001392:	2064      	movs	r0, #100	; 0x64
 8001394:	f002 f899 	bl	80034ca <osDelay>
    if (--file < 5)
 8001398:	e7d6      	b.n	8001348 <StartWatchdogFeeder+0x8>
 800139a:	bf00      	nop
 800139c:	20000000 	.word	0x20000000
 80013a0:	08008848 	.word	0x08008848
 80013a4:	200004b4 	.word	0x200004b4
 80013a8:	20000508 	.word	0x20000508

080013ac <StartWatchdog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchdog */
void StartWatchdog(void const * argument)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWatchdog */
  for(;;)
    {
      if (file < 3)
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <StartWatchdog+0x38>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	dcfb      	bgt.n	80013b4 <StartWatchdog+0x8>
	{
	  char * reboot = "\033[2J\033[HReboot";
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <StartWatchdog+0x3c>)
 80013be:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart2, (uint8_t *) reboot, strlen(reboot), 1000);
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7fe ff25 	bl	8000210 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	68f9      	ldr	r1, [r7, #12]
 80013d0:	4806      	ldr	r0, [pc, #24]	; (80013ec <StartWatchdog+0x40>)
 80013d2:	f001 fc88 	bl	8002ce6 <HAL_UART_Transmit>
	  osDelay(500);
 80013d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013da:	f002 f876 	bl	80034ca <osDelay>
	  NVIC_SystemReset();
 80013de:	f7ff fd9f 	bl	8000f20 <__NVIC_SystemReset>
 80013e2:	bf00      	nop
 80013e4:	20000000 	.word	0x20000000
 80013e8:	08008860 	.word	0x08008860
 80013ec:	200004b4 	.word	0x200004b4

080013f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001402:	f000 fa41 	bl	8001888 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40001000 	.word	0x40001000

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>
	...

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_MspInit+0x54>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a11      	ldr	r2, [pc, #68]	; (8001474 <HAL_MspInit+0x54>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_MspInit+0x54>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_MspInit+0x54>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <HAL_MspInit+0x54>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6413      	str	r3, [r2, #64]	; 0x40
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_MspInit+0x54>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	210f      	movs	r1, #15
 8001462:	f06f 0001 	mvn.w	r0, #1
 8001466:	f000 fae7 	bl	8001a38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_UART_MspInit+0x84>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d12b      	bne.n	80014f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_UART_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014d2:	230c      	movs	r3, #12
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e2:	2307      	movs	r3, #7
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <HAL_UART_MspInit+0x8c>)
 80014ee:	f000 facd 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40004400 	.word	0x40004400
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08e      	sub	sp, #56	; 0x38
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <HAL_InitTick+0xe4>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a32      	ldr	r2, [pc, #200]	; (80015ec <HAL_InitTick+0xe4>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <HAL_InitTick+0xe4>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001534:	f107 0210 	add.w	r2, r7, #16
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fe84 	bl	800224c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800154e:	f000 fe55 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8001552:	6378      	str	r0, [r7, #52]	; 0x34
 8001554:	e004      	b.n	8001560 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001556:	f000 fe51 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 800155a:	4603      	mov	r3, r0
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001562:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <HAL_InitTick+0xe8>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0c9b      	lsrs	r3, r3, #18
 800156a:	3b01      	subs	r3, #1
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <HAL_InitTick+0xec>)
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <HAL_InitTick+0xf0>)
 8001572:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <HAL_InitTick+0xec>)
 8001576:	f240 32e7 	movw	r2, #999	; 0x3e7
 800157a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800157c:	4a1d      	ldr	r2, [pc, #116]	; (80015f4 <HAL_InitTick+0xec>)
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001580:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <HAL_InitTick+0xec>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <HAL_InitTick+0xec>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_InitTick+0xec>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001594:	4817      	ldr	r0, [pc, #92]	; (80015f4 <HAL_InitTick+0xec>)
 8001596:	f001 f90f 	bl	80027b8 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d11b      	bne.n	80015e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015a8:	4812      	ldr	r0, [pc, #72]	; (80015f4 <HAL_InitTick+0xec>)
 80015aa:	f001 f95f 	bl	800286c <HAL_TIM_Base_Start_IT>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d111      	bne.n	80015e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015bc:	2036      	movs	r0, #54	; 0x36
 80015be:	f000 fa57 	bl	8001a70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d808      	bhi.n	80015da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	2036      	movs	r0, #54	; 0x36
 80015ce:	f000 fa33 	bl	8001a38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_InitTick+0xf4>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e002      	b.n	80015e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3738      	adds	r7, #56	; 0x38
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	431bde83 	.word	0x431bde83
 80015f4:	2000050c 	.word	0x2000050c
 80015f8:	40001000 	.word	0x40001000
 80015fc:	20000008 	.word	0x20000008

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <NMI_Handler+0x4>

08001606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <MemManage_Handler+0x4>

08001612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <UsageFault_Handler+0x4>

0800161e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <TIM6_DAC_IRQHandler+0x10>)
 8001632:	f001 f969 	bl	8002908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000050c 	.word	0x2000050c

08001640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return 1;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_kill>:

int _kill(int pid, int sig)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800165a:	f004 fa77 	bl	8005b4c <__errno>
 800165e:	4603      	mov	r3, r0
 8001660:	2216      	movs	r2, #22
 8001662:	601a      	str	r2, [r3, #0]
  return -1;
 8001664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_exit>:

void _exit (int status)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ffe7 	bl	8001650 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0x12>

08001684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e00a      	b.n	80016ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	4601      	mov	r1, r0
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	60ba      	str	r2, [r7, #8]
 80016a2:	b2ca      	uxtb	r2, r1
 80016a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbf0      	blt.n	8001696 <_read+0x12>
  }

  return len;
 80016b4:	687b      	ldr	r3, [r7, #4]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	e009      	b.n	80016e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1c5a      	adds	r2, r3, #1
 80016d4:	60ba      	str	r2, [r7, #8]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbf1      	blt.n	80016d0 <_write+0x12>
  }
  return len;
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_close>:

int _close(int file)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171e:	605a      	str	r2, [r3, #4]
  return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <_isatty>:

int _isatty(int file)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <_sbrk+0x5c>)
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <_sbrk+0x60>)
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <_sbrk+0x64>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <_sbrk+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d207      	bcs.n	80017a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001790:	f004 f9dc 	bl	8005b4c <__errno>
 8001794:	4603      	mov	r3, r0
 8001796:	220c      	movs	r2, #12
 8001798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800179e:	e009      	b.n	80017b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <_sbrk+0x64>)
 80017b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20008000 	.word	0x20008000
 80017c0:	00000400 	.word	0x00000400
 80017c4:	20000554 	.word	0x20000554
 80017c8:	200042c0 	.word	0x200042c0

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f6:	490e      	ldr	r1, [pc, #56]	; (8001830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800180c:	4c0b      	ldr	r4, [pc, #44]	; (800183c <LoopFillZerobss+0x26>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181a:	f7ff ffd7 	bl	80017cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181e:	f004 fa91 	bl	8005d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7ff fb93 	bl	8000f4c <main>
  bx  lr    
 8001826:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001828:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001834:	08008c7c 	.word	0x08008c7c
  ldr r2, =_sbss
 8001838:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800183c:	200042c0 	.word	0x200042c0

08001840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f8d8 	bl	8001a22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f7ff fe48 	bl	8001508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fdd2 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	20000558 	.word	0x20000558

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000558 	.word	0x20000558

080018c8 <__NVIC_SetPriorityGrouping>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff4c 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4a:	f7ff ff61 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	68b9      	ldr	r1, [r7, #8]
 8001a54:	6978      	ldr	r0, [r7, #20]
 8001a56:	f7ff ffb1 	bl	80019bc <NVIC_EncodePriority>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff80 	bl	8001968 <__NVIC_SetPriority>
}
 8001a68:	bf00      	nop
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff54 	bl	800192c <__NVIC_EnableIRQ>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e14d      	b.n	8001d44 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 813c 	bne.w	8001d3e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d017      	beq.n	8001b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8096 	beq.w	8001d3e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b51      	ldr	r3, [pc, #324]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a50      	ldr	r2, [pc, #320]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b4e      	ldr	r3, [pc, #312]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a4c      	ldr	r2, [pc, #304]	; (8001d60 <HAL_GPIO_Init+0x2d4>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a43      	ldr	r2, [pc, #268]	; (8001d64 <HAL_GPIO_Init+0x2d8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x1ea>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a42      	ldr	r2, [pc, #264]	; (8001d68 <HAL_GPIO_Init+0x2dc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x1e6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a41      	ldr	r2, [pc, #260]	; (8001d6c <HAL_GPIO_Init+0x2e0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x1e2>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e004      	b.n	8001c78 <HAL_GPIO_Init+0x1ec>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_Init+0x1ec>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_GPIO_Init+0x1ec>
 8001c76:	2300      	movs	r3, #0
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	f002 0203 	and.w	r2, r2, #3
 8001c7e:	0092      	lsls	r2, r2, #2
 8001c80:	4093      	lsls	r3, r2
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c88:	4935      	ldr	r1, [pc, #212]	; (8001d60 <HAL_GPIO_Init+0x2d4>)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	3302      	adds	r3, #2
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cba:	4a2d      	ldr	r2, [pc, #180]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce4:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_GPIO_Init+0x2e4>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b0f      	cmp	r3, #15
 8001d48:	f67f aeae 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40013800 	.word	0x40013800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e001      	b.n	8001d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dc0:	e003      	b.n	8001dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de8:	887a      	ldrh	r2, [r7, #2]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4013      	ands	r3, r2
 8001dee:	041a      	lsls	r2, r3, #16
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	400b      	ands	r3, r1
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0cc      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b68      	ldr	r3, [pc, #416]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d90c      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b65      	ldr	r3, [pc, #404]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b8      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e60:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4a58      	ldr	r2, [pc, #352]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e78:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	494d      	ldr	r1, [pc, #308]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d044      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d119      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e07f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d003      	beq.n	8001eca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e06f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e067      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4934      	ldr	r1, [pc, #208]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7ff fcd8 	bl	80018b0 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7ff fcd4 	bl	80018b0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e04f      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d20c      	bcs.n	8001f54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e032      	b.n	8001fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4916      	ldr	r1, [pc, #88]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f92:	f000 f821 	bl	8001fd8 <HAL_RCC_GetSysClockFreq>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	490a      	ldr	r1, [pc, #40]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	5ccb      	ldrb	r3, [r1, r3]
 8001fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff faa8 	bl	8001508 <HAL_InitTick>

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	08008878 	.word	0x08008878
 8001fd0:	20000004 	.word	0x20000004
 8001fd4:	20000008 	.word	0x20000008

08001fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fdc:	b094      	sub	sp, #80	; 0x50
 8001fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fe8:	2300      	movs	r3, #0
 8001fea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ff0:	4b79      	ldr	r3, [pc, #484]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d00d      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x40>
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	f200 80e1 	bhi.w	80021c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0x34>
 8002006:	2b04      	cmp	r3, #4
 8002008:	d003      	beq.n	8002012 <HAL_RCC_GetSysClockFreq+0x3a>
 800200a:	e0db      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800200c:	4b73      	ldr	r3, [pc, #460]	; (80021dc <HAL_RCC_GetSysClockFreq+0x204>)
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002010:	e0db      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002012:	4b73      	ldr	r3, [pc, #460]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002016:	e0d8      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002018:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002020:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002022:	4b6d      	ldr	r3, [pc, #436]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d063      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202e:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	2200      	movs	r2, #0
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
 8002038:	63fa      	str	r2, [r7, #60]	; 0x3c
 800203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002040:	633b      	str	r3, [r7, #48]	; 0x30
 8002042:	2300      	movs	r3, #0
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
 8002046:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800204a:	4622      	mov	r2, r4
 800204c:	462b      	mov	r3, r5
 800204e:	f04f 0000 	mov.w	r0, #0
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	0159      	lsls	r1, r3, #5
 8002058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800205c:	0150      	lsls	r0, r2, #5
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4621      	mov	r1, r4
 8002064:	1a51      	subs	r1, r2, r1
 8002066:	6139      	str	r1, [r7, #16]
 8002068:	4629      	mov	r1, r5
 800206a:	eb63 0301 	sbc.w	r3, r3, r1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800207c:	4659      	mov	r1, fp
 800207e:	018b      	lsls	r3, r1, #6
 8002080:	4651      	mov	r1, sl
 8002082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002086:	4651      	mov	r1, sl
 8002088:	018a      	lsls	r2, r1, #6
 800208a:	4651      	mov	r1, sl
 800208c:	ebb2 0801 	subs.w	r8, r2, r1
 8002090:	4659      	mov	r1, fp
 8002092:	eb63 0901 	sbc.w	r9, r3, r1
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020aa:	4690      	mov	r8, r2
 80020ac:	4699      	mov	r9, r3
 80020ae:	4623      	mov	r3, r4
 80020b0:	eb18 0303 	adds.w	r3, r8, r3
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	462b      	mov	r3, r5
 80020b8:	eb49 0303 	adc.w	r3, r9, r3
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020ca:	4629      	mov	r1, r5
 80020cc:	024b      	lsls	r3, r1, #9
 80020ce:	4621      	mov	r1, r4
 80020d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020d4:	4621      	mov	r1, r4
 80020d6:	024a      	lsls	r2, r1, #9
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020de:	2200      	movs	r2, #0
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020e8:	f7fe fd7e 	bl	8000be8 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4613      	mov	r3, r2
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020f4:	e058      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f6:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	099b      	lsrs	r3, r3, #6
 80020fc:	2200      	movs	r2, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	4611      	mov	r1, r2
 8002102:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002110:	4642      	mov	r2, r8
 8002112:	464b      	mov	r3, r9
 8002114:	f04f 0000 	mov.w	r0, #0
 8002118:	f04f 0100 	mov.w	r1, #0
 800211c:	0159      	lsls	r1, r3, #5
 800211e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002122:	0150      	lsls	r0, r2, #5
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4641      	mov	r1, r8
 800212a:	ebb2 0a01 	subs.w	sl, r2, r1
 800212e:	4649      	mov	r1, r9
 8002130:	eb63 0b01 	sbc.w	fp, r3, r1
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002140:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002144:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002148:	ebb2 040a 	subs.w	r4, r2, sl
 800214c:	eb63 050b 	sbc.w	r5, r3, fp
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	00eb      	lsls	r3, r5, #3
 800215a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800215e:	00e2      	lsls	r2, r4, #3
 8002160:	4614      	mov	r4, r2
 8002162:	461d      	mov	r5, r3
 8002164:	4643      	mov	r3, r8
 8002166:	18e3      	adds	r3, r4, r3
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	464b      	mov	r3, r9
 800216c:	eb45 0303 	adc.w	r3, r5, r3
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800217e:	4629      	mov	r1, r5
 8002180:	028b      	lsls	r3, r1, #10
 8002182:	4621      	mov	r1, r4
 8002184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002188:	4621      	mov	r1, r4
 800218a:	028a      	lsls	r2, r1, #10
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002192:	2200      	movs	r2, #0
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	61fa      	str	r2, [r7, #28]
 8002198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800219c:	f7fe fd24 	bl	8000be8 <__aeabi_uldivmod>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4613      	mov	r3, r2
 80021a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80021b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021c2:	e002      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCC_GetSysClockFreq+0x204>)
 80021c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3750      	adds	r7, #80	; 0x50
 80021d0:	46bd      	mov	sp, r7
 80021d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	00f42400 	.word	0x00f42400
 80021e0:	007a1200 	.word	0x007a1200

080021e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002200:	f7ff fff0 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	0a9b      	lsrs	r3, r3, #10
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	4903      	ldr	r1, [pc, #12]	; (8002220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40023800 	.word	0x40023800
 8002220:	08008888 	.word	0x08008888

08002224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002228:	f7ff ffdc 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0b5b      	lsrs	r3, r3, #13
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4903      	ldr	r1, [pc, #12]	; (8002248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40023800 	.word	0x40023800
 8002248:	08008888 	.word	0x08008888

0800224c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	220f      	movs	r2, #15
 800225a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0203 	and.w	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	08db      	lsrs	r3, r3, #3
 8002286:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_RCC_GetClockConfig+0x60>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0207 	and.w	r2, r3, #7
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	601a      	str	r2, [r3, #0]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40023c00 	.word	0x40023c00

080022b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e273      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d075      	beq.n	80023ba <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022ce:	4b88      	ldr	r3, [pc, #544]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d00c      	beq.n	80022f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022da:	4b85      	ldr	r3, [pc, #532]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d112      	bne.n	800230c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e6:	4b82      	ldr	r3, [pc, #520]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f2:	d10b      	bne.n	800230c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	4b7e      	ldr	r3, [pc, #504]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d05b      	beq.n	80023b8 <HAL_RCC_OscConfig+0x108>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d157      	bne.n	80023b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e24e      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x74>
 8002316:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a75      	ldr	r2, [pc, #468]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0xb0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x98>
 800232e:	4b70      	ldr	r3, [pc, #448]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6f      	ldr	r2, [pc, #444]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b6d      	ldr	r3, [pc, #436]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6c      	ldr	r2, [pc, #432]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xb0>
 8002348:	4b69      	ldr	r3, [pc, #420]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a68      	ldr	r2, [pc, #416]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 800234e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b66      	ldr	r3, [pc, #408]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a65      	ldr	r2, [pc, #404]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 800235a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7ff faa2 	bl	80018b0 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff fa9e 	bl	80018b0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e213      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b5b      	ldr	r3, [pc, #364]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xc0>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff fa8e 	bl	80018b0 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff fa8a 	bl	80018b0 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1ff      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0xe8>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d063      	beq.n	800248e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023c6:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d11c      	bne.n	8002418 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023de:	4b44      	ldr	r3, [pc, #272]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x152>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e1d3      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4937      	ldr	r1, [pc, #220]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	e03a      	b.n	800248e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002420:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <HAL_RCC_OscConfig+0x244>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7ff fa43 	bl	80018b0 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242e:	f7ff fa3f 	bl	80018b0 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1b4      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244c:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4925      	ldr	r1, [pc, #148]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_OscConfig+0x244>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff fa22 	bl	80018b0 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002470:	f7ff fa1e 	bl	80018b0 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e193      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d036      	beq.n	8002508 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d016      	beq.n	80024d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_RCC_OscConfig+0x248>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7ff fa02 	bl	80018b0 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b0:	f7ff f9fe 	bl	80018b0 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e173      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_OscConfig+0x240>)
 80024c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x200>
 80024ce:	e01b      	b.n	8002508 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_RCC_OscConfig+0x248>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7ff f9eb 	bl	80018b0 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	e00e      	b.n	80024fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024de:	f7ff f9e7 	bl	80018b0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d907      	bls.n	80024fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e15c      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
 80024f0:	40023800 	.word	0x40023800
 80024f4:	42470000 	.word	0x42470000
 80024f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fc:	4b8a      	ldr	r3, [pc, #552]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80024fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ea      	bne.n	80024de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8097 	beq.w	8002644 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800251a:	4b83      	ldr	r3, [pc, #524]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10f      	bne.n	8002546 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	4b7f      	ldr	r3, [pc, #508]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	4a7e      	ldr	r2, [pc, #504]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	6413      	str	r3, [r2, #64]	; 0x40
 8002536:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002542:	2301      	movs	r3, #1
 8002544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002546:	4b79      	ldr	r3, [pc, #484]	; (800272c <HAL_RCC_OscConfig+0x47c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002552:	4b76      	ldr	r3, [pc, #472]	; (800272c <HAL_RCC_OscConfig+0x47c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a75      	ldr	r2, [pc, #468]	; (800272c <HAL_RCC_OscConfig+0x47c>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255e:	f7ff f9a7 	bl	80018b0 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7ff f9a3 	bl	80018b0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e118      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	4b6c      	ldr	r3, [pc, #432]	; (800272c <HAL_RCC_OscConfig+0x47c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x2ea>
 800258c:	4b66      	ldr	r3, [pc, #408]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a65      	ldr	r2, [pc, #404]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
 8002598:	e01c      	b.n	80025d4 <HAL_RCC_OscConfig+0x324>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x30c>
 80025a2:	4b61      	ldr	r3, [pc, #388]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	4a60      	ldr	r2, [pc, #384]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
 80025ae:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a5d      	ldr	r2, [pc, #372]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0x324>
 80025bc:	4b5a      	ldr	r3, [pc, #360]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	4a59      	ldr	r2, [pc, #356]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	; 0x70
 80025c8:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80025ce:	f023 0304 	bic.w	r3, r3, #4
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d015      	beq.n	8002608 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7ff f968 	bl	80018b0 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7ff f964 	bl	80018b0 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e0d7      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fa:	4b4b      	ldr	r3, [pc, #300]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ee      	beq.n	80025e4 <HAL_RCC_OscConfig+0x334>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7ff f952 	bl	80018b0 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260e:	e00a      	b.n	8002626 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002610:	f7ff f94e 	bl	80018b0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e0c1      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002626:	4b40      	ldr	r3, [pc, #256]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ee      	bne.n	8002610 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d105      	bne.n	8002644 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4a3a      	ldr	r2, [pc, #232]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002642:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80ad 	beq.w	80027a8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b08      	cmp	r3, #8
 8002658:	d060      	beq.n	800271c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d145      	bne.n	80026ee <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_RCC_OscConfig+0x480>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff f922 	bl	80018b0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002670:	f7ff f91e 	bl	80018b0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e093      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	019b      	lsls	r3, r3, #6
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	3b01      	subs	r3, #1
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	061b      	lsls	r3, r3, #24
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	071b      	lsls	r3, r3, #28
 80026ba:	491b      	ldr	r1, [pc, #108]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x480>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7ff f8f3 	bl	80018b0 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ce:	f7ff f8ef 	bl	80018b0 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e064      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x41e>
 80026ec:	e05c      	b.n	80027a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_RCC_OscConfig+0x480>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7ff f8dc 	bl	80018b0 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7ff f8d8 	bl	80018b0 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e04d      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCC_OscConfig+0x478>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x44c>
 800271a:	e045      	b.n	80027a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d107      	bne.n	8002734 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e040      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
 8002728:	40023800 	.word	0x40023800
 800272c:	40007000 	.word	0x40007000
 8002730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_RCC_OscConfig+0x504>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d030      	beq.n	80027a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d129      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	429a      	cmp	r2, r3
 800275c:	d122      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800276c:	4293      	cmp	r3, r2
 800276e:	d119      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	085b      	lsrs	r3, r3, #1
 800277c:	3b01      	subs	r3, #1
 800277e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d10f      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800

080027b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e041      	b.n	800284e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f839 	bl	8002856 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3304      	adds	r3, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f000 f9b6 	bl	8002b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d001      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e035      	b.n	80028f0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a16      	ldr	r2, [pc, #88]	; (80028fc <HAL_TIM_Base_Start_IT+0x90>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d009      	beq.n	80028ba <HAL_TIM_Base_Start_IT+0x4e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a15      	ldr	r2, [pc, #84]	; (8002900 <HAL_TIM_Base_Start_IT+0x94>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_TIM_Base_Start_IT+0x4e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a13      	ldr	r2, [pc, #76]	; (8002904 <HAL_TIM_Base_Start_IT+0x98>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d111      	bne.n	80028de <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b06      	cmp	r3, #6
 80028ca:	d010      	beq.n	80028ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028dc:	e007      	b.n	80028ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40010000 	.word	0x40010000
 8002900:	40000c00 	.word	0x40000c00
 8002904:	40014000 	.word	0x40014000

08002908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	d122      	bne.n	8002964 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b02      	cmp	r3, #2
 800292a:	d11b      	bne.n	8002964 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0202 	mvn.w	r2, #2
 8002934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f8ee 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 8002950:	e005      	b.n	800295e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8e0 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f8f1 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b04      	cmp	r3, #4
 8002970:	d122      	bne.n	80029b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b04      	cmp	r3, #4
 800297e:	d11b      	bne.n	80029b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0204 	mvn.w	r2, #4
 8002988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2202      	movs	r2, #2
 800298e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f8c4 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 80029a4:	e005      	b.n	80029b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8b6 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f8c7 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d122      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d11b      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0208 	mvn.w	r2, #8
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2204      	movs	r2, #4
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f89a 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f88c 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f89d 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0310 	and.w	r3, r3, #16
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d122      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b10      	cmp	r3, #16
 8002a26:	d11b      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0210 	mvn.w	r2, #16
 8002a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2208      	movs	r2, #8
 8002a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f870 	bl	8002b2c <HAL_TIM_IC_CaptureCallback>
 8002a4c:	e005      	b.n	8002a5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f862 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f873 	bl	8002b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d10e      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d107      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0201 	mvn.w	r2, #1
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe fcb2 	bl	80013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b80      	cmp	r3, #128	; 0x80
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa4:	2b80      	cmp	r3, #128	; 0x80
 8002aa6:	d107      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8c0 	bl	8002c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b40      	cmp	r3, #64	; 0x40
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	d107      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f838 	bl	8002b54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d107      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0220 	mvn.w	r2, #32
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f88a 	bl	8002c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <TIM_Base_SetConfig+0xac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d003      	beq.n	8002b88 <TIM_Base_SetConfig+0x20>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a25      	ldr	r2, [pc, #148]	; (8002c18 <TIM_Base_SetConfig+0xb0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d108      	bne.n	8002b9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <TIM_Base_SetConfig+0xac>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00b      	beq.n	8002bba <TIM_Base_SetConfig+0x52>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	; (8002c18 <TIM_Base_SetConfig+0xb0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <TIM_Base_SetConfig+0x52>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <TIM_Base_SetConfig+0xb4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d003      	beq.n	8002bba <TIM_Base_SetConfig+0x52>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a1a      	ldr	r2, [pc, #104]	; (8002c20 <TIM_Base_SetConfig+0xb8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d108      	bne.n	8002bcc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <TIM_Base_SetConfig+0xac>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d103      	bne.n	8002c00 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	615a      	str	r2, [r3, #20]
}
 8002c06:	bf00      	nop
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	40010000 	.word	0x40010000
 8002c18:	40000c00 	.word	0x40000c00
 8002c1c:	40014000 	.word	0x40014000
 8002c20:	40014800 	.word	0x40014800

08002c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e03f      	b.n	8002cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe fc00 	bl	8001478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	; 0x24
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f929 	bl	8002ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b08a      	sub	sp, #40	; 0x28
 8002cea:	af02      	add	r7, sp, #8
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d17c      	bne.n	8002e00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <HAL_UART_Transmit+0x2c>
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e075      	b.n	8002e02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_UART_Transmit+0x3e>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e06e      	b.n	8002e02 <HAL_UART_Transmit+0x11c>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2221      	movs	r2, #33	; 0x21
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d3a:	f7fe fdb9 	bl	80018b0 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	88fa      	ldrh	r2, [r7, #6]
 8002d44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d54:	d108      	bne.n	8002d68 <HAL_UART_Transmit+0x82>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	e003      	b.n	8002d70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d78:	e02a      	b.n	8002dd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2180      	movs	r1, #128	; 0x80
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f840 	bl	8002e0a <UART_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e036      	b.n	8002e02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10b      	bne.n	8002db2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	3302      	adds	r3, #2
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	e007      	b.n	8002dc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1cf      	bne.n	8002d7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2200      	movs	r2, #0
 8002de2:	2140      	movs	r1, #64	; 0x40
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 f810 	bl	8002e0a <UART_WaitOnFlagUntilTimeout>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e006      	b.n	8002e02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e000      	b.n	8002e02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
  }
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b090      	sub	sp, #64	; 0x40
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1a:	e050      	b.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e22:	d04c      	beq.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8002e2a:	f7fe fd41 	bl	80018b0 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d241      	bcs.n	8002ebe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	e853 3f00 	ldrex	r3, [r3]
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e5a:	637a      	str	r2, [r7, #52]	; 0x34
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e62:	e841 2300 	strex	r3, r2, [r1]
 8002e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1e5      	bne.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3314      	adds	r3, #20
 8002e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	e853 3f00 	ldrex	r3, [r3]
 8002e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3314      	adds	r3, #20
 8002e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e8e:	623a      	str	r2, [r7, #32]
 8002e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	69f9      	ldr	r1, [r7, #28]
 8002e94:	6a3a      	ldr	r2, [r7, #32]
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e5      	bne.n	8002e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e00f      	b.n	8002ede <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	bf0c      	ite	eq
 8002ece:	2301      	moveq	r3, #1
 8002ed0:	2300      	movne	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d09f      	beq.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3740      	adds	r7, #64	; 0x40
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eec:	b0c0      	sub	sp, #256	; 0x100
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f04:	68d9      	ldr	r1, [r3, #12]
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	ea40 0301 	orr.w	r3, r0, r1
 8002f10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f40:	f021 010c 	bic.w	r1, r1, #12
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f62:	6999      	ldr	r1, [r3, #24]
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	ea40 0301 	orr.w	r3, r0, r1
 8002f6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b8f      	ldr	r3, [pc, #572]	; (80031b4 <UART_SetConfig+0x2cc>)
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d005      	beq.n	8002f88 <UART_SetConfig+0xa0>
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4b8d      	ldr	r3, [pc, #564]	; (80031b8 <UART_SetConfig+0x2d0>)
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d104      	bne.n	8002f92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f88:	f7ff f94c 	bl	8002224 <HAL_RCC_GetPCLK2Freq>
 8002f8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f90:	e003      	b.n	8002f9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f92:	f7ff f933 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8002f96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa4:	f040 810c 	bne.w	80031c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002fb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002fba:	4622      	mov	r2, r4
 8002fbc:	462b      	mov	r3, r5
 8002fbe:	1891      	adds	r1, r2, r2
 8002fc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fc2:	415b      	adcs	r3, r3
 8002fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fca:	4621      	mov	r1, r4
 8002fcc:	eb12 0801 	adds.w	r8, r2, r1
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	eb43 0901 	adc.w	r9, r3, r1
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fea:	4690      	mov	r8, r2
 8002fec:	4699      	mov	r9, r3
 8002fee:	4623      	mov	r3, r4
 8002ff0:	eb18 0303 	adds.w	r3, r8, r3
 8002ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ff8:	462b      	mov	r3, r5
 8002ffa:	eb49 0303 	adc.w	r3, r9, r3
 8002ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800300e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003016:	460b      	mov	r3, r1
 8003018:	18db      	adds	r3, r3, r3
 800301a:	653b      	str	r3, [r7, #80]	; 0x50
 800301c:	4613      	mov	r3, r2
 800301e:	eb42 0303 	adc.w	r3, r2, r3
 8003022:	657b      	str	r3, [r7, #84]	; 0x54
 8003024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003028:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800302c:	f7fd fddc 	bl	8000be8 <__aeabi_uldivmod>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4b61      	ldr	r3, [pc, #388]	; (80031bc <UART_SetConfig+0x2d4>)
 8003036:	fba3 2302 	umull	r2, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	011c      	lsls	r4, r3, #4
 800303e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003042:	2200      	movs	r2, #0
 8003044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003048:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800304c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003050:	4642      	mov	r2, r8
 8003052:	464b      	mov	r3, r9
 8003054:	1891      	adds	r1, r2, r2
 8003056:	64b9      	str	r1, [r7, #72]	; 0x48
 8003058:	415b      	adcs	r3, r3
 800305a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800305c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003060:	4641      	mov	r1, r8
 8003062:	eb12 0a01 	adds.w	sl, r2, r1
 8003066:	4649      	mov	r1, r9
 8003068:	eb43 0b01 	adc.w	fp, r3, r1
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800307c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003080:	4692      	mov	sl, r2
 8003082:	469b      	mov	fp, r3
 8003084:	4643      	mov	r3, r8
 8003086:	eb1a 0303 	adds.w	r3, sl, r3
 800308a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800308e:	464b      	mov	r3, r9
 8003090:	eb4b 0303 	adc.w	r3, fp, r3
 8003094:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030ac:	460b      	mov	r3, r1
 80030ae:	18db      	adds	r3, r3, r3
 80030b0:	643b      	str	r3, [r7, #64]	; 0x40
 80030b2:	4613      	mov	r3, r2
 80030b4:	eb42 0303 	adc.w	r3, r2, r3
 80030b8:	647b      	str	r3, [r7, #68]	; 0x44
 80030ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030c2:	f7fd fd91 	bl	8000be8 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <UART_SetConfig+0x2d4>)
 80030ce:	fba3 2301 	umull	r2, r3, r3, r1
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2264      	movs	r2, #100	; 0x64
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	1acb      	subs	r3, r1, r3
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <UART_SetConfig+0x2d4>)
 80030e4:	fba3 2302 	umull	r2, r3, r3, r2
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030f0:	441c      	add	r4, r3
 80030f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003100:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003104:	4642      	mov	r2, r8
 8003106:	464b      	mov	r3, r9
 8003108:	1891      	adds	r1, r2, r2
 800310a:	63b9      	str	r1, [r7, #56]	; 0x38
 800310c:	415b      	adcs	r3, r3
 800310e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003114:	4641      	mov	r1, r8
 8003116:	1851      	adds	r1, r2, r1
 8003118:	6339      	str	r1, [r7, #48]	; 0x30
 800311a:	4649      	mov	r1, r9
 800311c:	414b      	adcs	r3, r1
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800312c:	4659      	mov	r1, fp
 800312e:	00cb      	lsls	r3, r1, #3
 8003130:	4651      	mov	r1, sl
 8003132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003136:	4651      	mov	r1, sl
 8003138:	00ca      	lsls	r2, r1, #3
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	4603      	mov	r3, r0
 8003140:	4642      	mov	r2, r8
 8003142:	189b      	adds	r3, r3, r2
 8003144:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003148:	464b      	mov	r3, r9
 800314a:	460a      	mov	r2, r1
 800314c:	eb42 0303 	adc.w	r3, r2, r3
 8003150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003160:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003164:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003168:	460b      	mov	r3, r1
 800316a:	18db      	adds	r3, r3, r3
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
 800316e:	4613      	mov	r3, r2
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800317a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800317e:	f7fd fd33 	bl	8000be8 <__aeabi_uldivmod>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <UART_SetConfig+0x2d4>)
 8003188:	fba3 1302 	umull	r1, r3, r3, r2
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	2164      	movs	r1, #100	; 0x64
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3332      	adds	r3, #50	; 0x32
 800319a:	4a08      	ldr	r2, [pc, #32]	; (80031bc <UART_SetConfig+0x2d4>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	f003 0207 	and.w	r2, r3, #7
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4422      	add	r2, r4
 80031ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031b0:	e105      	b.n	80033be <UART_SetConfig+0x4d6>
 80031b2:	bf00      	nop
 80031b4:	40011000 	.word	0x40011000
 80031b8:	40011400 	.word	0x40011400
 80031bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c4:	2200      	movs	r2, #0
 80031c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031d2:	4642      	mov	r2, r8
 80031d4:	464b      	mov	r3, r9
 80031d6:	1891      	adds	r1, r2, r2
 80031d8:	6239      	str	r1, [r7, #32]
 80031da:	415b      	adcs	r3, r3
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031e2:	4641      	mov	r1, r8
 80031e4:	1854      	adds	r4, r2, r1
 80031e6:	4649      	mov	r1, r9
 80031e8:	eb43 0501 	adc.w	r5, r3, r1
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	00eb      	lsls	r3, r5, #3
 80031f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031fa:	00e2      	lsls	r2, r4, #3
 80031fc:	4614      	mov	r4, r2
 80031fe:	461d      	mov	r5, r3
 8003200:	4643      	mov	r3, r8
 8003202:	18e3      	adds	r3, r4, r3
 8003204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003208:	464b      	mov	r3, r9
 800320a:	eb45 0303 	adc.w	r3, r5, r3
 800320e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800321e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800322e:	4629      	mov	r1, r5
 8003230:	008b      	lsls	r3, r1, #2
 8003232:	4621      	mov	r1, r4
 8003234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003238:	4621      	mov	r1, r4
 800323a:	008a      	lsls	r2, r1, #2
 800323c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003240:	f7fd fcd2 	bl	8000be8 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4b60      	ldr	r3, [pc, #384]	; (80033cc <UART_SetConfig+0x4e4>)
 800324a:	fba3 2302 	umull	r2, r3, r3, r2
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	011c      	lsls	r4, r3, #4
 8003252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800325c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003260:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003264:	4642      	mov	r2, r8
 8003266:	464b      	mov	r3, r9
 8003268:	1891      	adds	r1, r2, r2
 800326a:	61b9      	str	r1, [r7, #24]
 800326c:	415b      	adcs	r3, r3
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003274:	4641      	mov	r1, r8
 8003276:	1851      	adds	r1, r2, r1
 8003278:	6139      	str	r1, [r7, #16]
 800327a:	4649      	mov	r1, r9
 800327c:	414b      	adcs	r3, r1
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800328c:	4659      	mov	r1, fp
 800328e:	00cb      	lsls	r3, r1, #3
 8003290:	4651      	mov	r1, sl
 8003292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003296:	4651      	mov	r1, sl
 8003298:	00ca      	lsls	r2, r1, #3
 800329a:	4610      	mov	r0, r2
 800329c:	4619      	mov	r1, r3
 800329e:	4603      	mov	r3, r0
 80032a0:	4642      	mov	r2, r8
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032a8:	464b      	mov	r3, r9
 80032aa:	460a      	mov	r2, r1
 80032ac:	eb42 0303 	adc.w	r3, r2, r3
 80032b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80032be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032cc:	4649      	mov	r1, r9
 80032ce:	008b      	lsls	r3, r1, #2
 80032d0:	4641      	mov	r1, r8
 80032d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d6:	4641      	mov	r1, r8
 80032d8:	008a      	lsls	r2, r1, #2
 80032da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032de:	f7fd fc83 	bl	8000be8 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4b39      	ldr	r3, [pc, #228]	; (80033cc <UART_SetConfig+0x4e4>)
 80032e8:	fba3 1302 	umull	r1, r3, r3, r2
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	2164      	movs	r1, #100	; 0x64
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	3332      	adds	r3, #50	; 0x32
 80032fa:	4a34      	ldr	r2, [pc, #208]	; (80033cc <UART_SetConfig+0x4e4>)
 80032fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003306:	441c      	add	r4, r3
 8003308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330c:	2200      	movs	r2, #0
 800330e:	673b      	str	r3, [r7, #112]	; 0x70
 8003310:	677a      	str	r2, [r7, #116]	; 0x74
 8003312:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003316:	4642      	mov	r2, r8
 8003318:	464b      	mov	r3, r9
 800331a:	1891      	adds	r1, r2, r2
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	415b      	adcs	r3, r3
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003326:	4641      	mov	r1, r8
 8003328:	1851      	adds	r1, r2, r1
 800332a:	6039      	str	r1, [r7, #0]
 800332c:	4649      	mov	r1, r9
 800332e:	414b      	adcs	r3, r1
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800333e:	4659      	mov	r1, fp
 8003340:	00cb      	lsls	r3, r1, #3
 8003342:	4651      	mov	r1, sl
 8003344:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003348:	4651      	mov	r1, sl
 800334a:	00ca      	lsls	r2, r1, #3
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	4603      	mov	r3, r0
 8003352:	4642      	mov	r2, r8
 8003354:	189b      	adds	r3, r3, r2
 8003356:	66bb      	str	r3, [r7, #104]	; 0x68
 8003358:	464b      	mov	r3, r9
 800335a:	460a      	mov	r2, r1
 800335c:	eb42 0303 	adc.w	r3, r2, r3
 8003360:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	663b      	str	r3, [r7, #96]	; 0x60
 800336c:	667a      	str	r2, [r7, #100]	; 0x64
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800337a:	4649      	mov	r1, r9
 800337c:	008b      	lsls	r3, r1, #2
 800337e:	4641      	mov	r1, r8
 8003380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003384:	4641      	mov	r1, r8
 8003386:	008a      	lsls	r2, r1, #2
 8003388:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800338c:	f7fd fc2c 	bl	8000be8 <__aeabi_uldivmod>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <UART_SetConfig+0x4e4>)
 8003396:	fba3 1302 	umull	r1, r3, r3, r2
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2164      	movs	r1, #100	; 0x64
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	3332      	adds	r3, #50	; 0x32
 80033a8:	4a08      	ldr	r2, [pc, #32]	; (80033cc <UART_SetConfig+0x4e4>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4422      	add	r2, r4
 80033bc:	609a      	str	r2, [r3, #8]
}
 80033be:	bf00      	nop
 80033c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ca:	bf00      	nop
 80033cc:	51eb851f 	.word	0x51eb851f

080033d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80033de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033e2:	2b84      	cmp	r3, #132	; 0x84
 80033e4:	d005      	beq.n	80033f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80033e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4413      	add	r3, r2
 80033ee:	3303      	adds	r3, #3
 80033f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003406:	f3ef 8305 	mrs	r3, IPSR
 800340a:	607b      	str	r3, [r7, #4]
  return(result);
 800340c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800340e:	2b00      	cmp	r3, #0
 8003410:	bf14      	ite	ne
 8003412:	2301      	movne	r3, #1
 8003414:	2300      	moveq	r3, #0
 8003416:	b2db      	uxtb	r3, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003428:	f001 f926 	bl	8004678 <vTaskStartScheduler>
  
  return osOK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	bd80      	pop	{r7, pc}

08003432 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003434:	b089      	sub	sp, #36	; 0x24
 8003436:	af04      	add	r7, sp, #16
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <osThreadCreate+0x54>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01c      	beq.n	8003486 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685c      	ldr	r4, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681d      	ldr	r5, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691e      	ldr	r6, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ffb6 	bl	80033d0 <makeFreeRtosPriority>
 8003464:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800346e:	9202      	str	r2, [sp, #8]
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	9100      	str	r1, [sp, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4632      	mov	r2, r6
 8003478:	4629      	mov	r1, r5
 800347a:	4620      	mov	r0, r4
 800347c:	f000 ff1e 	bl	80042bc <xTaskCreateStatic>
 8003480:	4603      	mov	r3, r0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	e01c      	b.n	80034c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685c      	ldr	r4, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003492:	b29e      	uxth	r6, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff98 	bl	80033d0 <makeFreeRtosPriority>
 80034a0:	4602      	mov	r2, r0
 80034a2:	f107 030c 	add.w	r3, r7, #12
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	9200      	str	r2, [sp, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	4632      	mov	r2, r6
 80034ae:	4629      	mov	r1, r5
 80034b0:	4620      	mov	r0, r4
 80034b2:	f000 ff60 	bl	8004376 <xTaskCreate>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d001      	beq.n	80034c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80034c0:	68fb      	ldr	r3, [r7, #12]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <osDelay+0x16>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	e000      	b.n	80034e2 <osDelay+0x18>
 80034e0:	2301      	movs	r3, #1
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 f894 	bl	8004610 <vTaskDelay>
  
  return osOK;
 80034e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af02      	add	r7, sp, #8
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00f      	beq.n	8003524 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10a      	bne.n	8003520 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2203      	movs	r2, #3
 8003510:	9200      	str	r2, [sp, #0]
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	2001      	movs	r0, #1
 8003518:	f000 f9be 	bl	8003898 <xQueueGenericCreateStatic>
 800351c:	4603      	mov	r3, r0
 800351e:	e016      	b.n	800354e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003520:	2300      	movs	r3, #0
 8003522:	e014      	b.n	800354e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d110      	bne.n	800354c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800352a:	2203      	movs	r2, #3
 800352c:	2100      	movs	r1, #0
 800352e:	2001      	movs	r0, #1
 8003530:	f000 fa2a 	bl	8003988 <xQueueGenericCreate>
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <osSemaphoreCreate+0x56>
 800353c:	2300      	movs	r3, #0
 800353e:	2200      	movs	r2, #0
 8003540:	2100      	movs	r1, #0
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fa7a 	bl	8003a3c <xQueueGenericSend>
      return sema;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	e000      	b.n	800354e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800354c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003562:	2300      	movs	r3, #0
 8003564:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	e03a      	b.n	80035e6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800357a:	d103      	bne.n	8003584 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	e009      	b.n	8003598 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <osSemaphoreWait+0x40>
      ticks = 1;
 8003594:	2301      	movs	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003598:	f7ff ff32 	bl	8003400 <inHandlerMode>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d017      	beq.n	80035d2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80035a2:	f107 0308 	add.w	r3, r7, #8
 80035a6:	461a      	mov	r2, r3
 80035a8:	2100      	movs	r1, #0
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fcde 	bl	8003f6c <xQueueReceiveFromISR>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d001      	beq.n	80035ba <osSemaphoreWait+0x62>
      return osErrorOS;
 80035b6:	23ff      	movs	r3, #255	; 0xff
 80035b8:	e015      	b.n	80035e6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d011      	beq.n	80035e4 <osSemaphoreWait+0x8c>
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <osSemaphoreWait+0x98>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	e008      	b.n	80035e4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80035d2:	68f9      	ldr	r1, [r7, #12]
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fbbd 	bl	8003d54 <xQueueSemaphoreTake>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d001      	beq.n	80035e4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80035e0:	23ff      	movs	r3, #255	; 0xff
 80035e2:	e000      	b.n	80035e6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003604:	f7ff fefc 	bl	8003400 <inHandlerMode>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d016      	beq.n	800363c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800360e:	f107 0308 	add.w	r3, r7, #8
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fb0f 	bl	8003c38 <xQueueGiveFromISR>
 800361a:	4603      	mov	r3, r0
 800361c:	2b01      	cmp	r3, #1
 800361e:	d001      	beq.n	8003624 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003620:	23ff      	movs	r3, #255	; 0xff
 8003622:	e017      	b.n	8003654 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d013      	beq.n	8003652 <osSemaphoreRelease+0x5e>
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <osSemaphoreRelease+0x68>)
 800362c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	e00a      	b.n	8003652 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800363c:	2300      	movs	r3, #0
 800363e:	2200      	movs	r2, #0
 8003640:	2100      	movs	r1, #0
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f9fa 	bl	8003a3c <xQueueGenericSend>
 8003648:	4603      	mov	r3, r0
 800364a:	2b01      	cmp	r3, #1
 800364c:	d001      	beq.n	8003652 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800364e:	23ff      	movs	r3, #255	; 0xff
 8003650:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003652:	68fb      	ldr	r3, [r7, #12]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f103 0208 	add.w	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003678:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f103 0208 	add.w	r2, r3, #8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f103 0208 	add.w	r2, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003718:	d103      	bne.n	8003722 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e00c      	b.n	800373c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3308      	adds	r3, #8
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e002      	b.n	8003730 <vListInsert+0x2e>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	d2f6      	bcs.n	800372a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	601a      	str	r2, [r3, #0]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6892      	ldr	r2, [r2, #8]
 800378a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6852      	ldr	r2, [r2, #4]
 8003794:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	d103      	bne.n	80037a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1e5a      	subs	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037f2:	f001 fe9f 	bl	8005534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	441a      	add	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003822:	3b01      	subs	r3, #1
 8003824:	68f9      	ldr	r1, [r7, #12]
 8003826:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	441a      	add	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	22ff      	movs	r2, #255	; 0xff
 8003836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	22ff      	movs	r2, #255	; 0xff
 800383e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d114      	bne.n	8003872 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01a      	beq.n	8003886 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	3310      	adds	r3, #16
 8003854:	4618      	mov	r0, r3
 8003856:	f001 f961 	bl	8004b1c <xTaskRemoveFromEventList>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d012      	beq.n	8003886 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <xQueueGenericReset+0xcc>)
 8003862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	e009      	b.n	8003886 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3310      	adds	r3, #16
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fef2 	bl	8003660 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3324      	adds	r3, #36	; 0x24
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff feed 	bl	8003660 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003886:	f001 fe85 	bl	8005594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800388a:	2301      	movs	r3, #1
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	e000ed04 	.word	0xe000ed04

08003898 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08e      	sub	sp, #56	; 0x38
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038da:	bf00      	nop
 80038dc:	e7fe      	b.n	80038dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <xQueueGenericCreateStatic+0x52>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <xQueueGenericCreateStatic+0x56>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <xQueueGenericCreateStatic+0x58>
 80038ee:	2300      	movs	r3, #0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	623b      	str	r3, [r7, #32]
}
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <xQueueGenericCreateStatic+0x7e>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <xQueueGenericCreateStatic+0x82>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <xQueueGenericCreateStatic+0x84>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	61fb      	str	r3, [r7, #28]
}
 8003932:	bf00      	nop
 8003934:	e7fe      	b.n	8003934 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003936:	2348      	movs	r3, #72	; 0x48
 8003938:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b48      	cmp	r3, #72	; 0x48
 800393e:	d00a      	beq.n	8003956 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	61bb      	str	r3, [r7, #24]
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003956:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00d      	beq.n	800397e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800396a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	4613      	mov	r3, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f83f 	bl	80039fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003980:	4618      	mov	r0, r3
 8003982:	3730      	adds	r7, #48	; 0x30
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	613b      	str	r3, [r7, #16]
}
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	3348      	adds	r3, #72	; 0x48
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 fed9 	bl	8005778 <pvPortMalloc>
 80039c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d011      	beq.n	80039f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3348      	adds	r3, #72	; 0x48
 80039d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039e0:	79fa      	ldrb	r2, [r7, #7]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f805 	bl	80039fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039f2:	69bb      	ldr	r3, [r7, #24]
	}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e002      	b.n	8003a1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	69b8      	ldr	r0, [r7, #24]
 8003a2e:	f7ff fecb 	bl	80037c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08e      	sub	sp, #56	; 0x38
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <xQueueGenericSend+0x32>
	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a6a:	bf00      	nop
 8003a6c:	e7fe      	b.n	8003a6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <xQueueGenericSend+0x40>
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <xQueueGenericSend+0x44>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <xQueueGenericSend+0x46>
 8003a80:	2300      	movs	r3, #0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <xQueueGenericSend+0x60>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a98:	bf00      	nop
 8003a9a:	e7fe      	b.n	8003a9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d103      	bne.n	8003aaa <xQueueGenericSend+0x6e>
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <xQueueGenericSend+0x72>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <xQueueGenericSend+0x74>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <xQueueGenericSend+0x8e>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	623b      	str	r3, [r7, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	e7fe      	b.n	8003ac8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aca:	f001 f9e7 	bl	8004e9c <xTaskGetSchedulerState>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <xQueueGenericSend+0x9e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <xQueueGenericSend+0xa2>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <xQueueGenericSend+0xa4>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <xQueueGenericSend+0xbe>
	__asm volatile
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	61fb      	str	r3, [r7, #28]
}
 8003af6:	bf00      	nop
 8003af8:	e7fe      	b.n	8003af8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003afa:	f001 fd1b 	bl	8005534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <xQueueGenericSend+0xd4>
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d129      	bne.n	8003b64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b16:	f000 fac1 	bl	800409c <prvCopyDataToQueue>
 8003b1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d010      	beq.n	8003b46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	3324      	adds	r3, #36	; 0x24
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fff7 	bl	8004b1c <xTaskRemoveFromEventList>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b34:	4b3f      	ldr	r3, [pc, #252]	; (8003c34 <xQueueGenericSend+0x1f8>)
 8003b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	e00a      	b.n	8003b5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b4c:	4b39      	ldr	r3, [pc, #228]	; (8003c34 <xQueueGenericSend+0x1f8>)
 8003b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b5c:	f001 fd1a 	bl	8005594 <vPortExitCritical>
				return pdPASS;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e063      	b.n	8003c2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d103      	bne.n	8003b72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b6a:	f001 fd13 	bl	8005594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e05c      	b.n	8003c2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b78:	f107 0314 	add.w	r3, r7, #20
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 f82f 	bl	8004be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b86:	f001 fd05 	bl	8005594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b8a:	f000 fddf 	bl	800474c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b8e:	f001 fcd1 	bl	8005534 <vPortEnterCritical>
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b98:	b25b      	sxtb	r3, r3
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b9e:	d103      	bne.n	8003ba8 <xQueueGenericSend+0x16c>
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bae:	b25b      	sxtb	r3, r3
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb4:	d103      	bne.n	8003bbe <xQueueGenericSend+0x182>
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bbe:	f001 fce9 	bl	8005594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bc2:	1d3a      	adds	r2, r7, #4
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	4611      	mov	r1, r2
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f001 f81e 	bl	8004c0c <xTaskCheckForTimeOut>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d124      	bne.n	8003c20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bd8:	f000 fb58 	bl	800428c <prvIsQueueFull>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d018      	beq.n	8003c14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	3310      	adds	r3, #16
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 ff72 	bl	8004ad4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bf2:	f000 fae3 	bl	80041bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bf6:	f000 fdb7 	bl	8004768 <xTaskResumeAll>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f47f af7c 	bne.w	8003afa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <xQueueGenericSend+0x1f8>)
 8003c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	e772      	b.n	8003afa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c16:	f000 fad1 	bl	80041bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c1a:	f000 fda5 	bl	8004768 <xTaskResumeAll>
 8003c1e:	e76c      	b.n	8003afa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c22:	f000 facb 	bl	80041bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c26:	f000 fd9f 	bl	8004768 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3738      	adds	r7, #56	; 0x38
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08e      	sub	sp, #56	; 0x38
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	623b      	str	r3, [r7, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	e7fe      	b.n	8003c60 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	61fb      	str	r3, [r7, #28]
}
 8003c7c:	bf00      	nop
 8003c7e:	e7fe      	b.n	8003c7e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d103      	bne.n	8003c90 <xQueueGiveFromISR+0x58>
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <xQueueGiveFromISR+0x5c>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <xQueueGiveFromISR+0x5e>
 8003c94:	2300      	movs	r3, #0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	61bb      	str	r3, [r7, #24]
}
 8003cac:	bf00      	nop
 8003cae:	e7fe      	b.n	8003cae <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cb0:	f001 fd22 	bl	80056f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cb4:	f3ef 8211 	mrs	r2, BASEPRI
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	617a      	str	r2, [r7, #20]
 8003cca:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ccc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d22b      	bcs.n	8003d38 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cfa:	d112      	bne.n	8003d22 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d016      	beq.n	8003d32 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	3324      	adds	r3, #36	; 0x24
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 ff07 	bl	8004b1c <xTaskRemoveFromEventList>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00e      	beq.n	8003d32 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e007      	b.n	8003d32 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d26:	3301      	adds	r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b25a      	sxtb	r2, r3
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d32:	2301      	movs	r3, #1
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
 8003d36:	e001      	b.n	8003d3c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3738      	adds	r7, #56	; 0x38
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	623b      	str	r3, [r7, #32]
}
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	61fb      	str	r3, [r7, #28]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003da4:	f001 f87a 	bl	8004e9c <xTaskGetSchedulerState>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <xQueueSemaphoreTake+0x60>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <xQueueSemaphoreTake+0x64>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <xQueueSemaphoreTake+0x66>
 8003db8:	2300      	movs	r3, #0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	61bb      	str	r3, [r7, #24]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dd4:	f001 fbae 	bl	8005534 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d024      	beq.n	8003e2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	1e5a      	subs	r2, r3, #1
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d104      	bne.n	8003dfe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003df4:	f001 f9fa 	bl	80051ec <pvTaskIncrementMutexHeldCount>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00f      	beq.n	8003e26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	3310      	adds	r3, #16
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fe86 	bl	8004b1c <xTaskRemoveFromEventList>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e16:	4b54      	ldr	r3, [pc, #336]	; (8003f68 <xQueueSemaphoreTake+0x214>)
 8003e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e26:	f001 fbb5 	bl	8005594 <vPortExitCritical>
				return pdPASS;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e097      	b.n	8003f5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d111      	bne.n	8003e58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	617b      	str	r3, [r7, #20]
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e50:	f001 fba0 	bl	8005594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e082      	b.n	8003f5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e5e:	f107 030c 	add.w	r3, r7, #12
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 febc 	bl	8004be0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e6c:	f001 fb92 	bl	8005594 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e70:	f000 fc6c 	bl	800474c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e74:	f001 fb5e 	bl	8005534 <vPortEnterCritical>
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e84:	d103      	bne.n	8003e8e <xQueueSemaphoreTake+0x13a>
 8003e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e9a:	d103      	bne.n	8003ea4 <xQueueSemaphoreTake+0x150>
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ea4:	f001 fb76 	bl	8005594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ea8:	463a      	mov	r2, r7
 8003eaa:	f107 030c 	add.w	r3, r7, #12
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 feab 	bl	8004c0c <xTaskCheckForTimeOut>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d132      	bne.n	8003f22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ebe:	f000 f9cf 	bl	8004260 <prvIsQueueEmpty>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d026      	beq.n	8003f16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003ed0:	f001 fb30 	bl	8005534 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fffd 	bl	8004ed8 <xTaskPriorityInherit>
 8003ede:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003ee0:	f001 fb58 	bl	8005594 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee6:	3324      	adds	r3, #36	; 0x24
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fdf1 	bl	8004ad4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ef4:	f000 f962 	bl	80041bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ef8:	f000 fc36 	bl	8004768 <xTaskResumeAll>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f47f af68 	bne.w	8003dd4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <xQueueSemaphoreTake+0x214>)
 8003f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	e75e      	b.n	8003dd4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f18:	f000 f950 	bl	80041bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f1c:	f000 fc24 	bl	8004768 <xTaskResumeAll>
 8003f20:	e758      	b.n	8003dd4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f24:	f000 f94a 	bl	80041bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f28:	f000 fc1e 	bl	8004768 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f2e:	f000 f997 	bl	8004260 <prvIsQueueEmpty>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f43f af4d 	beq.w	8003dd4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003f40:	f001 faf8 	bl	8005534 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f46:	f000 f891 	bl	800406c <prvGetDisinheritPriorityAfterTimeout>
 8003f4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 f8bc 	bl	80050d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f58:	f001 fb1c 	bl	8005594 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3738      	adds	r7, #56	; 0x38
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08e      	sub	sp, #56	; 0x38
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	623b      	str	r3, [r7, #32]
}
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d103      	bne.n	8003fa6 <xQueueReceiveFromISR+0x3a>
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <xQueueReceiveFromISR+0x3e>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <xQueueReceiveFromISR+0x40>
 8003faa:	2300      	movs	r3, #0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	61fb      	str	r3, [r7, #28]
}
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fc6:	f001 fb97 	bl	80056f8 <vPortValidateInterruptPriority>
	__asm volatile
 8003fca:	f3ef 8211 	mrs	r2, BASEPRI
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	61ba      	str	r2, [r7, #24]
 8003fe0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003fe2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d02f      	beq.n	8004052 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004000:	f000 f8b6 	bl	8004170 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	1e5a      	subs	r2, r3, #1
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800400c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004014:	d112      	bne.n	800403c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d016      	beq.n	800404c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	3310      	adds	r3, #16
 8004022:	4618      	mov	r0, r3
 8004024:	f000 fd7a 	bl	8004b1c <xTaskRemoveFromEventList>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00e      	beq.n	800404c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00b      	beq.n	800404c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e007      	b.n	800404c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800403c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004040:	3301      	adds	r3, #1
 8004042:	b2db      	uxtb	r3, r3
 8004044:	b25a      	sxtb	r2, r3
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800404c:	2301      	movs	r3, #1
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
 8004050:	e001      	b.n	8004056 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004052:	2300      	movs	r3, #0
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
 8004056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004058:	613b      	str	r3, [r7, #16]
	__asm volatile
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f383 8811 	msr	BASEPRI, r3
}
 8004060:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004064:	4618      	mov	r0, r3
 8004066:	3738      	adds	r7, #56	; 0x38
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	2b00      	cmp	r3, #0
 800407a:	d006      	beq.n	800408a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1c3 0307 	rsb	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	e001      	b.n	800408e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800408e:	68fb      	ldr	r3, [r7, #12]
	}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d14d      	bne.n	800415e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 ff7c 	bl	8004fc4 <xTaskPriorityDisinherit>
 80040cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	e043      	b.n	800415e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d119      	bne.n	8004110 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6858      	ldr	r0, [r3, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	461a      	mov	r2, r3
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	f001 fe53 	bl	8005d92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	441a      	add	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	429a      	cmp	r2, r3
 8004104:	d32b      	bcc.n	800415e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	e026      	b.n	800415e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68d8      	ldr	r0, [r3, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	461a      	mov	r2, r3
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	f001 fe39 	bl	8005d92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	425b      	negs	r3, r3
 800412a:	441a      	add	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d207      	bcs.n	800414c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	425b      	negs	r3, r3
 8004146:	441a      	add	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d105      	bne.n	800415e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	3b01      	subs	r3, #1
 800415c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004166:	697b      	ldr	r3, [r7, #20]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d018      	beq.n	80041b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	441a      	add	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	d303      	bcc.n	80041a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68d9      	ldr	r1, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	461a      	mov	r2, r3
 80041ae:	6838      	ldr	r0, [r7, #0]
 80041b0:	f001 fdef 	bl	8005d92 <memcpy>
	}
}
 80041b4:	bf00      	nop
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80041c4:	f001 f9b6 	bl	8005534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041d0:	e011      	b.n	80041f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d012      	beq.n	8004200 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3324      	adds	r3, #36	; 0x24
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fc9c 	bl	8004b1c <xTaskRemoveFromEventList>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041ea:	f000 fd71 	bl	8004cd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	dce9      	bgt.n	80041d2 <prvUnlockQueue+0x16>
 80041fe:	e000      	b.n	8004202 <prvUnlockQueue+0x46>
					break;
 8004200:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	22ff      	movs	r2, #255	; 0xff
 8004206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800420a:	f001 f9c3 	bl	8005594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800420e:	f001 f991 	bl	8005534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004218:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800421a:	e011      	b.n	8004240 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d012      	beq.n	800424a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3310      	adds	r3, #16
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fc77 	bl	8004b1c <xTaskRemoveFromEventList>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004234:	f000 fd4c 	bl	8004cd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004238:	7bbb      	ldrb	r3, [r7, #14]
 800423a:	3b01      	subs	r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004244:	2b00      	cmp	r3, #0
 8004246:	dce9      	bgt.n	800421c <prvUnlockQueue+0x60>
 8004248:	e000      	b.n	800424c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800424a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	22ff      	movs	r2, #255	; 0xff
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004254:	f001 f99e 	bl	8005594 <vPortExitCritical>
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004268:	f001 f964 	bl	8005534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004274:	2301      	movs	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e001      	b.n	800427e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800427e:	f001 f989 	bl	8005594 <vPortExitCritical>

	return xReturn;
 8004282:	68fb      	ldr	r3, [r7, #12]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004294:	f001 f94e 	bl	8005534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d102      	bne.n	80042aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80042a4:	2301      	movs	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	e001      	b.n	80042ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80042ae:	f001 f971 	bl	8005594 <vPortExitCritical>

	return xReturn;
 80042b2:	68fb      	ldr	r3, [r7, #12]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08e      	sub	sp, #56	; 0x38
 80042c0:	af04      	add	r7, sp, #16
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	623b      	str	r3, [r7, #32]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <xTaskCreateStatic+0x46>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	61fb      	str	r3, [r7, #28]
}
 80042fe:	bf00      	nop
 8004300:	e7fe      	b.n	8004300 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004302:	23b4      	movs	r3, #180	; 0xb4
 8004304:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2bb4      	cmp	r3, #180	; 0xb4
 800430a:	d00a      	beq.n	8004322 <xTaskCreateStatic+0x66>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	61bb      	str	r3, [r7, #24]
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004322:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01e      	beq.n	8004368 <xTaskCreateStatic+0xac>
 800432a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01b      	beq.n	8004368 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004338:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	2202      	movs	r2, #2
 800433e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004342:	2300      	movs	r3, #0
 8004344:	9303      	str	r3, [sp, #12]
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	9302      	str	r3, [sp, #8]
 800434a:	f107 0314 	add.w	r3, r7, #20
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f850 	bl	8004400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004362:	f000 f8eb 	bl	800453c <prvAddNewTaskToReadyList>
 8004366:	e001      	b.n	800436c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800436c:	697b      	ldr	r3, [r7, #20]
	}
 800436e:	4618      	mov	r0, r3
 8004370:	3728      	adds	r7, #40	; 0x28
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004376:	b580      	push	{r7, lr}
 8004378:	b08c      	sub	sp, #48	; 0x30
 800437a:	af04      	add	r7, sp, #16
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4618      	mov	r0, r3
 800438c:	f001 f9f4 	bl	8005778 <pvPortMalloc>
 8004390:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00e      	beq.n	80043b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004398:	20b4      	movs	r0, #180	; 0xb4
 800439a:	f001 f9ed 	bl	8005778 <pvPortMalloc>
 800439e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
 80043ac:	e005      	b.n	80043ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043ae:	6978      	ldr	r0, [r7, #20]
 80043b0:	f001 faae 	bl	8005910 <vPortFree>
 80043b4:	e001      	b.n	80043ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d017      	beq.n	80043f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043c8:	88fa      	ldrh	r2, [r7, #6]
 80043ca:	2300      	movs	r3, #0
 80043cc:	9303      	str	r3, [sp, #12]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	9302      	str	r3, [sp, #8]
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f80e 	bl	8004400 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043e4:	69f8      	ldr	r0, [r7, #28]
 80043e6:	f000 f8a9 	bl	800453c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043ea:	2301      	movs	r3, #1
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e002      	b.n	80043f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043f6:	69bb      	ldr	r3, [r7, #24]
	}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004418:	3b01      	subs	r3, #1
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f023 0307 	bic.w	r3, r3, #7
 8004426:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	617b      	str	r3, [r7, #20]
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01f      	beq.n	800448e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	e012      	b.n	800447a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	7819      	ldrb	r1, [r3, #0]
 800445c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4413      	add	r3, r2
 8004462:	3334      	adds	r3, #52	; 0x34
 8004464:	460a      	mov	r2, r1
 8004466:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d006      	beq.n	8004482 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	3301      	adds	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b0f      	cmp	r3, #15
 800447e:	d9e9      	bls.n	8004454 <prvInitialiseNewTask+0x54>
 8004480:	e000      	b.n	8004484 <prvInitialiseNewTask+0x84>
			{
				break;
 8004482:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800448c:	e003      	b.n	8004496 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	2b06      	cmp	r3, #6
 800449a:	d901      	bls.n	80044a0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800449c:	2306      	movs	r3, #6
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	2200      	movs	r2, #0
 80044b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	3304      	adds	r3, #4
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff f8f2 	bl	80036a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	3318      	adds	r3, #24
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff f8ed 	bl	80036a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	f1c3 0207 	rsb	r2, r3, #7
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	334c      	adds	r3, #76	; 0x4c
 80044f0:	2260      	movs	r2, #96	; 0x60
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 fc5a 	bl	8005dae <memset>
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	4a0c      	ldr	r2, [pc, #48]	; (8004530 <prvInitialiseNewTask+0x130>)
 80044fe:	651a      	str	r2, [r3, #80]	; 0x50
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	4a0c      	ldr	r2, [pc, #48]	; (8004534 <prvInitialiseNewTask+0x134>)
 8004504:	655a      	str	r2, [r3, #84]	; 0x54
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	4a0b      	ldr	r2, [pc, #44]	; (8004538 <prvInitialiseNewTask+0x138>)
 800450a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	68f9      	ldr	r1, [r7, #12]
 8004510:	69b8      	ldr	r0, [r7, #24]
 8004512:	f000 fee5 	bl	80052e0 <pxPortInitialiseStack>
 8004516:	4602      	mov	r2, r0
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004526:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004528:	bf00      	nop
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	080088b0 	.word	0x080088b0
 8004534:	080088d0 	.word	0x080088d0
 8004538:	08008890 	.word	0x08008890

0800453c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004544:	f000 fff6 	bl	8005534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004548:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <prvAddNewTaskToReadyList+0xb8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	4a29      	ldr	r2, [pc, #164]	; (80045f4 <prvAddNewTaskToReadyList+0xb8>)
 8004550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004552:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <prvAddNewTaskToReadyList+0xbc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800455a:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <prvAddNewTaskToReadyList+0xbc>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004560:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <prvAddNewTaskToReadyList+0xb8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d110      	bne.n	800458a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004568:	f000 fbd6 	bl	8004d18 <prvInitialiseTaskLists>
 800456c:	e00d      	b.n	800458a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800456e:	4b23      	ldr	r3, [pc, #140]	; (80045fc <prvAddNewTaskToReadyList+0xc0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004576:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <prvAddNewTaskToReadyList+0xbc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	429a      	cmp	r2, r3
 8004582:	d802      	bhi.n	800458a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004584:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <prvAddNewTaskToReadyList+0xbc>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <prvAddNewTaskToReadyList+0xc4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3301      	adds	r3, #1
 8004590:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <prvAddNewTaskToReadyList+0xc4>)
 8004592:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	2201      	movs	r2, #1
 800459a:	409a      	lsls	r2, r3
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <prvAddNewTaskToReadyList+0xc8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	4a18      	ldr	r2, [pc, #96]	; (8004604 <prvAddNewTaskToReadyList+0xc8>)
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4a15      	ldr	r2, [pc, #84]	; (8004608 <prvAddNewTaskToReadyList+0xcc>)
 80045b4:	441a      	add	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f7ff f87c 	bl	80036ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045c2:	f000 ffe7 	bl	8005594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045c6:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <prvAddNewTaskToReadyList+0xc0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00e      	beq.n	80045ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <prvAddNewTaskToReadyList+0xbc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	429a      	cmp	r2, r3
 80045da:	d207      	bcs.n	80045ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <prvAddNewTaskToReadyList+0xd0>)
 80045de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	2000065c 	.word	0x2000065c
 80045f8:	2000055c 	.word	0x2000055c
 80045fc:	20000668 	.word	0x20000668
 8004600:	20000678 	.word	0x20000678
 8004604:	20000664 	.word	0x20000664
 8004608:	20000560 	.word	0x20000560
 800460c:	e000ed04 	.word	0xe000ed04

08004610 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d017      	beq.n	8004652 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <vTaskDelay+0x60>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <vTaskDelay+0x30>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	60bb      	str	r3, [r7, #8]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004640:	f000 f884 	bl	800474c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004644:	2100      	movs	r1, #0
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 fde4 	bl	8005214 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800464c:	f000 f88c 	bl	8004768 <xTaskResumeAll>
 8004650:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d107      	bne.n	8004668 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004658:	4b06      	ldr	r3, [pc, #24]	; (8004674 <vTaskDelay+0x64>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000684 	.word	0x20000684
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004686:	463a      	mov	r2, r7
 8004688:	1d39      	adds	r1, r7, #4
 800468a:	f107 0308 	add.w	r3, r7, #8
 800468e:	4618      	mov	r0, r3
 8004690:	f7fc fc2c 	bl	8000eec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004694:	6839      	ldr	r1, [r7, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	9202      	str	r2, [sp, #8]
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	2300      	movs	r3, #0
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	2300      	movs	r3, #0
 80046a4:	460a      	mov	r2, r1
 80046a6:	4921      	ldr	r1, [pc, #132]	; (800472c <vTaskStartScheduler+0xb4>)
 80046a8:	4821      	ldr	r0, [pc, #132]	; (8004730 <vTaskStartScheduler+0xb8>)
 80046aa:	f7ff fe07 	bl	80042bc <xTaskCreateStatic>
 80046ae:	4603      	mov	r3, r0
 80046b0:	4a20      	ldr	r2, [pc, #128]	; (8004734 <vTaskStartScheduler+0xbc>)
 80046b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046b4:	4b1f      	ldr	r3, [pc, #124]	; (8004734 <vTaskStartScheduler+0xbc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046bc:	2301      	movs	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e001      	b.n	80046c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d11b      	bne.n	8004704 <vTaskStartScheduler+0x8c>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	613b      	str	r3, [r7, #16]
}
 80046de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046e0:	4b15      	ldr	r3, [pc, #84]	; (8004738 <vTaskStartScheduler+0xc0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	334c      	adds	r3, #76	; 0x4c
 80046e6:	4a15      	ldr	r2, [pc, #84]	; (800473c <vTaskStartScheduler+0xc4>)
 80046e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046ea:	4b15      	ldr	r3, [pc, #84]	; (8004740 <vTaskStartScheduler+0xc8>)
 80046ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046f2:	4b14      	ldr	r3, [pc, #80]	; (8004744 <vTaskStartScheduler+0xcc>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046f8:	4b13      	ldr	r3, [pc, #76]	; (8004748 <vTaskStartScheduler+0xd0>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046fe:	f000 fe77 	bl	80053f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004702:	e00e      	b.n	8004722 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800470a:	d10a      	bne.n	8004722 <vTaskStartScheduler+0xaa>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	60fb      	str	r3, [r7, #12]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <vTaskStartScheduler+0xa8>
}
 8004722:	bf00      	nop
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	08008870 	.word	0x08008870
 8004730:	08004ce9 	.word	0x08004ce9
 8004734:	20000680 	.word	0x20000680
 8004738:	2000055c 	.word	0x2000055c
 800473c:	20000014 	.word	0x20000014
 8004740:	2000067c 	.word	0x2000067c
 8004744:	20000668 	.word	0x20000668
 8004748:	20000660 	.word	0x20000660

0800474c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004750:	4b04      	ldr	r3, [pc, #16]	; (8004764 <vTaskSuspendAll+0x18>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3301      	adds	r3, #1
 8004756:	4a03      	ldr	r2, [pc, #12]	; (8004764 <vTaskSuspendAll+0x18>)
 8004758:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800475a:	bf00      	nop
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	20000684 	.word	0x20000684

08004768 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004772:	2300      	movs	r3, #0
 8004774:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004776:	4b41      	ldr	r3, [pc, #260]	; (800487c <xTaskResumeAll+0x114>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10a      	bne.n	8004794 <xTaskResumeAll+0x2c>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	603b      	str	r3, [r7, #0]
}
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004794:	f000 fece 	bl	8005534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004798:	4b38      	ldr	r3, [pc, #224]	; (800487c <xTaskResumeAll+0x114>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3b01      	subs	r3, #1
 800479e:	4a37      	ldr	r2, [pc, #220]	; (800487c <xTaskResumeAll+0x114>)
 80047a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047a2:	4b36      	ldr	r3, [pc, #216]	; (800487c <xTaskResumeAll+0x114>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d161      	bne.n	800486e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047aa:	4b35      	ldr	r3, [pc, #212]	; (8004880 <xTaskResumeAll+0x118>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d05d      	beq.n	800486e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047b2:	e02e      	b.n	8004812 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047b4:	4b33      	ldr	r3, [pc, #204]	; (8004884 <xTaskResumeAll+0x11c>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3318      	adds	r3, #24
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fe ffd7 	bl	8003774 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe ffd2 	bl	8003774 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	2201      	movs	r2, #1
 80047d6:	409a      	lsls	r2, r3
 80047d8:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <xTaskResumeAll+0x120>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4313      	orrs	r3, r2
 80047de:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <xTaskResumeAll+0x120>)
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4a27      	ldr	r2, [pc, #156]	; (800488c <xTaskResumeAll+0x124>)
 80047f0:	441a      	add	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3304      	adds	r3, #4
 80047f6:	4619      	mov	r1, r3
 80047f8:	4610      	mov	r0, r2
 80047fa:	f7fe ff5e 	bl	80036ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004802:	4b23      	ldr	r3, [pc, #140]	; (8004890 <xTaskResumeAll+0x128>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	429a      	cmp	r2, r3
 800480a:	d302      	bcc.n	8004812 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800480c:	4b21      	ldr	r3, [pc, #132]	; (8004894 <xTaskResumeAll+0x12c>)
 800480e:	2201      	movs	r2, #1
 8004810:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004812:	4b1c      	ldr	r3, [pc, #112]	; (8004884 <xTaskResumeAll+0x11c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1cc      	bne.n	80047b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004820:	f000 fb1c 	bl	8004e5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004824:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <xTaskResumeAll+0x130>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d010      	beq.n	8004852 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004830:	f000 f836 	bl	80048a0 <xTaskIncrementTick>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800483a:	4b16      	ldr	r3, [pc, #88]	; (8004894 <xTaskResumeAll+0x12c>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3b01      	subs	r3, #1
 8004844:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f1      	bne.n	8004830 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800484c:	4b12      	ldr	r3, [pc, #72]	; (8004898 <xTaskResumeAll+0x130>)
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <xTaskResumeAll+0x12c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800485a:	2301      	movs	r3, #1
 800485c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800485e:	4b0f      	ldr	r3, [pc, #60]	; (800489c <xTaskResumeAll+0x134>)
 8004860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800486e:	f000 fe91 	bl	8005594 <vPortExitCritical>

	return xAlreadyYielded;
 8004872:	68bb      	ldr	r3, [r7, #8]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000684 	.word	0x20000684
 8004880:	2000065c 	.word	0x2000065c
 8004884:	2000061c 	.word	0x2000061c
 8004888:	20000664 	.word	0x20000664
 800488c:	20000560 	.word	0x20000560
 8004890:	2000055c 	.word	0x2000055c
 8004894:	20000670 	.word	0x20000670
 8004898:	2000066c 	.word	0x2000066c
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048aa:	4b4e      	ldr	r3, [pc, #312]	; (80049e4 <xTaskIncrementTick+0x144>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 808e 	bne.w	80049d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048b4:	4b4c      	ldr	r3, [pc, #304]	; (80049e8 <xTaskIncrementTick+0x148>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3301      	adds	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048bc:	4a4a      	ldr	r2, [pc, #296]	; (80049e8 <xTaskIncrementTick+0x148>)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d120      	bne.n	800490a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048c8:	4b48      	ldr	r3, [pc, #288]	; (80049ec <xTaskIncrementTick+0x14c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	603b      	str	r3, [r7, #0]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <xTaskIncrementTick+0x46>
 80048e8:	4b40      	ldr	r3, [pc, #256]	; (80049ec <xTaskIncrementTick+0x14c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	4b40      	ldr	r3, [pc, #256]	; (80049f0 <xTaskIncrementTick+0x150>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a3e      	ldr	r2, [pc, #248]	; (80049ec <xTaskIncrementTick+0x14c>)
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4a3e      	ldr	r2, [pc, #248]	; (80049f0 <xTaskIncrementTick+0x150>)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <xTaskIncrementTick+0x154>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	4a3c      	ldr	r2, [pc, #240]	; (80049f4 <xTaskIncrementTick+0x154>)
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	f000 faa9 	bl	8004e5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800490a:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <xTaskIncrementTick+0x158>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	429a      	cmp	r2, r3
 8004912:	d348      	bcc.n	80049a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004914:	4b35      	ldr	r3, [pc, #212]	; (80049ec <xTaskIncrementTick+0x14c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800491e:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <xTaskIncrementTick+0x158>)
 8004920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004924:	601a      	str	r2, [r3, #0]
					break;
 8004926:	e03e      	b.n	80049a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004928:	4b30      	ldr	r3, [pc, #192]	; (80049ec <xTaskIncrementTick+0x14c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d203      	bcs.n	8004948 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004940:	4a2d      	ldr	r2, [pc, #180]	; (80049f8 <xTaskIncrementTick+0x158>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004946:	e02e      	b.n	80049a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	3304      	adds	r3, #4
 800494c:	4618      	mov	r0, r3
 800494e:	f7fe ff11 	bl	8003774 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d004      	beq.n	8004964 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	3318      	adds	r3, #24
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe ff08 	bl	8003774 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	2201      	movs	r2, #1
 800496a:	409a      	lsls	r2, r3
 800496c:	4b23      	ldr	r3, [pc, #140]	; (80049fc <xTaskIncrementTick+0x15c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4313      	orrs	r3, r2
 8004972:	4a22      	ldr	r2, [pc, #136]	; (80049fc <xTaskIncrementTick+0x15c>)
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4a1f      	ldr	r2, [pc, #124]	; (8004a00 <xTaskIncrementTick+0x160>)
 8004984:	441a      	add	r2, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fe fe94 	bl	80036ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004996:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <xTaskIncrementTick+0x164>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	429a      	cmp	r2, r3
 800499e:	d3b9      	bcc.n	8004914 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049a4:	e7b6      	b.n	8004914 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049a6:	4b17      	ldr	r3, [pc, #92]	; (8004a04 <xTaskIncrementTick+0x164>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ac:	4914      	ldr	r1, [pc, #80]	; (8004a00 <xTaskIncrementTick+0x160>)
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d901      	bls.n	80049c2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80049be:	2301      	movs	r3, #1
 80049c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049c2:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <xTaskIncrementTick+0x168>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80049ca:	2301      	movs	r3, #1
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	e004      	b.n	80049da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049d0:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <xTaskIncrementTick+0x16c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3301      	adds	r3, #1
 80049d6:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <xTaskIncrementTick+0x16c>)
 80049d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049da:	697b      	ldr	r3, [r7, #20]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	20000684 	.word	0x20000684
 80049e8:	20000660 	.word	0x20000660
 80049ec:	20000614 	.word	0x20000614
 80049f0:	20000618 	.word	0x20000618
 80049f4:	20000674 	.word	0x20000674
 80049f8:	2000067c 	.word	0x2000067c
 80049fc:	20000664 	.word	0x20000664
 8004a00:	20000560 	.word	0x20000560
 8004a04:	2000055c 	.word	0x2000055c
 8004a08:	20000670 	.word	0x20000670
 8004a0c:	2000066c 	.word	0x2000066c

08004a10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a16:	4b29      	ldr	r3, [pc, #164]	; (8004abc <vTaskSwitchContext+0xac>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a1e:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <vTaskSwitchContext+0xb0>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a24:	e044      	b.n	8004ab0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004a26:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <vTaskSwitchContext+0xb0>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a2c:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <vTaskSwitchContext+0xb4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a3a:	7afb      	ldrb	r3, [r7, #11]
 8004a3c:	f1c3 031f 	rsb	r3, r3, #31
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	4921      	ldr	r1, [pc, #132]	; (8004ac8 <vTaskSwitchContext+0xb8>)
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4613      	mov	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	607b      	str	r3, [r7, #4]
}
 8004a68:	bf00      	nop
 8004a6a:	e7fe      	b.n	8004a6a <vTaskSwitchContext+0x5a>
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4a14      	ldr	r2, [pc, #80]	; (8004ac8 <vTaskSwitchContext+0xb8>)
 8004a78:	4413      	add	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d104      	bne.n	8004a9c <vTaskSwitchContext+0x8c>
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	605a      	str	r2, [r3, #4]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <vTaskSwitchContext+0xbc>)
 8004aa4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004aa6:	4b09      	ldr	r3, [pc, #36]	; (8004acc <vTaskSwitchContext+0xbc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	334c      	adds	r3, #76	; 0x4c
 8004aac:	4a08      	ldr	r2, [pc, #32]	; (8004ad0 <vTaskSwitchContext+0xc0>)
 8004aae:	6013      	str	r3, [r2, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	20000684 	.word	0x20000684
 8004ac0:	20000670 	.word	0x20000670
 8004ac4:	20000664 	.word	0x20000664
 8004ac8:	20000560 	.word	0x20000560
 8004acc:	2000055c 	.word	0x2000055c
 8004ad0:	20000014 	.word	0x20000014

08004ad4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	60fb      	str	r3, [r7, #12]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004afa:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <vTaskPlaceOnEventList+0x44>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3318      	adds	r3, #24
 8004b00:	4619      	mov	r1, r3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fe fdfd 	bl	8003702 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b08:	2101      	movs	r1, #1
 8004b0a:	6838      	ldr	r0, [r7, #0]
 8004b0c:	f000 fb82 	bl	8005214 <prvAddCurrentTaskToDelayedList>
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	2000055c 	.word	0x2000055c

08004b1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	60fb      	str	r3, [r7, #12]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	3318      	adds	r3, #24
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fe fe11 	bl	8003774 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b52:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <xTaskRemoveFromEventList+0xac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11c      	bne.n	8004b94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fe08 	bl	8003774 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	2201      	movs	r2, #1
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	4b17      	ldr	r3, [pc, #92]	; (8004bcc <xTaskRemoveFromEventList+0xb0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	4a16      	ldr	r2, [pc, #88]	; (8004bcc <xTaskRemoveFromEventList+0xb0>)
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <xTaskRemoveFromEventList+0xb4>)
 8004b84:	441a      	add	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f7fe fd94 	bl	80036ba <vListInsertEnd>
 8004b92:	e005      	b.n	8004ba0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	3318      	adds	r3, #24
 8004b98:	4619      	mov	r1, r3
 8004b9a:	480e      	ldr	r0, [pc, #56]	; (8004bd4 <xTaskRemoveFromEventList+0xb8>)
 8004b9c:	f7fe fd8d 	bl	80036ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <xTaskRemoveFromEventList+0xbc>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d905      	bls.n	8004bba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <xTaskRemoveFromEventList+0xc0>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e001      	b.n	8004bbe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bbe:	697b      	ldr	r3, [r7, #20]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000684 	.word	0x20000684
 8004bcc:	20000664 	.word	0x20000664
 8004bd0:	20000560 	.word	0x20000560
 8004bd4:	2000061c 	.word	0x2000061c
 8004bd8:	2000055c 	.word	0x2000055c
 8004bdc:	20000670 	.word	0x20000670

08004be0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <vTaskInternalSetTimeOutState+0x24>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <vTaskInternalSetTimeOutState+0x28>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	605a      	str	r2, [r3, #4]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	20000674 	.word	0x20000674
 8004c08:	20000660 	.word	0x20000660

08004c0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	613b      	str	r3, [r7, #16]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	60fb      	str	r3, [r7, #12]
}
 8004c4a:	bf00      	nop
 8004c4c:	e7fe      	b.n	8004c4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c4e:	f000 fc71 	bl	8005534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <xTaskCheckForTimeOut+0xbc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c6a:	d102      	bne.n	8004c72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	e023      	b.n	8004cba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b15      	ldr	r3, [pc, #84]	; (8004ccc <xTaskCheckForTimeOut+0xc0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d007      	beq.n	8004c8e <xTaskCheckForTimeOut+0x82>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d302      	bcc.n	8004c8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e015      	b.n	8004cba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d20b      	bcs.n	8004cb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff ff9b 	bl	8004be0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	e004      	b.n	8004cba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cba:	f000 fc6b 	bl	8005594 <vPortExitCritical>

	return xReturn;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000660 	.word	0x20000660
 8004ccc:	20000674 	.word	0x20000674

08004cd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cd4:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <vTaskMissedYield+0x14>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
}
 8004cda:	bf00      	nop
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	20000670 	.word	0x20000670

08004ce8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cf0:	f000 f852 	bl	8004d98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cf4:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <prvIdleTask+0x28>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d9f9      	bls.n	8004cf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <prvIdleTask+0x2c>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d0c:	e7f0      	b.n	8004cf0 <prvIdleTask+0x8>
 8004d0e:	bf00      	nop
 8004d10:	20000560 	.word	0x20000560
 8004d14:	e000ed04 	.word	0xe000ed04

08004d18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d1e:	2300      	movs	r3, #0
 8004d20:	607b      	str	r3, [r7, #4]
 8004d22:	e00c      	b.n	8004d3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <prvInitialiseTaskLists+0x60>)
 8004d30:	4413      	add	r3, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fc94 	bl	8003660 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b06      	cmp	r3, #6
 8004d42:	d9ef      	bls.n	8004d24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d44:	480d      	ldr	r0, [pc, #52]	; (8004d7c <prvInitialiseTaskLists+0x64>)
 8004d46:	f7fe fc8b 	bl	8003660 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d4a:	480d      	ldr	r0, [pc, #52]	; (8004d80 <prvInitialiseTaskLists+0x68>)
 8004d4c:	f7fe fc88 	bl	8003660 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d50:	480c      	ldr	r0, [pc, #48]	; (8004d84 <prvInitialiseTaskLists+0x6c>)
 8004d52:	f7fe fc85 	bl	8003660 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d56:	480c      	ldr	r0, [pc, #48]	; (8004d88 <prvInitialiseTaskLists+0x70>)
 8004d58:	f7fe fc82 	bl	8003660 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d5c:	480b      	ldr	r0, [pc, #44]	; (8004d8c <prvInitialiseTaskLists+0x74>)
 8004d5e:	f7fe fc7f 	bl	8003660 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d62:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <prvInitialiseTaskLists+0x78>)
 8004d64:	4a05      	ldr	r2, [pc, #20]	; (8004d7c <prvInitialiseTaskLists+0x64>)
 8004d66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <prvInitialiseTaskLists+0x7c>)
 8004d6a:	4a05      	ldr	r2, [pc, #20]	; (8004d80 <prvInitialiseTaskLists+0x68>)
 8004d6c:	601a      	str	r2, [r3, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000560 	.word	0x20000560
 8004d7c:	200005ec 	.word	0x200005ec
 8004d80:	20000600 	.word	0x20000600
 8004d84:	2000061c 	.word	0x2000061c
 8004d88:	20000630 	.word	0x20000630
 8004d8c:	20000648 	.word	0x20000648
 8004d90:	20000614 	.word	0x20000614
 8004d94:	20000618 	.word	0x20000618

08004d98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d9e:	e019      	b.n	8004dd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004da0:	f000 fbc8 	bl	8005534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da4:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <prvCheckTasksWaitingTermination+0x50>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fe fcdf 	bl	8003774 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004db6:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <prvCheckTasksWaitingTermination+0x54>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	4a0b      	ldr	r2, [pc, #44]	; (8004dec <prvCheckTasksWaitingTermination+0x54>)
 8004dbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <prvCheckTasksWaitingTermination+0x58>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	4a0a      	ldr	r2, [pc, #40]	; (8004df0 <prvCheckTasksWaitingTermination+0x58>)
 8004dc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dca:	f000 fbe3 	bl	8005594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f810 	bl	8004df4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <prvCheckTasksWaitingTermination+0x58>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e1      	bne.n	8004da0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000630 	.word	0x20000630
 8004dec:	2000065c 	.word	0x2000065c
 8004df0:	20000644 	.word	0x20000644

08004df4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	334c      	adds	r3, #76	; 0x4c
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 fce9 	bl	80067d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d108      	bne.n	8004e22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fd7b 	bl	8005910 <vPortFree>
				vPortFree( pxTCB );
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fd78 	bl	8005910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e20:	e018      	b.n	8004e54 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d103      	bne.n	8004e34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fd6f 	bl	8005910 <vPortFree>
	}
 8004e32:	e00f      	b.n	8004e54 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d00a      	beq.n	8004e54 <prvDeleteTCB+0x60>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	60fb      	str	r3, [r7, #12]
}
 8004e50:	bf00      	nop
 8004e52:	e7fe      	b.n	8004e52 <prvDeleteTCB+0x5e>
	}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <prvResetNextTaskUnblockTime+0x38>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <prvResetNextTaskUnblockTime+0x3c>)
 8004e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e74:	e008      	b.n	8004e88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <prvResetNextTaskUnblockTime+0x38>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4a04      	ldr	r2, [pc, #16]	; (8004e98 <prvResetNextTaskUnblockTime+0x3c>)
 8004e86:	6013      	str	r3, [r2, #0]
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	20000614 	.word	0x20000614
 8004e98:	2000067c 	.word	0x2000067c

08004e9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ea2:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <xTaskGetSchedulerState+0x34>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d102      	bne.n	8004eb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	607b      	str	r3, [r7, #4]
 8004eae:	e008      	b.n	8004ec2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb0:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <xTaskGetSchedulerState+0x38>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004eb8:	2302      	movs	r3, #2
 8004eba:	607b      	str	r3, [r7, #4]
 8004ebc:	e001      	b.n	8004ec2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ec2:	687b      	ldr	r3, [r7, #4]
	}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	20000668 	.word	0x20000668
 8004ed4:	20000684 	.word	0x20000684

08004ed8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d05e      	beq.n	8004fac <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef2:	4b31      	ldr	r3, [pc, #196]	; (8004fb8 <xTaskPriorityInherit+0xe0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d24e      	bcs.n	8004f9a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	db06      	blt.n	8004f12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f04:	4b2c      	ldr	r3, [pc, #176]	; (8004fb8 <xTaskPriorityInherit+0xe0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	f1c3 0207 	rsb	r2, r3, #7
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6959      	ldr	r1, [r3, #20]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4a26      	ldr	r2, [pc, #152]	; (8004fbc <xTaskPriorityInherit+0xe4>)
 8004f24:	4413      	add	r3, r2
 8004f26:	4299      	cmp	r1, r3
 8004f28:	d12f      	bne.n	8004f8a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fc20 	bl	8003774 <uxListRemove>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	2201      	movs	r2, #1
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	43da      	mvns	r2, r3
 8004f46:	4b1e      	ldr	r3, [pc, #120]	; (8004fc0 <xTaskPriorityInherit+0xe8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	4a1c      	ldr	r2, [pc, #112]	; (8004fc0 <xTaskPriorityInherit+0xe8>)
 8004f4e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <xTaskPriorityInherit+0xe0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	2201      	movs	r2, #1
 8004f60:	409a      	lsls	r2, r3
 8004f62:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <xTaskPriorityInherit+0xe8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	4a15      	ldr	r2, [pc, #84]	; (8004fc0 <xTaskPriorityInherit+0xe8>)
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <xTaskPriorityInherit+0xe4>)
 8004f7a:	441a      	add	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f7fe fb99 	bl	80036ba <vListInsertEnd>
 8004f88:	e004      	b.n	8004f94 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <xTaskPriorityInherit+0xe0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004f94:	2301      	movs	r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	e008      	b.n	8004fac <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <xTaskPriorityInherit+0xe0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d201      	bcs.n	8004fac <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fac:	68fb      	ldr	r3, [r7, #12]
	}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	2000055c 	.word	0x2000055c
 8004fbc:	20000560 	.word	0x20000560
 8004fc0:	20000664 	.word	0x20000664

08004fc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d06e      	beq.n	80050b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fda:	4b3a      	ldr	r3, [pc, #232]	; (80050c4 <xTaskPriorityDisinherit+0x100>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d00a      	beq.n	8004ffa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	60fb      	str	r3, [r7, #12]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	60bb      	str	r3, [r7, #8]
}
 8005014:	bf00      	nop
 8005016:	e7fe      	b.n	8005016 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501c:	1e5a      	subs	r2, r3, #1
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	429a      	cmp	r2, r3
 800502c:	d044      	beq.n	80050b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005032:	2b00      	cmp	r3, #0
 8005034:	d140      	bne.n	80050b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3304      	adds	r3, #4
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe fb9a 	bl	8003774 <uxListRemove>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d115      	bne.n	8005072 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504a:	491f      	ldr	r1, [pc, #124]	; (80050c8 <xTaskPriorityDisinherit+0x104>)
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <xTaskPriorityDisinherit+0xae>
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	2201      	movs	r2, #1
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43da      	mvns	r2, r3
 8005068:	4b18      	ldr	r3, [pc, #96]	; (80050cc <xTaskPriorityDisinherit+0x108>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4013      	ands	r3, r2
 800506e:	4a17      	ldr	r2, [pc, #92]	; (80050cc <xTaskPriorityDisinherit+0x108>)
 8005070:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	f1c3 0207 	rsb	r2, r3, #7
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	2201      	movs	r2, #1
 800508c:	409a      	lsls	r2, r3
 800508e:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <xTaskPriorityDisinherit+0x108>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4313      	orrs	r3, r2
 8005094:	4a0d      	ldr	r2, [pc, #52]	; (80050cc <xTaskPriorityDisinherit+0x108>)
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <xTaskPriorityDisinherit+0x104>)
 80050a6:	441a      	add	r2, r3
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f7fe fb03 	bl	80036ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050b8:	697b      	ldr	r3, [r7, #20]
	}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	2000055c 	.word	0x2000055c
 80050c8:	20000560 	.word	0x20000560
 80050cc:	20000664 	.word	0x20000664

080050d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80050de:	2301      	movs	r3, #1
 80050e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d077      	beq.n	80051d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60fb      	str	r3, [r7, #12]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d902      	bls.n	8005116 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	e002      	b.n	800511c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	69fa      	ldr	r2, [r7, #28]
 8005122:	429a      	cmp	r2, r3
 8005124:	d058      	beq.n	80051d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	429a      	cmp	r2, r3
 800512e:	d153      	bne.n	80051d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005130:	4b2b      	ldr	r3, [pc, #172]	; (80051e0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	429a      	cmp	r2, r3
 8005138:	d10a      	bne.n	8005150 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	60bb      	str	r3, [r7, #8]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	db04      	blt.n	800516e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f1c3 0207 	rsb	r2, r3, #7
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	6959      	ldr	r1, [r3, #20]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4a19      	ldr	r2, [pc, #100]	; (80051e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800517e:	4413      	add	r3, r2
 8005180:	4299      	cmp	r1, r3
 8005182:	d129      	bne.n	80051d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	3304      	adds	r3, #4
 8005188:	4618      	mov	r0, r3
 800518a:	f7fe faf3 	bl	8003774 <uxListRemove>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	2201      	movs	r2, #1
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43da      	mvns	r2, r3
 80051a0:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4013      	ands	r3, r2
 80051a6:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80051a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	2201      	movs	r2, #1
 80051b0:	409a      	lsls	r2, r3
 80051b2:	4b0d      	ldr	r3, [pc, #52]	; (80051e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	4a0b      	ldr	r2, [pc, #44]	; (80051e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4a06      	ldr	r2, [pc, #24]	; (80051e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80051ca:	441a      	add	r2, r3
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4619      	mov	r1, r3
 80051d2:	4610      	mov	r0, r2
 80051d4:	f7fe fa71 	bl	80036ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051d8:	bf00      	nop
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	2000055c 	.word	0x2000055c
 80051e4:	20000560 	.word	0x20000560
 80051e8:	20000664 	.word	0x20000664

080051ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80051f0:	4b07      	ldr	r3, [pc, #28]	; (8005210 <pvTaskIncrementMutexHeldCount+0x24>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <pvTaskIncrementMutexHeldCount+0x24>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051fe:	3201      	adds	r2, #1
 8005200:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005202:	4b03      	ldr	r3, [pc, #12]	; (8005210 <pvTaskIncrementMutexHeldCount+0x24>)
 8005204:	681b      	ldr	r3, [r3, #0]
	}
 8005206:	4618      	mov	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	2000055c 	.word	0x2000055c

08005214 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800521e:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005224:	4b28      	ldr	r3, [pc, #160]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3304      	adds	r3, #4
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe faa2 	bl	8003774 <uxListRemove>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005236:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	2201      	movs	r2, #1
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43da      	mvns	r2, r3
 8005244:	4b21      	ldr	r3, [pc, #132]	; (80052cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4013      	ands	r3, r2
 800524a:	4a20      	ldr	r2, [pc, #128]	; (80052cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800524c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005254:	d10a      	bne.n	800526c <prvAddCurrentTaskToDelayedList+0x58>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800525c:	4b1a      	ldr	r3, [pc, #104]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3304      	adds	r3, #4
 8005262:	4619      	mov	r1, r3
 8005264:	481a      	ldr	r0, [pc, #104]	; (80052d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005266:	f7fe fa28 	bl	80036ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800526a:	e026      	b.n	80052ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4413      	add	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005274:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	429a      	cmp	r2, r3
 8005282:	d209      	bcs.n	8005298 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005284:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3304      	adds	r3, #4
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f7fe fa36 	bl	8003702 <vListInsert>
}
 8005296:	e010      	b.n	80052ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f7fe fa2c 	bl	8003702 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052aa:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d202      	bcs.n	80052ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052b4:	4a09      	ldr	r2, [pc, #36]	; (80052dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	6013      	str	r3, [r2, #0]
}
 80052ba:	bf00      	nop
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000660 	.word	0x20000660
 80052c8:	2000055c 	.word	0x2000055c
 80052cc:	20000664 	.word	0x20000664
 80052d0:	20000648 	.word	0x20000648
 80052d4:	20000618 	.word	0x20000618
 80052d8:	20000614 	.word	0x20000614
 80052dc:	2000067c 	.word	0x2000067c

080052e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3b04      	subs	r3, #4
 80052f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3b04      	subs	r3, #4
 80052fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f023 0201 	bic.w	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3b04      	subs	r3, #4
 800530e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005310:	4a0c      	ldr	r2, [pc, #48]	; (8005344 <pxPortInitialiseStack+0x64>)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b14      	subs	r3, #20
 800531a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b04      	subs	r3, #4
 8005326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f06f 0202 	mvn.w	r2, #2
 800532e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3b20      	subs	r3, #32
 8005334:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005336:	68fb      	ldr	r3, [r7, #12]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	08005349 	.word	0x08005349

08005348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005352:	4b12      	ldr	r3, [pc, #72]	; (800539c <prvTaskExitError+0x54>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535a:	d00a      	beq.n	8005372 <prvTaskExitError+0x2a>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	60fb      	str	r3, [r7, #12]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <prvTaskExitError+0x28>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	60bb      	str	r3, [r7, #8]
}
 8005384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005386:	bf00      	nop
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0fc      	beq.n	8005388 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800538e:	bf00      	nop
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	20000010 	.word	0x20000010

080053a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053a0:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <pxCurrentTCBConst2>)
 80053a2:	6819      	ldr	r1, [r3, #0]
 80053a4:	6808      	ldr	r0, [r1, #0]
 80053a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053aa:	f380 8809 	msr	PSP, r0
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f04f 0000 	mov.w	r0, #0
 80053b6:	f380 8811 	msr	BASEPRI, r0
 80053ba:	4770      	bx	lr
 80053bc:	f3af 8000 	nop.w

080053c0 <pxCurrentTCBConst2>:
 80053c0:	2000055c 	.word	0x2000055c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop

080053c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80053c8:	4808      	ldr	r0, [pc, #32]	; (80053ec <prvPortStartFirstTask+0x24>)
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	6800      	ldr	r0, [r0, #0]
 80053ce:	f380 8808 	msr	MSP, r0
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8814 	msr	CONTROL, r0
 80053da:	b662      	cpsie	i
 80053dc:	b661      	cpsie	f
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	df00      	svc	0
 80053e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80053ea:	bf00      	nop
 80053ec:	e000ed08 	.word	0xe000ed08

080053f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053f6:	4b46      	ldr	r3, [pc, #280]	; (8005510 <xPortStartScheduler+0x120>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a46      	ldr	r2, [pc, #280]	; (8005514 <xPortStartScheduler+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10a      	bne.n	8005416 <xPortStartScheduler+0x26>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	613b      	str	r3, [r7, #16]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005416:	4b3e      	ldr	r3, [pc, #248]	; (8005510 <xPortStartScheduler+0x120>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a3f      	ldr	r2, [pc, #252]	; (8005518 <xPortStartScheduler+0x128>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10a      	bne.n	8005436 <xPortStartScheduler+0x46>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60fb      	str	r3, [r7, #12]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005436:	4b39      	ldr	r3, [pc, #228]	; (800551c <xPortStartScheduler+0x12c>)
 8005438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	22ff      	movs	r2, #255	; 0xff
 8005446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	b2db      	uxtb	r3, r3
 8005454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005458:	b2da      	uxtb	r2, r3
 800545a:	4b31      	ldr	r3, [pc, #196]	; (8005520 <xPortStartScheduler+0x130>)
 800545c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800545e:	4b31      	ldr	r3, [pc, #196]	; (8005524 <xPortStartScheduler+0x134>)
 8005460:	2207      	movs	r2, #7
 8005462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005464:	e009      	b.n	800547a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005466:	4b2f      	ldr	r3, [pc, #188]	; (8005524 <xPortStartScheduler+0x134>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3b01      	subs	r3, #1
 800546c:	4a2d      	ldr	r2, [pc, #180]	; (8005524 <xPortStartScheduler+0x134>)
 800546e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	b2db      	uxtb	r3, r3
 8005478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800547a:	78fb      	ldrb	r3, [r7, #3]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d0ef      	beq.n	8005466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005486:	4b27      	ldr	r3, [pc, #156]	; (8005524 <xPortStartScheduler+0x134>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f1c3 0307 	rsb	r3, r3, #7
 800548e:	2b04      	cmp	r3, #4
 8005490:	d00a      	beq.n	80054a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	60bb      	str	r3, [r7, #8]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054a8:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <xPortStartScheduler+0x134>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <xPortStartScheduler+0x134>)
 80054b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054b2:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <xPortStartScheduler+0x134>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <xPortStartScheduler+0x134>)
 80054bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054c6:	4b18      	ldr	r3, [pc, #96]	; (8005528 <xPortStartScheduler+0x138>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <xPortStartScheduler+0x138>)
 80054cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054d2:	4b15      	ldr	r3, [pc, #84]	; (8005528 <xPortStartScheduler+0x138>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a14      	ldr	r2, [pc, #80]	; (8005528 <xPortStartScheduler+0x138>)
 80054d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054de:	f000 f8dd 	bl	800569c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <xPortStartScheduler+0x13c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80054e8:	f000 f8fc 	bl	80056e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054ec:	4b10      	ldr	r3, [pc, #64]	; (8005530 <xPortStartScheduler+0x140>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0f      	ldr	r2, [pc, #60]	; (8005530 <xPortStartScheduler+0x140>)
 80054f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054f8:	f7ff ff66 	bl	80053c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054fc:	f7ff fa88 	bl	8004a10 <vTaskSwitchContext>
	prvTaskExitError();
 8005500:	f7ff ff22 	bl	8005348 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	e000ed00 	.word	0xe000ed00
 8005514:	410fc271 	.word	0x410fc271
 8005518:	410fc270 	.word	0x410fc270
 800551c:	e000e400 	.word	0xe000e400
 8005520:	20000688 	.word	0x20000688
 8005524:	2000068c 	.word	0x2000068c
 8005528:	e000ed20 	.word	0xe000ed20
 800552c:	20000010 	.word	0x20000010
 8005530:	e000ef34 	.word	0xe000ef34

08005534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	607b      	str	r3, [r7, #4]
}
 800554c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800554e:	4b0f      	ldr	r3, [pc, #60]	; (800558c <vPortEnterCritical+0x58>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3301      	adds	r3, #1
 8005554:	4a0d      	ldr	r2, [pc, #52]	; (800558c <vPortEnterCritical+0x58>)
 8005556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005558:	4b0c      	ldr	r3, [pc, #48]	; (800558c <vPortEnterCritical+0x58>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d10f      	bne.n	8005580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <vPortEnterCritical+0x5c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <vPortEnterCritical+0x4c>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	603b      	str	r3, [r7, #0]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <vPortEnterCritical+0x4a>
	}
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	20000010 	.word	0x20000010
 8005590:	e000ed04 	.word	0xe000ed04

08005594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800559a:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <vPortExitCritical+0x50>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <vPortExitCritical+0x24>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	607b      	str	r3, [r7, #4]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <vPortExitCritical+0x50>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3b01      	subs	r3, #1
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <vPortExitCritical+0x50>)
 80055c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055c2:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <vPortExitCritical+0x50>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d105      	bne.n	80055d6 <vPortExitCritical+0x42>
 80055ca:	2300      	movs	r3, #0
 80055cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f383 8811 	msr	BASEPRI, r3
}
 80055d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000010 	.word	0x20000010
	...

080055f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055f0:	f3ef 8009 	mrs	r0, PSP
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	4b15      	ldr	r3, [pc, #84]	; (8005650 <pxCurrentTCBConst>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	f01e 0f10 	tst.w	lr, #16
 8005600:	bf08      	it	eq
 8005602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560a:	6010      	str	r0, [r2, #0]
 800560c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005614:	f380 8811 	msr	BASEPRI, r0
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f7ff f9f6 	bl	8004a10 <vTaskSwitchContext>
 8005624:	f04f 0000 	mov.w	r0, #0
 8005628:	f380 8811 	msr	BASEPRI, r0
 800562c:	bc09      	pop	{r0, r3}
 800562e:	6819      	ldr	r1, [r3, #0]
 8005630:	6808      	ldr	r0, [r1, #0]
 8005632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005636:	f01e 0f10 	tst.w	lr, #16
 800563a:	bf08      	it	eq
 800563c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005640:	f380 8809 	msr	PSP, r0
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	f3af 8000 	nop.w

08005650 <pxCurrentTCBConst>:
 8005650:	2000055c 	.word	0x2000055c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop

08005658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	607b      	str	r3, [r7, #4]
}
 8005670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005672:	f7ff f915 	bl	80048a0 <xTaskIncrementTick>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <SysTick_Handler+0x40>)
 800567e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	2300      	movs	r3, #0
 8005686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f383 8811 	msr	BASEPRI, r3
}
 800568e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	e000ed04 	.word	0xe000ed04

0800569c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <vPortSetupTimerInterrupt+0x34>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <vPortSetupTimerInterrupt+0x38>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <vPortSetupTimerInterrupt+0x3c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <vPortSetupTimerInterrupt+0x40>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	099b      	lsrs	r3, r3, #6
 80056b8:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <vPortSetupTimerInterrupt+0x44>)
 80056ba:	3b01      	subs	r3, #1
 80056bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056be:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <vPortSetupTimerInterrupt+0x34>)
 80056c0:	2207      	movs	r2, #7
 80056c2:	601a      	str	r2, [r3, #0]
}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	e000e010 	.word	0xe000e010
 80056d4:	e000e018 	.word	0xe000e018
 80056d8:	20000004 	.word	0x20000004
 80056dc:	10624dd3 	.word	0x10624dd3
 80056e0:	e000e014 	.word	0xe000e014

080056e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80056e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056f4 <vPortEnableVFP+0x10>
 80056e8:	6801      	ldr	r1, [r0, #0]
 80056ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056ee:	6001      	str	r1, [r0, #0]
 80056f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80056f2:	bf00      	nop
 80056f4:	e000ed88 	.word	0xe000ed88

080056f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056fe:	f3ef 8305 	mrs	r3, IPSR
 8005702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b0f      	cmp	r3, #15
 8005708:	d914      	bls.n	8005734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800570a:	4a17      	ldr	r2, [pc, #92]	; (8005768 <vPortValidateInterruptPriority+0x70>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005714:	4b15      	ldr	r3, [pc, #84]	; (800576c <vPortValidateInterruptPriority+0x74>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	7afa      	ldrb	r2, [r7, #11]
 800571a:	429a      	cmp	r2, r3
 800571c:	d20a      	bcs.n	8005734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	607b      	str	r3, [r7, #4]
}
 8005730:	bf00      	nop
 8005732:	e7fe      	b.n	8005732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005734:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <vPortValidateInterruptPriority+0x78>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <vPortValidateInterruptPriority+0x7c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d90a      	bls.n	800575a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	603b      	str	r3, [r7, #0]
}
 8005756:	bf00      	nop
 8005758:	e7fe      	b.n	8005758 <vPortValidateInterruptPriority+0x60>
	}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	e000e3f0 	.word	0xe000e3f0
 800576c:	20000688 	.word	0x20000688
 8005770:	e000ed0c 	.word	0xe000ed0c
 8005774:	2000068c 	.word	0x2000068c

08005778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005784:	f7fe ffe2 	bl	800474c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005788:	4b5b      	ldr	r3, [pc, #364]	; (80058f8 <pvPortMalloc+0x180>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005790:	f000 f920 	bl	80059d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005794:	4b59      	ldr	r3, [pc, #356]	; (80058fc <pvPortMalloc+0x184>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	f040 8093 	bne.w	80058c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01d      	beq.n	80057e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057a8:	2208      	movs	r2, #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d014      	beq.n	80057e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f023 0307 	bic.w	r3, r3, #7
 80057c0:	3308      	adds	r3, #8
 80057c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <pvPortMalloc+0x6c>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	617b      	str	r3, [r7, #20]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d06e      	beq.n	80058c8 <pvPortMalloc+0x150>
 80057ea:	4b45      	ldr	r3, [pc, #276]	; (8005900 <pvPortMalloc+0x188>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d869      	bhi.n	80058c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057f4:	4b43      	ldr	r3, [pc, #268]	; (8005904 <pvPortMalloc+0x18c>)
 80057f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057f8:	4b42      	ldr	r3, [pc, #264]	; (8005904 <pvPortMalloc+0x18c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057fe:	e004      	b.n	800580a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d903      	bls.n	800581c <pvPortMalloc+0xa4>
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1f1      	bne.n	8005800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800581c:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <pvPortMalloc+0x180>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005822:	429a      	cmp	r2, r3
 8005824:	d050      	beq.n	80058c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2208      	movs	r2, #8
 800582c:	4413      	add	r3, r2
 800582e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	1ad2      	subs	r2, r2, r3
 8005840:	2308      	movs	r3, #8
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	429a      	cmp	r2, r3
 8005846:	d91f      	bls.n	8005888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4413      	add	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <pvPortMalloc+0xf8>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	613b      	str	r3, [r7, #16]
}
 800586c:	bf00      	nop
 800586e:	e7fe      	b.n	800586e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	1ad2      	subs	r2, r2, r3
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005882:	69b8      	ldr	r0, [r7, #24]
 8005884:	f000 f908 	bl	8005a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005888:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <pvPortMalloc+0x188>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <pvPortMalloc+0x188>)
 8005894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005896:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <pvPortMalloc+0x188>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <pvPortMalloc+0x190>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d203      	bcs.n	80058aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058a2:	4b17      	ldr	r3, [pc, #92]	; (8005900 <pvPortMalloc+0x188>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a18      	ldr	r2, [pc, #96]	; (8005908 <pvPortMalloc+0x190>)
 80058a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <pvPortMalloc+0x184>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <pvPortMalloc+0x194>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3301      	adds	r3, #1
 80058c4:	4a11      	ldr	r2, [pc, #68]	; (800590c <pvPortMalloc+0x194>)
 80058c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058c8:	f7fe ff4e 	bl	8004768 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <pvPortMalloc+0x174>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	60fb      	str	r3, [r7, #12]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <pvPortMalloc+0x172>
	return pvReturn;
 80058ec:	69fb      	ldr	r3, [r7, #28]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3728      	adds	r7, #40	; 0x28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20004298 	.word	0x20004298
 80058fc:	200042ac 	.word	0x200042ac
 8005900:	2000429c 	.word	0x2000429c
 8005904:	20004290 	.word	0x20004290
 8005908:	200042a0 	.word	0x200042a0
 800590c:	200042a4 	.word	0x200042a4

08005910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d04d      	beq.n	80059be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005922:	2308      	movs	r3, #8
 8005924:	425b      	negs	r3, r3
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4413      	add	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <vPortFree+0xb8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4013      	ands	r3, r2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <vPortFree+0x44>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	60fb      	str	r3, [r7, #12]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <vPortFree+0x62>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60bb      	str	r3, [r7, #8]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	4b14      	ldr	r3, [pc, #80]	; (80059c8 <vPortFree+0xb8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01e      	beq.n	80059be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11a      	bne.n	80059be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <vPortFree+0xb8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	43db      	mvns	r3, r3
 8005992:	401a      	ands	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005998:	f7fe fed8 	bl	800474c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <vPortFree+0xbc>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4413      	add	r3, r2
 80059a6:	4a09      	ldr	r2, [pc, #36]	; (80059cc <vPortFree+0xbc>)
 80059a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059aa:	6938      	ldr	r0, [r7, #16]
 80059ac:	f000 f874 	bl	8005a98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <vPortFree+0xc0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3301      	adds	r3, #1
 80059b6:	4a06      	ldr	r2, [pc, #24]	; (80059d0 <vPortFree+0xc0>)
 80059b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059ba:	f7fe fed5 	bl	8004768 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059be:	bf00      	nop
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	200042ac 	.word	0x200042ac
 80059cc:	2000429c 	.word	0x2000429c
 80059d0:	200042a8 	.word	0x200042a8

080059d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80059de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059e0:	4b27      	ldr	r3, [pc, #156]	; (8005a80 <prvHeapInit+0xac>)
 80059e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00c      	beq.n	8005a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3307      	adds	r3, #7
 80059f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0307 	bic.w	r3, r3, #7
 80059fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	4a1f      	ldr	r2, [pc, #124]	; (8005a80 <prvHeapInit+0xac>)
 8005a04:	4413      	add	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a0c:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <prvHeapInit+0xb0>)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a12:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <prvHeapInit+0xb0>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a20:	2208      	movs	r2, #8
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0307 	bic.w	r3, r3, #7
 8005a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <prvHeapInit+0xb4>)
 8005a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <prvHeapInit+0xb4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <prvHeapInit+0xb4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	1ad2      	subs	r2, r2, r3
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a54:	4b0c      	ldr	r3, [pc, #48]	; (8005a88 <prvHeapInit+0xb4>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <prvHeapInit+0xb8>)
 8005a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <prvHeapInit+0xbc>)
 8005a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a6c:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <prvHeapInit+0xc0>)
 8005a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a72:	601a      	str	r2, [r3, #0]
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	20000690 	.word	0x20000690
 8005a84:	20004290 	.word	0x20004290
 8005a88:	20004298 	.word	0x20004298
 8005a8c:	200042a0 	.word	0x200042a0
 8005a90:	2000429c 	.word	0x2000429c
 8005a94:	200042ac 	.word	0x200042ac

08005a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005aa0:	4b28      	ldr	r3, [pc, #160]	; (8005b44 <prvInsertBlockIntoFreeList+0xac>)
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	e002      	b.n	8005aac <prvInsertBlockIntoFreeList+0x14>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d8f7      	bhi.n	8005aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d108      	bne.n	8005ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	441a      	add	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	441a      	add	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d118      	bne.n	8005b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b15      	ldr	r3, [pc, #84]	; (8005b48 <prvInsertBlockIntoFreeList+0xb0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d00d      	beq.n	8005b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	441a      	add	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	e008      	b.n	8005b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b16:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <prvInsertBlockIntoFreeList+0xb0>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e003      	b.n	8005b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d002      	beq.n	8005b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20004290 	.word	0x20004290
 8005b48:	20004298 	.word	0x20004298

08005b4c <__errno>:
 8005b4c:	4b01      	ldr	r3, [pc, #4]	; (8005b54 <__errno+0x8>)
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000014 	.word	0x20000014

08005b58 <std>:
 8005b58:	2300      	movs	r3, #0
 8005b5a:	b510      	push	{r4, lr}
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b66:	6083      	str	r3, [r0, #8]
 8005b68:	8181      	strh	r1, [r0, #12]
 8005b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b6c:	81c2      	strh	r2, [r0, #14]
 8005b6e:	6183      	str	r3, [r0, #24]
 8005b70:	4619      	mov	r1, r3
 8005b72:	2208      	movs	r2, #8
 8005b74:	305c      	adds	r0, #92	; 0x5c
 8005b76:	f000 f91a 	bl	8005dae <memset>
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <std+0x38>)
 8005b7c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <std+0x3c>)
 8005b80:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <std+0x40>)
 8005b84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b86:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <std+0x44>)
 8005b88:	6224      	str	r4, [r4, #32]
 8005b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	bf00      	nop
 8005b90:	080068b1 	.word	0x080068b1
 8005b94:	080068d3 	.word	0x080068d3
 8005b98:	0800690b 	.word	0x0800690b
 8005b9c:	0800692f 	.word	0x0800692f

08005ba0 <_cleanup_r>:
 8005ba0:	4901      	ldr	r1, [pc, #4]	; (8005ba8 <_cleanup_r+0x8>)
 8005ba2:	f000 b8af 	b.w	8005d04 <_fwalk_reent>
 8005ba6:	bf00      	nop
 8005ba8:	08007781 	.word	0x08007781

08005bac <__sfmoreglue>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	2268      	movs	r2, #104	; 0x68
 8005bb0:	1e4d      	subs	r5, r1, #1
 8005bb2:	4355      	muls	r5, r2
 8005bb4:	460e      	mov	r6, r1
 8005bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bba:	f000 f921 	bl	8005e00 <_malloc_r>
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	b140      	cbz	r0, 8005bd4 <__sfmoreglue+0x28>
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	e9c0 1600 	strd	r1, r6, [r0]
 8005bc8:	300c      	adds	r0, #12
 8005bca:	60a0      	str	r0, [r4, #8]
 8005bcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bd0:	f000 f8ed 	bl	8005dae <memset>
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}

08005bd8 <__sfp_lock_acquire>:
 8005bd8:	4801      	ldr	r0, [pc, #4]	; (8005be0 <__sfp_lock_acquire+0x8>)
 8005bda:	f000 b8d8 	b.w	8005d8e <__retarget_lock_acquire_recursive>
 8005bde:	bf00      	nop
 8005be0:	200042b1 	.word	0x200042b1

08005be4 <__sfp_lock_release>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__sfp_lock_release+0x8>)
 8005be6:	f000 b8d3 	b.w	8005d90 <__retarget_lock_release_recursive>
 8005bea:	bf00      	nop
 8005bec:	200042b1 	.word	0x200042b1

08005bf0 <__sinit_lock_acquire>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__sinit_lock_acquire+0x8>)
 8005bf2:	f000 b8cc 	b.w	8005d8e <__retarget_lock_acquire_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	200042b2 	.word	0x200042b2

08005bfc <__sinit_lock_release>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	; (8005c04 <__sinit_lock_release+0x8>)
 8005bfe:	f000 b8c7 	b.w	8005d90 <__retarget_lock_release_recursive>
 8005c02:	bf00      	nop
 8005c04:	200042b2 	.word	0x200042b2

08005c08 <__sinit>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	f7ff fff0 	bl	8005bf0 <__sinit_lock_acquire>
 8005c10:	69a3      	ldr	r3, [r4, #24]
 8005c12:	b11b      	cbz	r3, 8005c1c <__sinit+0x14>
 8005c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c18:	f7ff bff0 	b.w	8005bfc <__sinit_lock_release>
 8005c1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c20:	6523      	str	r3, [r4, #80]	; 0x50
 8005c22:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <__sinit+0x68>)
 8005c24:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <__sinit+0x6c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	bf04      	itt	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	61a3      	streq	r3, [r4, #24]
 8005c32:	4620      	mov	r0, r4
 8005c34:	f000 f820 	bl	8005c78 <__sfp>
 8005c38:	6060      	str	r0, [r4, #4]
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 f81c 	bl	8005c78 <__sfp>
 8005c40:	60a0      	str	r0, [r4, #8]
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 f818 	bl	8005c78 <__sfp>
 8005c48:	2200      	movs	r2, #0
 8005c4a:	60e0      	str	r0, [r4, #12]
 8005c4c:	2104      	movs	r1, #4
 8005c4e:	6860      	ldr	r0, [r4, #4]
 8005c50:	f7ff ff82 	bl	8005b58 <std>
 8005c54:	68a0      	ldr	r0, [r4, #8]
 8005c56:	2201      	movs	r2, #1
 8005c58:	2109      	movs	r1, #9
 8005c5a:	f7ff ff7d 	bl	8005b58 <std>
 8005c5e:	68e0      	ldr	r0, [r4, #12]
 8005c60:	2202      	movs	r2, #2
 8005c62:	2112      	movs	r1, #18
 8005c64:	f7ff ff78 	bl	8005b58 <std>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	61a3      	str	r3, [r4, #24]
 8005c6c:	e7d2      	b.n	8005c14 <__sinit+0xc>
 8005c6e:	bf00      	nop
 8005c70:	080088f0 	.word	0x080088f0
 8005c74:	08005ba1 	.word	0x08005ba1

08005c78 <__sfp>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	f7ff ffac 	bl	8005bd8 <__sfp_lock_acquire>
 8005c80:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <__sfp+0x84>)
 8005c82:	681e      	ldr	r6, [r3, #0]
 8005c84:	69b3      	ldr	r3, [r6, #24]
 8005c86:	b913      	cbnz	r3, 8005c8e <__sfp+0x16>
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff ffbd 	bl	8005c08 <__sinit>
 8005c8e:	3648      	adds	r6, #72	; 0x48
 8005c90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	d503      	bpl.n	8005ca0 <__sfp+0x28>
 8005c98:	6833      	ldr	r3, [r6, #0]
 8005c9a:	b30b      	cbz	r3, 8005ce0 <__sfp+0x68>
 8005c9c:	6836      	ldr	r6, [r6, #0]
 8005c9e:	e7f7      	b.n	8005c90 <__sfp+0x18>
 8005ca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ca4:	b9d5      	cbnz	r5, 8005cdc <__sfp+0x64>
 8005ca6:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <__sfp+0x88>)
 8005ca8:	60e3      	str	r3, [r4, #12]
 8005caa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cae:	6665      	str	r5, [r4, #100]	; 0x64
 8005cb0:	f000 f86c 	bl	8005d8c <__retarget_lock_init_recursive>
 8005cb4:	f7ff ff96 	bl	8005be4 <__sfp_lock_release>
 8005cb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cc0:	6025      	str	r5, [r4, #0]
 8005cc2:	61a5      	str	r5, [r4, #24]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ccc:	f000 f86f 	bl	8005dae <memset>
 8005cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cd8:	4620      	mov	r0, r4
 8005cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cdc:	3468      	adds	r4, #104	; 0x68
 8005cde:	e7d9      	b.n	8005c94 <__sfp+0x1c>
 8005ce0:	2104      	movs	r1, #4
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f7ff ff62 	bl	8005bac <__sfmoreglue>
 8005ce8:	4604      	mov	r4, r0
 8005cea:	6030      	str	r0, [r6, #0]
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d1d5      	bne.n	8005c9c <__sfp+0x24>
 8005cf0:	f7ff ff78 	bl	8005be4 <__sfp_lock_release>
 8005cf4:	230c      	movs	r3, #12
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	e7ee      	b.n	8005cd8 <__sfp+0x60>
 8005cfa:	bf00      	nop
 8005cfc:	080088f0 	.word	0x080088f0
 8005d00:	ffff0001 	.word	0xffff0001

08005d04 <_fwalk_reent>:
 8005d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d08:	4606      	mov	r6, r0
 8005d0a:	4688      	mov	r8, r1
 8005d0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d10:	2700      	movs	r7, #0
 8005d12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d16:	f1b9 0901 	subs.w	r9, r9, #1
 8005d1a:	d505      	bpl.n	8005d28 <_fwalk_reent+0x24>
 8005d1c:	6824      	ldr	r4, [r4, #0]
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	d1f7      	bne.n	8005d12 <_fwalk_reent+0xe>
 8005d22:	4638      	mov	r0, r7
 8005d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d28:	89ab      	ldrh	r3, [r5, #12]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d907      	bls.n	8005d3e <_fwalk_reent+0x3a>
 8005d2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d32:	3301      	adds	r3, #1
 8005d34:	d003      	beq.n	8005d3e <_fwalk_reent+0x3a>
 8005d36:	4629      	mov	r1, r5
 8005d38:	4630      	mov	r0, r6
 8005d3a:	47c0      	blx	r8
 8005d3c:	4307      	orrs	r7, r0
 8005d3e:	3568      	adds	r5, #104	; 0x68
 8005d40:	e7e9      	b.n	8005d16 <_fwalk_reent+0x12>
	...

08005d44 <__libc_init_array>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	4d0d      	ldr	r5, [pc, #52]	; (8005d7c <__libc_init_array+0x38>)
 8005d48:	4c0d      	ldr	r4, [pc, #52]	; (8005d80 <__libc_init_array+0x3c>)
 8005d4a:	1b64      	subs	r4, r4, r5
 8005d4c:	10a4      	asrs	r4, r4, #2
 8005d4e:	2600      	movs	r6, #0
 8005d50:	42a6      	cmp	r6, r4
 8005d52:	d109      	bne.n	8005d68 <__libc_init_array+0x24>
 8005d54:	4d0b      	ldr	r5, [pc, #44]	; (8005d84 <__libc_init_array+0x40>)
 8005d56:	4c0c      	ldr	r4, [pc, #48]	; (8005d88 <__libc_init_array+0x44>)
 8005d58:	f002 fcac 	bl	80086b4 <_init>
 8005d5c:	1b64      	subs	r4, r4, r5
 8005d5e:	10a4      	asrs	r4, r4, #2
 8005d60:	2600      	movs	r6, #0
 8005d62:	42a6      	cmp	r6, r4
 8005d64:	d105      	bne.n	8005d72 <__libc_init_array+0x2e>
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6c:	4798      	blx	r3
 8005d6e:	3601      	adds	r6, #1
 8005d70:	e7ee      	b.n	8005d50 <__libc_init_array+0xc>
 8005d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d76:	4798      	blx	r3
 8005d78:	3601      	adds	r6, #1
 8005d7a:	e7f2      	b.n	8005d62 <__libc_init_array+0x1e>
 8005d7c:	08008c74 	.word	0x08008c74
 8005d80:	08008c74 	.word	0x08008c74
 8005d84:	08008c74 	.word	0x08008c74
 8005d88:	08008c78 	.word	0x08008c78

08005d8c <__retarget_lock_init_recursive>:
 8005d8c:	4770      	bx	lr

08005d8e <__retarget_lock_acquire_recursive>:
 8005d8e:	4770      	bx	lr

08005d90 <__retarget_lock_release_recursive>:
 8005d90:	4770      	bx	lr

08005d92 <memcpy>:
 8005d92:	440a      	add	r2, r1
 8005d94:	4291      	cmp	r1, r2
 8005d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d9a:	d100      	bne.n	8005d9e <memcpy+0xc>
 8005d9c:	4770      	bx	lr
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da8:	4291      	cmp	r1, r2
 8005daa:	d1f9      	bne.n	8005da0 <memcpy+0xe>
 8005dac:	bd10      	pop	{r4, pc}

08005dae <memset>:
 8005dae:	4402      	add	r2, r0
 8005db0:	4603      	mov	r3, r0
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d100      	bne.n	8005db8 <memset+0xa>
 8005db6:	4770      	bx	lr
 8005db8:	f803 1b01 	strb.w	r1, [r3], #1
 8005dbc:	e7f9      	b.n	8005db2 <memset+0x4>
	...

08005dc0 <sbrk_aligned>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	4e0e      	ldr	r6, [pc, #56]	; (8005dfc <sbrk_aligned+0x3c>)
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	6831      	ldr	r1, [r6, #0]
 8005dc8:	4605      	mov	r5, r0
 8005dca:	b911      	cbnz	r1, 8005dd2 <sbrk_aligned+0x12>
 8005dcc:	f000 fd60 	bl	8006890 <_sbrk_r>
 8005dd0:	6030      	str	r0, [r6, #0]
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f000 fd5b 	bl	8006890 <_sbrk_r>
 8005dda:	1c43      	adds	r3, r0, #1
 8005ddc:	d00a      	beq.n	8005df4 <sbrk_aligned+0x34>
 8005dde:	1cc4      	adds	r4, r0, #3
 8005de0:	f024 0403 	bic.w	r4, r4, #3
 8005de4:	42a0      	cmp	r0, r4
 8005de6:	d007      	beq.n	8005df8 <sbrk_aligned+0x38>
 8005de8:	1a21      	subs	r1, r4, r0
 8005dea:	4628      	mov	r0, r5
 8005dec:	f000 fd50 	bl	8006890 <_sbrk_r>
 8005df0:	3001      	adds	r0, #1
 8005df2:	d101      	bne.n	8005df8 <sbrk_aligned+0x38>
 8005df4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005df8:	4620      	mov	r0, r4
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	200042b8 	.word	0x200042b8

08005e00 <_malloc_r>:
 8005e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e04:	1ccd      	adds	r5, r1, #3
 8005e06:	f025 0503 	bic.w	r5, r5, #3
 8005e0a:	3508      	adds	r5, #8
 8005e0c:	2d0c      	cmp	r5, #12
 8005e0e:	bf38      	it	cc
 8005e10:	250c      	movcc	r5, #12
 8005e12:	2d00      	cmp	r5, #0
 8005e14:	4607      	mov	r7, r0
 8005e16:	db01      	blt.n	8005e1c <_malloc_r+0x1c>
 8005e18:	42a9      	cmp	r1, r5
 8005e1a:	d905      	bls.n	8005e28 <_malloc_r+0x28>
 8005e1c:	230c      	movs	r3, #12
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	2600      	movs	r6, #0
 8005e22:	4630      	mov	r0, r6
 8005e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e28:	4e2e      	ldr	r6, [pc, #184]	; (8005ee4 <_malloc_r+0xe4>)
 8005e2a:	f001 fd03 	bl	8007834 <__malloc_lock>
 8005e2e:	6833      	ldr	r3, [r6, #0]
 8005e30:	461c      	mov	r4, r3
 8005e32:	bb34      	cbnz	r4, 8005e82 <_malloc_r+0x82>
 8005e34:	4629      	mov	r1, r5
 8005e36:	4638      	mov	r0, r7
 8005e38:	f7ff ffc2 	bl	8005dc0 <sbrk_aligned>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	4604      	mov	r4, r0
 8005e40:	d14d      	bne.n	8005ede <_malloc_r+0xde>
 8005e42:	6834      	ldr	r4, [r6, #0]
 8005e44:	4626      	mov	r6, r4
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	d140      	bne.n	8005ecc <_malloc_r+0xcc>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4638      	mov	r0, r7
 8005e50:	eb04 0803 	add.w	r8, r4, r3
 8005e54:	f000 fd1c 	bl	8006890 <_sbrk_r>
 8005e58:	4580      	cmp	r8, r0
 8005e5a:	d13a      	bne.n	8005ed2 <_malloc_r+0xd2>
 8005e5c:	6821      	ldr	r1, [r4, #0]
 8005e5e:	3503      	adds	r5, #3
 8005e60:	1a6d      	subs	r5, r5, r1
 8005e62:	f025 0503 	bic.w	r5, r5, #3
 8005e66:	3508      	adds	r5, #8
 8005e68:	2d0c      	cmp	r5, #12
 8005e6a:	bf38      	it	cc
 8005e6c:	250c      	movcc	r5, #12
 8005e6e:	4629      	mov	r1, r5
 8005e70:	4638      	mov	r0, r7
 8005e72:	f7ff ffa5 	bl	8005dc0 <sbrk_aligned>
 8005e76:	3001      	adds	r0, #1
 8005e78:	d02b      	beq.n	8005ed2 <_malloc_r+0xd2>
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	442b      	add	r3, r5
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	e00e      	b.n	8005ea0 <_malloc_r+0xa0>
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	1b52      	subs	r2, r2, r5
 8005e86:	d41e      	bmi.n	8005ec6 <_malloc_r+0xc6>
 8005e88:	2a0b      	cmp	r2, #11
 8005e8a:	d916      	bls.n	8005eba <_malloc_r+0xba>
 8005e8c:	1961      	adds	r1, r4, r5
 8005e8e:	42a3      	cmp	r3, r4
 8005e90:	6025      	str	r5, [r4, #0]
 8005e92:	bf18      	it	ne
 8005e94:	6059      	strne	r1, [r3, #4]
 8005e96:	6863      	ldr	r3, [r4, #4]
 8005e98:	bf08      	it	eq
 8005e9a:	6031      	streq	r1, [r6, #0]
 8005e9c:	5162      	str	r2, [r4, r5]
 8005e9e:	604b      	str	r3, [r1, #4]
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	f104 060b 	add.w	r6, r4, #11
 8005ea6:	f001 fccb 	bl	8007840 <__malloc_unlock>
 8005eaa:	f026 0607 	bic.w	r6, r6, #7
 8005eae:	1d23      	adds	r3, r4, #4
 8005eb0:	1af2      	subs	r2, r6, r3
 8005eb2:	d0b6      	beq.n	8005e22 <_malloc_r+0x22>
 8005eb4:	1b9b      	subs	r3, r3, r6
 8005eb6:	50a3      	str	r3, [r4, r2]
 8005eb8:	e7b3      	b.n	8005e22 <_malloc_r+0x22>
 8005eba:	6862      	ldr	r2, [r4, #4]
 8005ebc:	42a3      	cmp	r3, r4
 8005ebe:	bf0c      	ite	eq
 8005ec0:	6032      	streq	r2, [r6, #0]
 8005ec2:	605a      	strne	r2, [r3, #4]
 8005ec4:	e7ec      	b.n	8005ea0 <_malloc_r+0xa0>
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	6864      	ldr	r4, [r4, #4]
 8005eca:	e7b2      	b.n	8005e32 <_malloc_r+0x32>
 8005ecc:	4634      	mov	r4, r6
 8005ece:	6876      	ldr	r6, [r6, #4]
 8005ed0:	e7b9      	b.n	8005e46 <_malloc_r+0x46>
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	f001 fcb2 	bl	8007840 <__malloc_unlock>
 8005edc:	e7a1      	b.n	8005e22 <_malloc_r+0x22>
 8005ede:	6025      	str	r5, [r4, #0]
 8005ee0:	e7de      	b.n	8005ea0 <_malloc_r+0xa0>
 8005ee2:	bf00      	nop
 8005ee4:	200042b4 	.word	0x200042b4

08005ee8 <__cvt>:
 8005ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eec:	ec55 4b10 	vmov	r4, r5, d0
 8005ef0:	2d00      	cmp	r5, #0
 8005ef2:	460e      	mov	r6, r1
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	462b      	mov	r3, r5
 8005ef8:	bfbb      	ittet	lt
 8005efa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005efe:	461d      	movlt	r5, r3
 8005f00:	2300      	movge	r3, #0
 8005f02:	232d      	movlt	r3, #45	; 0x2d
 8005f04:	700b      	strb	r3, [r1, #0]
 8005f06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f0c:	4691      	mov	r9, r2
 8005f0e:	f023 0820 	bic.w	r8, r3, #32
 8005f12:	bfbc      	itt	lt
 8005f14:	4622      	movlt	r2, r4
 8005f16:	4614      	movlt	r4, r2
 8005f18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f1c:	d005      	beq.n	8005f2a <__cvt+0x42>
 8005f1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f22:	d100      	bne.n	8005f26 <__cvt+0x3e>
 8005f24:	3601      	adds	r6, #1
 8005f26:	2102      	movs	r1, #2
 8005f28:	e000      	b.n	8005f2c <__cvt+0x44>
 8005f2a:	2103      	movs	r1, #3
 8005f2c:	ab03      	add	r3, sp, #12
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	ab02      	add	r3, sp, #8
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	ec45 4b10 	vmov	d0, r4, r5
 8005f38:	4653      	mov	r3, sl
 8005f3a:	4632      	mov	r2, r6
 8005f3c:	f000 fdac 	bl	8006a98 <_dtoa_r>
 8005f40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f44:	4607      	mov	r7, r0
 8005f46:	d102      	bne.n	8005f4e <__cvt+0x66>
 8005f48:	f019 0f01 	tst.w	r9, #1
 8005f4c:	d022      	beq.n	8005f94 <__cvt+0xac>
 8005f4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f52:	eb07 0906 	add.w	r9, r7, r6
 8005f56:	d110      	bne.n	8005f7a <__cvt+0x92>
 8005f58:	783b      	ldrb	r3, [r7, #0]
 8005f5a:	2b30      	cmp	r3, #48	; 0x30
 8005f5c:	d10a      	bne.n	8005f74 <__cvt+0x8c>
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2300      	movs	r3, #0
 8005f62:	4620      	mov	r0, r4
 8005f64:	4629      	mov	r1, r5
 8005f66:	f7fa fdcf 	bl	8000b08 <__aeabi_dcmpeq>
 8005f6a:	b918      	cbnz	r0, 8005f74 <__cvt+0x8c>
 8005f6c:	f1c6 0601 	rsb	r6, r6, #1
 8005f70:	f8ca 6000 	str.w	r6, [sl]
 8005f74:	f8da 3000 	ldr.w	r3, [sl]
 8005f78:	4499      	add	r9, r3
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4620      	mov	r0, r4
 8005f80:	4629      	mov	r1, r5
 8005f82:	f7fa fdc1 	bl	8000b08 <__aeabi_dcmpeq>
 8005f86:	b108      	cbz	r0, 8005f8c <__cvt+0xa4>
 8005f88:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f8c:	2230      	movs	r2, #48	; 0x30
 8005f8e:	9b03      	ldr	r3, [sp, #12]
 8005f90:	454b      	cmp	r3, r9
 8005f92:	d307      	bcc.n	8005fa4 <__cvt+0xbc>
 8005f94:	9b03      	ldr	r3, [sp, #12]
 8005f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f98:	1bdb      	subs	r3, r3, r7
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	b004      	add	sp, #16
 8005fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa4:	1c59      	adds	r1, r3, #1
 8005fa6:	9103      	str	r1, [sp, #12]
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e7f0      	b.n	8005f8e <__cvt+0xa6>

08005fac <__exponent>:
 8005fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	bfb8      	it	lt
 8005fb4:	4249      	neglt	r1, r1
 8005fb6:	f803 2b02 	strb.w	r2, [r3], #2
 8005fba:	bfb4      	ite	lt
 8005fbc:	222d      	movlt	r2, #45	; 0x2d
 8005fbe:	222b      	movge	r2, #43	; 0x2b
 8005fc0:	2909      	cmp	r1, #9
 8005fc2:	7042      	strb	r2, [r0, #1]
 8005fc4:	dd2a      	ble.n	800601c <__exponent+0x70>
 8005fc6:	f10d 0407 	add.w	r4, sp, #7
 8005fca:	46a4      	mov	ip, r4
 8005fcc:	270a      	movs	r7, #10
 8005fce:	46a6      	mov	lr, r4
 8005fd0:	460a      	mov	r2, r1
 8005fd2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005fd6:	fb07 1516 	mls	r5, r7, r6, r1
 8005fda:	3530      	adds	r5, #48	; 0x30
 8005fdc:	2a63      	cmp	r2, #99	; 0x63
 8005fde:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005fe2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	dcf1      	bgt.n	8005fce <__exponent+0x22>
 8005fea:	3130      	adds	r1, #48	; 0x30
 8005fec:	f1ae 0502 	sub.w	r5, lr, #2
 8005ff0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ff4:	1c44      	adds	r4, r0, #1
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4561      	cmp	r1, ip
 8005ffa:	d30a      	bcc.n	8006012 <__exponent+0x66>
 8005ffc:	f10d 0209 	add.w	r2, sp, #9
 8006000:	eba2 020e 	sub.w	r2, r2, lr
 8006004:	4565      	cmp	r5, ip
 8006006:	bf88      	it	hi
 8006008:	2200      	movhi	r2, #0
 800600a:	4413      	add	r3, r2
 800600c:	1a18      	subs	r0, r3, r0
 800600e:	b003      	add	sp, #12
 8006010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006016:	f804 2f01 	strb.w	r2, [r4, #1]!
 800601a:	e7ed      	b.n	8005ff8 <__exponent+0x4c>
 800601c:	2330      	movs	r3, #48	; 0x30
 800601e:	3130      	adds	r1, #48	; 0x30
 8006020:	7083      	strb	r3, [r0, #2]
 8006022:	70c1      	strb	r1, [r0, #3]
 8006024:	1d03      	adds	r3, r0, #4
 8006026:	e7f1      	b.n	800600c <__exponent+0x60>

08006028 <_printf_float>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	ed2d 8b02 	vpush	{d8}
 8006030:	b08d      	sub	sp, #52	; 0x34
 8006032:	460c      	mov	r4, r1
 8006034:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006038:	4616      	mov	r6, r2
 800603a:	461f      	mov	r7, r3
 800603c:	4605      	mov	r5, r0
 800603e:	f001 fbdb 	bl	80077f8 <_localeconv_r>
 8006042:	f8d0 a000 	ldr.w	sl, [r0]
 8006046:	4650      	mov	r0, sl
 8006048:	f7fa f8e2 	bl	8000210 <strlen>
 800604c:	2300      	movs	r3, #0
 800604e:	930a      	str	r3, [sp, #40]	; 0x28
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	9305      	str	r3, [sp, #20]
 8006054:	f8d8 3000 	ldr.w	r3, [r8]
 8006058:	f894 b018 	ldrb.w	fp, [r4, #24]
 800605c:	3307      	adds	r3, #7
 800605e:	f023 0307 	bic.w	r3, r3, #7
 8006062:	f103 0208 	add.w	r2, r3, #8
 8006066:	f8c8 2000 	str.w	r2, [r8]
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006072:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006076:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800607a:	9307      	str	r3, [sp, #28]
 800607c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006080:	ee08 0a10 	vmov	s16, r0
 8006084:	4b9f      	ldr	r3, [pc, #636]	; (8006304 <_printf_float+0x2dc>)
 8006086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800608a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800608e:	f7fa fd6d 	bl	8000b6c <__aeabi_dcmpun>
 8006092:	bb88      	cbnz	r0, 80060f8 <_printf_float+0xd0>
 8006094:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006098:	4b9a      	ldr	r3, [pc, #616]	; (8006304 <_printf_float+0x2dc>)
 800609a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800609e:	f7fa fd47 	bl	8000b30 <__aeabi_dcmple>
 80060a2:	bb48      	cbnz	r0, 80060f8 <_printf_float+0xd0>
 80060a4:	2200      	movs	r2, #0
 80060a6:	2300      	movs	r3, #0
 80060a8:	4640      	mov	r0, r8
 80060aa:	4649      	mov	r1, r9
 80060ac:	f7fa fd36 	bl	8000b1c <__aeabi_dcmplt>
 80060b0:	b110      	cbz	r0, 80060b8 <_printf_float+0x90>
 80060b2:	232d      	movs	r3, #45	; 0x2d
 80060b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b8:	4b93      	ldr	r3, [pc, #588]	; (8006308 <_printf_float+0x2e0>)
 80060ba:	4894      	ldr	r0, [pc, #592]	; (800630c <_printf_float+0x2e4>)
 80060bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80060c0:	bf94      	ite	ls
 80060c2:	4698      	movls	r8, r3
 80060c4:	4680      	movhi	r8, r0
 80060c6:	2303      	movs	r3, #3
 80060c8:	6123      	str	r3, [r4, #16]
 80060ca:	9b05      	ldr	r3, [sp, #20]
 80060cc:	f023 0204 	bic.w	r2, r3, #4
 80060d0:	6022      	str	r2, [r4, #0]
 80060d2:	f04f 0900 	mov.w	r9, #0
 80060d6:	9700      	str	r7, [sp, #0]
 80060d8:	4633      	mov	r3, r6
 80060da:	aa0b      	add	r2, sp, #44	; 0x2c
 80060dc:	4621      	mov	r1, r4
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 f9d8 	bl	8006494 <_printf_common>
 80060e4:	3001      	adds	r0, #1
 80060e6:	f040 8090 	bne.w	800620a <_printf_float+0x1e2>
 80060ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060ee:	b00d      	add	sp, #52	; 0x34
 80060f0:	ecbd 8b02 	vpop	{d8}
 80060f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f8:	4642      	mov	r2, r8
 80060fa:	464b      	mov	r3, r9
 80060fc:	4640      	mov	r0, r8
 80060fe:	4649      	mov	r1, r9
 8006100:	f7fa fd34 	bl	8000b6c <__aeabi_dcmpun>
 8006104:	b140      	cbz	r0, 8006118 <_printf_float+0xf0>
 8006106:	464b      	mov	r3, r9
 8006108:	2b00      	cmp	r3, #0
 800610a:	bfbc      	itt	lt
 800610c:	232d      	movlt	r3, #45	; 0x2d
 800610e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006112:	487f      	ldr	r0, [pc, #508]	; (8006310 <_printf_float+0x2e8>)
 8006114:	4b7f      	ldr	r3, [pc, #508]	; (8006314 <_printf_float+0x2ec>)
 8006116:	e7d1      	b.n	80060bc <_printf_float+0x94>
 8006118:	6863      	ldr	r3, [r4, #4]
 800611a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800611e:	9206      	str	r2, [sp, #24]
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	d13f      	bne.n	80061a4 <_printf_float+0x17c>
 8006124:	2306      	movs	r3, #6
 8006126:	6063      	str	r3, [r4, #4]
 8006128:	9b05      	ldr	r3, [sp, #20]
 800612a:	6861      	ldr	r1, [r4, #4]
 800612c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006130:	2300      	movs	r3, #0
 8006132:	9303      	str	r3, [sp, #12]
 8006134:	ab0a      	add	r3, sp, #40	; 0x28
 8006136:	e9cd b301 	strd	fp, r3, [sp, #4]
 800613a:	ab09      	add	r3, sp, #36	; 0x24
 800613c:	ec49 8b10 	vmov	d0, r8, r9
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	6022      	str	r2, [r4, #0]
 8006144:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006148:	4628      	mov	r0, r5
 800614a:	f7ff fecd 	bl	8005ee8 <__cvt>
 800614e:	9b06      	ldr	r3, [sp, #24]
 8006150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006152:	2b47      	cmp	r3, #71	; 0x47
 8006154:	4680      	mov	r8, r0
 8006156:	d108      	bne.n	800616a <_printf_float+0x142>
 8006158:	1cc8      	adds	r0, r1, #3
 800615a:	db02      	blt.n	8006162 <_printf_float+0x13a>
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	4299      	cmp	r1, r3
 8006160:	dd41      	ble.n	80061e6 <_printf_float+0x1be>
 8006162:	f1ab 0b02 	sub.w	fp, fp, #2
 8006166:	fa5f fb8b 	uxtb.w	fp, fp
 800616a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800616e:	d820      	bhi.n	80061b2 <_printf_float+0x18a>
 8006170:	3901      	subs	r1, #1
 8006172:	465a      	mov	r2, fp
 8006174:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006178:	9109      	str	r1, [sp, #36]	; 0x24
 800617a:	f7ff ff17 	bl	8005fac <__exponent>
 800617e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006180:	1813      	adds	r3, r2, r0
 8006182:	2a01      	cmp	r2, #1
 8006184:	4681      	mov	r9, r0
 8006186:	6123      	str	r3, [r4, #16]
 8006188:	dc02      	bgt.n	8006190 <_printf_float+0x168>
 800618a:	6822      	ldr	r2, [r4, #0]
 800618c:	07d2      	lsls	r2, r2, #31
 800618e:	d501      	bpl.n	8006194 <_printf_float+0x16c>
 8006190:	3301      	adds	r3, #1
 8006192:	6123      	str	r3, [r4, #16]
 8006194:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006198:	2b00      	cmp	r3, #0
 800619a:	d09c      	beq.n	80060d6 <_printf_float+0xae>
 800619c:	232d      	movs	r3, #45	; 0x2d
 800619e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061a2:	e798      	b.n	80060d6 <_printf_float+0xae>
 80061a4:	9a06      	ldr	r2, [sp, #24]
 80061a6:	2a47      	cmp	r2, #71	; 0x47
 80061a8:	d1be      	bne.n	8006128 <_printf_float+0x100>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1bc      	bne.n	8006128 <_printf_float+0x100>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e7b9      	b.n	8006126 <_printf_float+0xfe>
 80061b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80061b6:	d118      	bne.n	80061ea <_printf_float+0x1c2>
 80061b8:	2900      	cmp	r1, #0
 80061ba:	6863      	ldr	r3, [r4, #4]
 80061bc:	dd0b      	ble.n	80061d6 <_printf_float+0x1ae>
 80061be:	6121      	str	r1, [r4, #16]
 80061c0:	b913      	cbnz	r3, 80061c8 <_printf_float+0x1a0>
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	07d0      	lsls	r0, r2, #31
 80061c6:	d502      	bpl.n	80061ce <_printf_float+0x1a6>
 80061c8:	3301      	adds	r3, #1
 80061ca:	440b      	add	r3, r1
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80061d0:	f04f 0900 	mov.w	r9, #0
 80061d4:	e7de      	b.n	8006194 <_printf_float+0x16c>
 80061d6:	b913      	cbnz	r3, 80061de <_printf_float+0x1b6>
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	07d2      	lsls	r2, r2, #31
 80061dc:	d501      	bpl.n	80061e2 <_printf_float+0x1ba>
 80061de:	3302      	adds	r3, #2
 80061e0:	e7f4      	b.n	80061cc <_printf_float+0x1a4>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e7f2      	b.n	80061cc <_printf_float+0x1a4>
 80061e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80061ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ec:	4299      	cmp	r1, r3
 80061ee:	db05      	blt.n	80061fc <_printf_float+0x1d4>
 80061f0:	6823      	ldr	r3, [r4, #0]
 80061f2:	6121      	str	r1, [r4, #16]
 80061f4:	07d8      	lsls	r0, r3, #31
 80061f6:	d5ea      	bpl.n	80061ce <_printf_float+0x1a6>
 80061f8:	1c4b      	adds	r3, r1, #1
 80061fa:	e7e7      	b.n	80061cc <_printf_float+0x1a4>
 80061fc:	2900      	cmp	r1, #0
 80061fe:	bfd4      	ite	le
 8006200:	f1c1 0202 	rsble	r2, r1, #2
 8006204:	2201      	movgt	r2, #1
 8006206:	4413      	add	r3, r2
 8006208:	e7e0      	b.n	80061cc <_printf_float+0x1a4>
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	055a      	lsls	r2, r3, #21
 800620e:	d407      	bmi.n	8006220 <_printf_float+0x1f8>
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	4642      	mov	r2, r8
 8006214:	4631      	mov	r1, r6
 8006216:	4628      	mov	r0, r5
 8006218:	47b8      	blx	r7
 800621a:	3001      	adds	r0, #1
 800621c:	d12c      	bne.n	8006278 <_printf_float+0x250>
 800621e:	e764      	b.n	80060ea <_printf_float+0xc2>
 8006220:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006224:	f240 80e0 	bls.w	80063e8 <_printf_float+0x3c0>
 8006228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800622c:	2200      	movs	r2, #0
 800622e:	2300      	movs	r3, #0
 8006230:	f7fa fc6a 	bl	8000b08 <__aeabi_dcmpeq>
 8006234:	2800      	cmp	r0, #0
 8006236:	d034      	beq.n	80062a2 <_printf_float+0x27a>
 8006238:	4a37      	ldr	r2, [pc, #220]	; (8006318 <_printf_float+0x2f0>)
 800623a:	2301      	movs	r3, #1
 800623c:	4631      	mov	r1, r6
 800623e:	4628      	mov	r0, r5
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	f43f af51 	beq.w	80060ea <_printf_float+0xc2>
 8006248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800624c:	429a      	cmp	r2, r3
 800624e:	db02      	blt.n	8006256 <_printf_float+0x22e>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	07d8      	lsls	r0, r3, #31
 8006254:	d510      	bpl.n	8006278 <_printf_float+0x250>
 8006256:	ee18 3a10 	vmov	r3, s16
 800625a:	4652      	mov	r2, sl
 800625c:	4631      	mov	r1, r6
 800625e:	4628      	mov	r0, r5
 8006260:	47b8      	blx	r7
 8006262:	3001      	adds	r0, #1
 8006264:	f43f af41 	beq.w	80060ea <_printf_float+0xc2>
 8006268:	f04f 0800 	mov.w	r8, #0
 800626c:	f104 091a 	add.w	r9, r4, #26
 8006270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006272:	3b01      	subs	r3, #1
 8006274:	4543      	cmp	r3, r8
 8006276:	dc09      	bgt.n	800628c <_printf_float+0x264>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	079b      	lsls	r3, r3, #30
 800627c:	f100 8105 	bmi.w	800648a <_printf_float+0x462>
 8006280:	68e0      	ldr	r0, [r4, #12]
 8006282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006284:	4298      	cmp	r0, r3
 8006286:	bfb8      	it	lt
 8006288:	4618      	movlt	r0, r3
 800628a:	e730      	b.n	80060ee <_printf_float+0xc6>
 800628c:	2301      	movs	r3, #1
 800628e:	464a      	mov	r2, r9
 8006290:	4631      	mov	r1, r6
 8006292:	4628      	mov	r0, r5
 8006294:	47b8      	blx	r7
 8006296:	3001      	adds	r0, #1
 8006298:	f43f af27 	beq.w	80060ea <_printf_float+0xc2>
 800629c:	f108 0801 	add.w	r8, r8, #1
 80062a0:	e7e6      	b.n	8006270 <_printf_float+0x248>
 80062a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	dc39      	bgt.n	800631c <_printf_float+0x2f4>
 80062a8:	4a1b      	ldr	r2, [pc, #108]	; (8006318 <_printf_float+0x2f0>)
 80062aa:	2301      	movs	r3, #1
 80062ac:	4631      	mov	r1, r6
 80062ae:	4628      	mov	r0, r5
 80062b0:	47b8      	blx	r7
 80062b2:	3001      	adds	r0, #1
 80062b4:	f43f af19 	beq.w	80060ea <_printf_float+0xc2>
 80062b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062bc:	4313      	orrs	r3, r2
 80062be:	d102      	bne.n	80062c6 <_printf_float+0x29e>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	07d9      	lsls	r1, r3, #31
 80062c4:	d5d8      	bpl.n	8006278 <_printf_float+0x250>
 80062c6:	ee18 3a10 	vmov	r3, s16
 80062ca:	4652      	mov	r2, sl
 80062cc:	4631      	mov	r1, r6
 80062ce:	4628      	mov	r0, r5
 80062d0:	47b8      	blx	r7
 80062d2:	3001      	adds	r0, #1
 80062d4:	f43f af09 	beq.w	80060ea <_printf_float+0xc2>
 80062d8:	f04f 0900 	mov.w	r9, #0
 80062dc:	f104 0a1a 	add.w	sl, r4, #26
 80062e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e2:	425b      	negs	r3, r3
 80062e4:	454b      	cmp	r3, r9
 80062e6:	dc01      	bgt.n	80062ec <_printf_float+0x2c4>
 80062e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ea:	e792      	b.n	8006212 <_printf_float+0x1ea>
 80062ec:	2301      	movs	r3, #1
 80062ee:	4652      	mov	r2, sl
 80062f0:	4631      	mov	r1, r6
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	f43f aef7 	beq.w	80060ea <_printf_float+0xc2>
 80062fc:	f109 0901 	add.w	r9, r9, #1
 8006300:	e7ee      	b.n	80062e0 <_printf_float+0x2b8>
 8006302:	bf00      	nop
 8006304:	7fefffff 	.word	0x7fefffff
 8006308:	080088f4 	.word	0x080088f4
 800630c:	080088f8 	.word	0x080088f8
 8006310:	08008900 	.word	0x08008900
 8006314:	080088fc 	.word	0x080088fc
 8006318:	08008904 	.word	0x08008904
 800631c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800631e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006320:	429a      	cmp	r2, r3
 8006322:	bfa8      	it	ge
 8006324:	461a      	movge	r2, r3
 8006326:	2a00      	cmp	r2, #0
 8006328:	4691      	mov	r9, r2
 800632a:	dc37      	bgt.n	800639c <_printf_float+0x374>
 800632c:	f04f 0b00 	mov.w	fp, #0
 8006330:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006334:	f104 021a 	add.w	r2, r4, #26
 8006338:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800633a:	9305      	str	r3, [sp, #20]
 800633c:	eba3 0309 	sub.w	r3, r3, r9
 8006340:	455b      	cmp	r3, fp
 8006342:	dc33      	bgt.n	80063ac <_printf_float+0x384>
 8006344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006348:	429a      	cmp	r2, r3
 800634a:	db3b      	blt.n	80063c4 <_printf_float+0x39c>
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	07da      	lsls	r2, r3, #31
 8006350:	d438      	bmi.n	80063c4 <_printf_float+0x39c>
 8006352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006354:	9a05      	ldr	r2, [sp, #20]
 8006356:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006358:	1a9a      	subs	r2, r3, r2
 800635a:	eba3 0901 	sub.w	r9, r3, r1
 800635e:	4591      	cmp	r9, r2
 8006360:	bfa8      	it	ge
 8006362:	4691      	movge	r9, r2
 8006364:	f1b9 0f00 	cmp.w	r9, #0
 8006368:	dc35      	bgt.n	80063d6 <_printf_float+0x3ae>
 800636a:	f04f 0800 	mov.w	r8, #0
 800636e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006372:	f104 0a1a 	add.w	sl, r4, #26
 8006376:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800637a:	1a9b      	subs	r3, r3, r2
 800637c:	eba3 0309 	sub.w	r3, r3, r9
 8006380:	4543      	cmp	r3, r8
 8006382:	f77f af79 	ble.w	8006278 <_printf_float+0x250>
 8006386:	2301      	movs	r3, #1
 8006388:	4652      	mov	r2, sl
 800638a:	4631      	mov	r1, r6
 800638c:	4628      	mov	r0, r5
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	f43f aeaa 	beq.w	80060ea <_printf_float+0xc2>
 8006396:	f108 0801 	add.w	r8, r8, #1
 800639a:	e7ec      	b.n	8006376 <_printf_float+0x34e>
 800639c:	4613      	mov	r3, r2
 800639e:	4631      	mov	r1, r6
 80063a0:	4642      	mov	r2, r8
 80063a2:	4628      	mov	r0, r5
 80063a4:	47b8      	blx	r7
 80063a6:	3001      	adds	r0, #1
 80063a8:	d1c0      	bne.n	800632c <_printf_float+0x304>
 80063aa:	e69e      	b.n	80060ea <_printf_float+0xc2>
 80063ac:	2301      	movs	r3, #1
 80063ae:	4631      	mov	r1, r6
 80063b0:	4628      	mov	r0, r5
 80063b2:	9205      	str	r2, [sp, #20]
 80063b4:	47b8      	blx	r7
 80063b6:	3001      	adds	r0, #1
 80063b8:	f43f ae97 	beq.w	80060ea <_printf_float+0xc2>
 80063bc:	9a05      	ldr	r2, [sp, #20]
 80063be:	f10b 0b01 	add.w	fp, fp, #1
 80063c2:	e7b9      	b.n	8006338 <_printf_float+0x310>
 80063c4:	ee18 3a10 	vmov	r3, s16
 80063c8:	4652      	mov	r2, sl
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	d1be      	bne.n	8006352 <_printf_float+0x32a>
 80063d4:	e689      	b.n	80060ea <_printf_float+0xc2>
 80063d6:	9a05      	ldr	r2, [sp, #20]
 80063d8:	464b      	mov	r3, r9
 80063da:	4442      	add	r2, r8
 80063dc:	4631      	mov	r1, r6
 80063de:	4628      	mov	r0, r5
 80063e0:	47b8      	blx	r7
 80063e2:	3001      	adds	r0, #1
 80063e4:	d1c1      	bne.n	800636a <_printf_float+0x342>
 80063e6:	e680      	b.n	80060ea <_printf_float+0xc2>
 80063e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063ea:	2a01      	cmp	r2, #1
 80063ec:	dc01      	bgt.n	80063f2 <_printf_float+0x3ca>
 80063ee:	07db      	lsls	r3, r3, #31
 80063f0:	d538      	bpl.n	8006464 <_printf_float+0x43c>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4642      	mov	r2, r8
 80063f6:	4631      	mov	r1, r6
 80063f8:	4628      	mov	r0, r5
 80063fa:	47b8      	blx	r7
 80063fc:	3001      	adds	r0, #1
 80063fe:	f43f ae74 	beq.w	80060ea <_printf_float+0xc2>
 8006402:	ee18 3a10 	vmov	r3, s16
 8006406:	4652      	mov	r2, sl
 8006408:	4631      	mov	r1, r6
 800640a:	4628      	mov	r0, r5
 800640c:	47b8      	blx	r7
 800640e:	3001      	adds	r0, #1
 8006410:	f43f ae6b 	beq.w	80060ea <_printf_float+0xc2>
 8006414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006418:	2200      	movs	r2, #0
 800641a:	2300      	movs	r3, #0
 800641c:	f7fa fb74 	bl	8000b08 <__aeabi_dcmpeq>
 8006420:	b9d8      	cbnz	r0, 800645a <_printf_float+0x432>
 8006422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006424:	f108 0201 	add.w	r2, r8, #1
 8006428:	3b01      	subs	r3, #1
 800642a:	4631      	mov	r1, r6
 800642c:	4628      	mov	r0, r5
 800642e:	47b8      	blx	r7
 8006430:	3001      	adds	r0, #1
 8006432:	d10e      	bne.n	8006452 <_printf_float+0x42a>
 8006434:	e659      	b.n	80060ea <_printf_float+0xc2>
 8006436:	2301      	movs	r3, #1
 8006438:	4652      	mov	r2, sl
 800643a:	4631      	mov	r1, r6
 800643c:	4628      	mov	r0, r5
 800643e:	47b8      	blx	r7
 8006440:	3001      	adds	r0, #1
 8006442:	f43f ae52 	beq.w	80060ea <_printf_float+0xc2>
 8006446:	f108 0801 	add.w	r8, r8, #1
 800644a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800644c:	3b01      	subs	r3, #1
 800644e:	4543      	cmp	r3, r8
 8006450:	dcf1      	bgt.n	8006436 <_printf_float+0x40e>
 8006452:	464b      	mov	r3, r9
 8006454:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006458:	e6dc      	b.n	8006214 <_printf_float+0x1ec>
 800645a:	f04f 0800 	mov.w	r8, #0
 800645e:	f104 0a1a 	add.w	sl, r4, #26
 8006462:	e7f2      	b.n	800644a <_printf_float+0x422>
 8006464:	2301      	movs	r3, #1
 8006466:	4642      	mov	r2, r8
 8006468:	e7df      	b.n	800642a <_printf_float+0x402>
 800646a:	2301      	movs	r3, #1
 800646c:	464a      	mov	r2, r9
 800646e:	4631      	mov	r1, r6
 8006470:	4628      	mov	r0, r5
 8006472:	47b8      	blx	r7
 8006474:	3001      	adds	r0, #1
 8006476:	f43f ae38 	beq.w	80060ea <_printf_float+0xc2>
 800647a:	f108 0801 	add.w	r8, r8, #1
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006482:	1a5b      	subs	r3, r3, r1
 8006484:	4543      	cmp	r3, r8
 8006486:	dcf0      	bgt.n	800646a <_printf_float+0x442>
 8006488:	e6fa      	b.n	8006280 <_printf_float+0x258>
 800648a:	f04f 0800 	mov.w	r8, #0
 800648e:	f104 0919 	add.w	r9, r4, #25
 8006492:	e7f4      	b.n	800647e <_printf_float+0x456>

08006494 <_printf_common>:
 8006494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	4616      	mov	r6, r2
 800649a:	4699      	mov	r9, r3
 800649c:	688a      	ldr	r2, [r1, #8]
 800649e:	690b      	ldr	r3, [r1, #16]
 80064a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064a4:	4293      	cmp	r3, r2
 80064a6:	bfb8      	it	lt
 80064a8:	4613      	movlt	r3, r2
 80064aa:	6033      	str	r3, [r6, #0]
 80064ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064b0:	4607      	mov	r7, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	b10a      	cbz	r2, 80064ba <_printf_common+0x26>
 80064b6:	3301      	adds	r3, #1
 80064b8:	6033      	str	r3, [r6, #0]
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	0699      	lsls	r1, r3, #26
 80064be:	bf42      	ittt	mi
 80064c0:	6833      	ldrmi	r3, [r6, #0]
 80064c2:	3302      	addmi	r3, #2
 80064c4:	6033      	strmi	r3, [r6, #0]
 80064c6:	6825      	ldr	r5, [r4, #0]
 80064c8:	f015 0506 	ands.w	r5, r5, #6
 80064cc:	d106      	bne.n	80064dc <_printf_common+0x48>
 80064ce:	f104 0a19 	add.w	sl, r4, #25
 80064d2:	68e3      	ldr	r3, [r4, #12]
 80064d4:	6832      	ldr	r2, [r6, #0]
 80064d6:	1a9b      	subs	r3, r3, r2
 80064d8:	42ab      	cmp	r3, r5
 80064da:	dc26      	bgt.n	800652a <_printf_common+0x96>
 80064dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064e0:	1e13      	subs	r3, r2, #0
 80064e2:	6822      	ldr	r2, [r4, #0]
 80064e4:	bf18      	it	ne
 80064e6:	2301      	movne	r3, #1
 80064e8:	0692      	lsls	r2, r2, #26
 80064ea:	d42b      	bmi.n	8006544 <_printf_common+0xb0>
 80064ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064f0:	4649      	mov	r1, r9
 80064f2:	4638      	mov	r0, r7
 80064f4:	47c0      	blx	r8
 80064f6:	3001      	adds	r0, #1
 80064f8:	d01e      	beq.n	8006538 <_printf_common+0xa4>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	68e5      	ldr	r5, [r4, #12]
 80064fe:	6832      	ldr	r2, [r6, #0]
 8006500:	f003 0306 	and.w	r3, r3, #6
 8006504:	2b04      	cmp	r3, #4
 8006506:	bf08      	it	eq
 8006508:	1aad      	subeq	r5, r5, r2
 800650a:	68a3      	ldr	r3, [r4, #8]
 800650c:	6922      	ldr	r2, [r4, #16]
 800650e:	bf0c      	ite	eq
 8006510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006514:	2500      	movne	r5, #0
 8006516:	4293      	cmp	r3, r2
 8006518:	bfc4      	itt	gt
 800651a:	1a9b      	subgt	r3, r3, r2
 800651c:	18ed      	addgt	r5, r5, r3
 800651e:	2600      	movs	r6, #0
 8006520:	341a      	adds	r4, #26
 8006522:	42b5      	cmp	r5, r6
 8006524:	d11a      	bne.n	800655c <_printf_common+0xc8>
 8006526:	2000      	movs	r0, #0
 8006528:	e008      	b.n	800653c <_printf_common+0xa8>
 800652a:	2301      	movs	r3, #1
 800652c:	4652      	mov	r2, sl
 800652e:	4649      	mov	r1, r9
 8006530:	4638      	mov	r0, r7
 8006532:	47c0      	blx	r8
 8006534:	3001      	adds	r0, #1
 8006536:	d103      	bne.n	8006540 <_printf_common+0xac>
 8006538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800653c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006540:	3501      	adds	r5, #1
 8006542:	e7c6      	b.n	80064d2 <_printf_common+0x3e>
 8006544:	18e1      	adds	r1, r4, r3
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	2030      	movs	r0, #48	; 0x30
 800654a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800654e:	4422      	add	r2, r4
 8006550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006554:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006558:	3302      	adds	r3, #2
 800655a:	e7c7      	b.n	80064ec <_printf_common+0x58>
 800655c:	2301      	movs	r3, #1
 800655e:	4622      	mov	r2, r4
 8006560:	4649      	mov	r1, r9
 8006562:	4638      	mov	r0, r7
 8006564:	47c0      	blx	r8
 8006566:	3001      	adds	r0, #1
 8006568:	d0e6      	beq.n	8006538 <_printf_common+0xa4>
 800656a:	3601      	adds	r6, #1
 800656c:	e7d9      	b.n	8006522 <_printf_common+0x8e>
	...

08006570 <_printf_i>:
 8006570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	7e0f      	ldrb	r7, [r1, #24]
 8006576:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006578:	2f78      	cmp	r7, #120	; 0x78
 800657a:	4691      	mov	r9, r2
 800657c:	4680      	mov	r8, r0
 800657e:	460c      	mov	r4, r1
 8006580:	469a      	mov	sl, r3
 8006582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006586:	d807      	bhi.n	8006598 <_printf_i+0x28>
 8006588:	2f62      	cmp	r7, #98	; 0x62
 800658a:	d80a      	bhi.n	80065a2 <_printf_i+0x32>
 800658c:	2f00      	cmp	r7, #0
 800658e:	f000 80d8 	beq.w	8006742 <_printf_i+0x1d2>
 8006592:	2f58      	cmp	r7, #88	; 0x58
 8006594:	f000 80a3 	beq.w	80066de <_printf_i+0x16e>
 8006598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800659c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065a0:	e03a      	b.n	8006618 <_printf_i+0xa8>
 80065a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065a6:	2b15      	cmp	r3, #21
 80065a8:	d8f6      	bhi.n	8006598 <_printf_i+0x28>
 80065aa:	a101      	add	r1, pc, #4	; (adr r1, 80065b0 <_printf_i+0x40>)
 80065ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065b0:	08006609 	.word	0x08006609
 80065b4:	0800661d 	.word	0x0800661d
 80065b8:	08006599 	.word	0x08006599
 80065bc:	08006599 	.word	0x08006599
 80065c0:	08006599 	.word	0x08006599
 80065c4:	08006599 	.word	0x08006599
 80065c8:	0800661d 	.word	0x0800661d
 80065cc:	08006599 	.word	0x08006599
 80065d0:	08006599 	.word	0x08006599
 80065d4:	08006599 	.word	0x08006599
 80065d8:	08006599 	.word	0x08006599
 80065dc:	08006729 	.word	0x08006729
 80065e0:	0800664d 	.word	0x0800664d
 80065e4:	0800670b 	.word	0x0800670b
 80065e8:	08006599 	.word	0x08006599
 80065ec:	08006599 	.word	0x08006599
 80065f0:	0800674b 	.word	0x0800674b
 80065f4:	08006599 	.word	0x08006599
 80065f8:	0800664d 	.word	0x0800664d
 80065fc:	08006599 	.word	0x08006599
 8006600:	08006599 	.word	0x08006599
 8006604:	08006713 	.word	0x08006713
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	1d1a      	adds	r2, r3, #4
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	602a      	str	r2, [r5, #0]
 8006610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006618:	2301      	movs	r3, #1
 800661a:	e0a3      	b.n	8006764 <_printf_i+0x1f4>
 800661c:	6820      	ldr	r0, [r4, #0]
 800661e:	6829      	ldr	r1, [r5, #0]
 8006620:	0606      	lsls	r6, r0, #24
 8006622:	f101 0304 	add.w	r3, r1, #4
 8006626:	d50a      	bpl.n	800663e <_printf_i+0xce>
 8006628:	680e      	ldr	r6, [r1, #0]
 800662a:	602b      	str	r3, [r5, #0]
 800662c:	2e00      	cmp	r6, #0
 800662e:	da03      	bge.n	8006638 <_printf_i+0xc8>
 8006630:	232d      	movs	r3, #45	; 0x2d
 8006632:	4276      	negs	r6, r6
 8006634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006638:	485e      	ldr	r0, [pc, #376]	; (80067b4 <_printf_i+0x244>)
 800663a:	230a      	movs	r3, #10
 800663c:	e019      	b.n	8006672 <_printf_i+0x102>
 800663e:	680e      	ldr	r6, [r1, #0]
 8006640:	602b      	str	r3, [r5, #0]
 8006642:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006646:	bf18      	it	ne
 8006648:	b236      	sxthne	r6, r6
 800664a:	e7ef      	b.n	800662c <_printf_i+0xbc>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	6820      	ldr	r0, [r4, #0]
 8006650:	1d19      	adds	r1, r3, #4
 8006652:	6029      	str	r1, [r5, #0]
 8006654:	0601      	lsls	r1, r0, #24
 8006656:	d501      	bpl.n	800665c <_printf_i+0xec>
 8006658:	681e      	ldr	r6, [r3, #0]
 800665a:	e002      	b.n	8006662 <_printf_i+0xf2>
 800665c:	0646      	lsls	r6, r0, #25
 800665e:	d5fb      	bpl.n	8006658 <_printf_i+0xe8>
 8006660:	881e      	ldrh	r6, [r3, #0]
 8006662:	4854      	ldr	r0, [pc, #336]	; (80067b4 <_printf_i+0x244>)
 8006664:	2f6f      	cmp	r7, #111	; 0x6f
 8006666:	bf0c      	ite	eq
 8006668:	2308      	moveq	r3, #8
 800666a:	230a      	movne	r3, #10
 800666c:	2100      	movs	r1, #0
 800666e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006672:	6865      	ldr	r5, [r4, #4]
 8006674:	60a5      	str	r5, [r4, #8]
 8006676:	2d00      	cmp	r5, #0
 8006678:	bfa2      	ittt	ge
 800667a:	6821      	ldrge	r1, [r4, #0]
 800667c:	f021 0104 	bicge.w	r1, r1, #4
 8006680:	6021      	strge	r1, [r4, #0]
 8006682:	b90e      	cbnz	r6, 8006688 <_printf_i+0x118>
 8006684:	2d00      	cmp	r5, #0
 8006686:	d04d      	beq.n	8006724 <_printf_i+0x1b4>
 8006688:	4615      	mov	r5, r2
 800668a:	fbb6 f1f3 	udiv	r1, r6, r3
 800668e:	fb03 6711 	mls	r7, r3, r1, r6
 8006692:	5dc7      	ldrb	r7, [r0, r7]
 8006694:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006698:	4637      	mov	r7, r6
 800669a:	42bb      	cmp	r3, r7
 800669c:	460e      	mov	r6, r1
 800669e:	d9f4      	bls.n	800668a <_printf_i+0x11a>
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d10b      	bne.n	80066bc <_printf_i+0x14c>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	07de      	lsls	r6, r3, #31
 80066a8:	d508      	bpl.n	80066bc <_printf_i+0x14c>
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	6861      	ldr	r1, [r4, #4]
 80066ae:	4299      	cmp	r1, r3
 80066b0:	bfde      	ittt	le
 80066b2:	2330      	movle	r3, #48	; 0x30
 80066b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80066bc:	1b52      	subs	r2, r2, r5
 80066be:	6122      	str	r2, [r4, #16]
 80066c0:	f8cd a000 	str.w	sl, [sp]
 80066c4:	464b      	mov	r3, r9
 80066c6:	aa03      	add	r2, sp, #12
 80066c8:	4621      	mov	r1, r4
 80066ca:	4640      	mov	r0, r8
 80066cc:	f7ff fee2 	bl	8006494 <_printf_common>
 80066d0:	3001      	adds	r0, #1
 80066d2:	d14c      	bne.n	800676e <_printf_i+0x1fe>
 80066d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066d8:	b004      	add	sp, #16
 80066da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066de:	4835      	ldr	r0, [pc, #212]	; (80067b4 <_printf_i+0x244>)
 80066e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066e4:	6829      	ldr	r1, [r5, #0]
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80066ec:	6029      	str	r1, [r5, #0]
 80066ee:	061d      	lsls	r5, r3, #24
 80066f0:	d514      	bpl.n	800671c <_printf_i+0x1ac>
 80066f2:	07df      	lsls	r7, r3, #31
 80066f4:	bf44      	itt	mi
 80066f6:	f043 0320 	orrmi.w	r3, r3, #32
 80066fa:	6023      	strmi	r3, [r4, #0]
 80066fc:	b91e      	cbnz	r6, 8006706 <_printf_i+0x196>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	f023 0320 	bic.w	r3, r3, #32
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	2310      	movs	r3, #16
 8006708:	e7b0      	b.n	800666c <_printf_i+0xfc>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	f043 0320 	orr.w	r3, r3, #32
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	2378      	movs	r3, #120	; 0x78
 8006714:	4828      	ldr	r0, [pc, #160]	; (80067b8 <_printf_i+0x248>)
 8006716:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800671a:	e7e3      	b.n	80066e4 <_printf_i+0x174>
 800671c:	0659      	lsls	r1, r3, #25
 800671e:	bf48      	it	mi
 8006720:	b2b6      	uxthmi	r6, r6
 8006722:	e7e6      	b.n	80066f2 <_printf_i+0x182>
 8006724:	4615      	mov	r5, r2
 8006726:	e7bb      	b.n	80066a0 <_printf_i+0x130>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	6826      	ldr	r6, [r4, #0]
 800672c:	6961      	ldr	r1, [r4, #20]
 800672e:	1d18      	adds	r0, r3, #4
 8006730:	6028      	str	r0, [r5, #0]
 8006732:	0635      	lsls	r5, r6, #24
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	d501      	bpl.n	800673c <_printf_i+0x1cc>
 8006738:	6019      	str	r1, [r3, #0]
 800673a:	e002      	b.n	8006742 <_printf_i+0x1d2>
 800673c:	0670      	lsls	r0, r6, #25
 800673e:	d5fb      	bpl.n	8006738 <_printf_i+0x1c8>
 8006740:	8019      	strh	r1, [r3, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	6123      	str	r3, [r4, #16]
 8006746:	4615      	mov	r5, r2
 8006748:	e7ba      	b.n	80066c0 <_printf_i+0x150>
 800674a:	682b      	ldr	r3, [r5, #0]
 800674c:	1d1a      	adds	r2, r3, #4
 800674e:	602a      	str	r2, [r5, #0]
 8006750:	681d      	ldr	r5, [r3, #0]
 8006752:	6862      	ldr	r2, [r4, #4]
 8006754:	2100      	movs	r1, #0
 8006756:	4628      	mov	r0, r5
 8006758:	f7f9 fd62 	bl	8000220 <memchr>
 800675c:	b108      	cbz	r0, 8006762 <_printf_i+0x1f2>
 800675e:	1b40      	subs	r0, r0, r5
 8006760:	6060      	str	r0, [r4, #4]
 8006762:	6863      	ldr	r3, [r4, #4]
 8006764:	6123      	str	r3, [r4, #16]
 8006766:	2300      	movs	r3, #0
 8006768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800676c:	e7a8      	b.n	80066c0 <_printf_i+0x150>
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	462a      	mov	r2, r5
 8006772:	4649      	mov	r1, r9
 8006774:	4640      	mov	r0, r8
 8006776:	47d0      	blx	sl
 8006778:	3001      	adds	r0, #1
 800677a:	d0ab      	beq.n	80066d4 <_printf_i+0x164>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	079b      	lsls	r3, r3, #30
 8006780:	d413      	bmi.n	80067aa <_printf_i+0x23a>
 8006782:	68e0      	ldr	r0, [r4, #12]
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	4298      	cmp	r0, r3
 8006788:	bfb8      	it	lt
 800678a:	4618      	movlt	r0, r3
 800678c:	e7a4      	b.n	80066d8 <_printf_i+0x168>
 800678e:	2301      	movs	r3, #1
 8006790:	4632      	mov	r2, r6
 8006792:	4649      	mov	r1, r9
 8006794:	4640      	mov	r0, r8
 8006796:	47d0      	blx	sl
 8006798:	3001      	adds	r0, #1
 800679a:	d09b      	beq.n	80066d4 <_printf_i+0x164>
 800679c:	3501      	adds	r5, #1
 800679e:	68e3      	ldr	r3, [r4, #12]
 80067a0:	9903      	ldr	r1, [sp, #12]
 80067a2:	1a5b      	subs	r3, r3, r1
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	dcf2      	bgt.n	800678e <_printf_i+0x21e>
 80067a8:	e7eb      	b.n	8006782 <_printf_i+0x212>
 80067aa:	2500      	movs	r5, #0
 80067ac:	f104 0619 	add.w	r6, r4, #25
 80067b0:	e7f5      	b.n	800679e <_printf_i+0x22e>
 80067b2:	bf00      	nop
 80067b4:	08008906 	.word	0x08008906
 80067b8:	08008917 	.word	0x08008917

080067bc <cleanup_glue>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	460c      	mov	r4, r1
 80067c0:	6809      	ldr	r1, [r1, #0]
 80067c2:	4605      	mov	r5, r0
 80067c4:	b109      	cbz	r1, 80067ca <cleanup_glue+0xe>
 80067c6:	f7ff fff9 	bl	80067bc <cleanup_glue>
 80067ca:	4621      	mov	r1, r4
 80067cc:	4628      	mov	r0, r5
 80067ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067d2:	f001 bbd5 	b.w	8007f80 <_free_r>
	...

080067d8 <_reclaim_reent>:
 80067d8:	4b2c      	ldr	r3, [pc, #176]	; (800688c <_reclaim_reent+0xb4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4283      	cmp	r3, r0
 80067de:	b570      	push	{r4, r5, r6, lr}
 80067e0:	4604      	mov	r4, r0
 80067e2:	d051      	beq.n	8006888 <_reclaim_reent+0xb0>
 80067e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80067e6:	b143      	cbz	r3, 80067fa <_reclaim_reent+0x22>
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d14a      	bne.n	8006884 <_reclaim_reent+0xac>
 80067ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067f0:	6819      	ldr	r1, [r3, #0]
 80067f2:	b111      	cbz	r1, 80067fa <_reclaim_reent+0x22>
 80067f4:	4620      	mov	r0, r4
 80067f6:	f001 fbc3 	bl	8007f80 <_free_r>
 80067fa:	6961      	ldr	r1, [r4, #20]
 80067fc:	b111      	cbz	r1, 8006804 <_reclaim_reent+0x2c>
 80067fe:	4620      	mov	r0, r4
 8006800:	f001 fbbe 	bl	8007f80 <_free_r>
 8006804:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006806:	b111      	cbz	r1, 800680e <_reclaim_reent+0x36>
 8006808:	4620      	mov	r0, r4
 800680a:	f001 fbb9 	bl	8007f80 <_free_r>
 800680e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006810:	b111      	cbz	r1, 8006818 <_reclaim_reent+0x40>
 8006812:	4620      	mov	r0, r4
 8006814:	f001 fbb4 	bl	8007f80 <_free_r>
 8006818:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800681a:	b111      	cbz	r1, 8006822 <_reclaim_reent+0x4a>
 800681c:	4620      	mov	r0, r4
 800681e:	f001 fbaf 	bl	8007f80 <_free_r>
 8006822:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006824:	b111      	cbz	r1, 800682c <_reclaim_reent+0x54>
 8006826:	4620      	mov	r0, r4
 8006828:	f001 fbaa 	bl	8007f80 <_free_r>
 800682c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800682e:	b111      	cbz	r1, 8006836 <_reclaim_reent+0x5e>
 8006830:	4620      	mov	r0, r4
 8006832:	f001 fba5 	bl	8007f80 <_free_r>
 8006836:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006838:	b111      	cbz	r1, 8006840 <_reclaim_reent+0x68>
 800683a:	4620      	mov	r0, r4
 800683c:	f001 fba0 	bl	8007f80 <_free_r>
 8006840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006842:	b111      	cbz	r1, 800684a <_reclaim_reent+0x72>
 8006844:	4620      	mov	r0, r4
 8006846:	f001 fb9b 	bl	8007f80 <_free_r>
 800684a:	69a3      	ldr	r3, [r4, #24]
 800684c:	b1e3      	cbz	r3, 8006888 <_reclaim_reent+0xb0>
 800684e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006850:	4620      	mov	r0, r4
 8006852:	4798      	blx	r3
 8006854:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006856:	b1b9      	cbz	r1, 8006888 <_reclaim_reent+0xb0>
 8006858:	4620      	mov	r0, r4
 800685a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800685e:	f7ff bfad 	b.w	80067bc <cleanup_glue>
 8006862:	5949      	ldr	r1, [r1, r5]
 8006864:	b941      	cbnz	r1, 8006878 <_reclaim_reent+0xa0>
 8006866:	3504      	adds	r5, #4
 8006868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800686a:	2d80      	cmp	r5, #128	; 0x80
 800686c:	68d9      	ldr	r1, [r3, #12]
 800686e:	d1f8      	bne.n	8006862 <_reclaim_reent+0x8a>
 8006870:	4620      	mov	r0, r4
 8006872:	f001 fb85 	bl	8007f80 <_free_r>
 8006876:	e7ba      	b.n	80067ee <_reclaim_reent+0x16>
 8006878:	680e      	ldr	r6, [r1, #0]
 800687a:	4620      	mov	r0, r4
 800687c:	f001 fb80 	bl	8007f80 <_free_r>
 8006880:	4631      	mov	r1, r6
 8006882:	e7ef      	b.n	8006864 <_reclaim_reent+0x8c>
 8006884:	2500      	movs	r5, #0
 8006886:	e7ef      	b.n	8006868 <_reclaim_reent+0x90>
 8006888:	bd70      	pop	{r4, r5, r6, pc}
 800688a:	bf00      	nop
 800688c:	20000014 	.word	0x20000014

08006890 <_sbrk_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4d06      	ldr	r5, [pc, #24]	; (80068ac <_sbrk_r+0x1c>)
 8006894:	2300      	movs	r3, #0
 8006896:	4604      	mov	r4, r0
 8006898:	4608      	mov	r0, r1
 800689a:	602b      	str	r3, [r5, #0]
 800689c:	f7fa ff60 	bl	8001760 <_sbrk>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_sbrk_r+0x1a>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_sbrk_r+0x1a>
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	200042bc 	.word	0x200042bc

080068b0 <__sread>:
 80068b0:	b510      	push	{r4, lr}
 80068b2:	460c      	mov	r4, r1
 80068b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b8:	f001 fbae 	bl	8008018 <_read_r>
 80068bc:	2800      	cmp	r0, #0
 80068be:	bfab      	itete	ge
 80068c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068c2:	89a3      	ldrhlt	r3, [r4, #12]
 80068c4:	181b      	addge	r3, r3, r0
 80068c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068ca:	bfac      	ite	ge
 80068cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80068ce:	81a3      	strhlt	r3, [r4, #12]
 80068d0:	bd10      	pop	{r4, pc}

080068d2 <__swrite>:
 80068d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d6:	461f      	mov	r7, r3
 80068d8:	898b      	ldrh	r3, [r1, #12]
 80068da:	05db      	lsls	r3, r3, #23
 80068dc:	4605      	mov	r5, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	4616      	mov	r6, r2
 80068e2:	d505      	bpl.n	80068f0 <__swrite+0x1e>
 80068e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068e8:	2302      	movs	r3, #2
 80068ea:	2200      	movs	r2, #0
 80068ec:	f000 ff88 	bl	8007800 <_lseek_r>
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068fa:	81a3      	strh	r3, [r4, #12]
 80068fc:	4632      	mov	r2, r6
 80068fe:	463b      	mov	r3, r7
 8006900:	4628      	mov	r0, r5
 8006902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006906:	f000 b817 	b.w	8006938 <_write_r>

0800690a <__sseek>:
 800690a:	b510      	push	{r4, lr}
 800690c:	460c      	mov	r4, r1
 800690e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006912:	f000 ff75 	bl	8007800 <_lseek_r>
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	bf15      	itete	ne
 800691c:	6560      	strne	r0, [r4, #84]	; 0x54
 800691e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006926:	81a3      	strheq	r3, [r4, #12]
 8006928:	bf18      	it	ne
 800692a:	81a3      	strhne	r3, [r4, #12]
 800692c:	bd10      	pop	{r4, pc}

0800692e <__sclose>:
 800692e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006932:	f000 b813 	b.w	800695c <_close_r>
	...

08006938 <_write_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d07      	ldr	r5, [pc, #28]	; (8006958 <_write_r+0x20>)
 800693c:	4604      	mov	r4, r0
 800693e:	4608      	mov	r0, r1
 8006940:	4611      	mov	r1, r2
 8006942:	2200      	movs	r2, #0
 8006944:	602a      	str	r2, [r5, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	f7fa feb9 	bl	80016be <_write>
 800694c:	1c43      	adds	r3, r0, #1
 800694e:	d102      	bne.n	8006956 <_write_r+0x1e>
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	b103      	cbz	r3, 8006956 <_write_r+0x1e>
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	bd38      	pop	{r3, r4, r5, pc}
 8006958:	200042bc 	.word	0x200042bc

0800695c <_close_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d06      	ldr	r5, [pc, #24]	; (8006978 <_close_r+0x1c>)
 8006960:	2300      	movs	r3, #0
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	f7fa fec5 	bl	80016f6 <_close>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_close_r+0x1a>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_close_r+0x1a>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	200042bc 	.word	0x200042bc

0800697c <quorem>:
 800697c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006980:	6903      	ldr	r3, [r0, #16]
 8006982:	690c      	ldr	r4, [r1, #16]
 8006984:	42a3      	cmp	r3, r4
 8006986:	4607      	mov	r7, r0
 8006988:	f2c0 8081 	blt.w	8006a8e <quorem+0x112>
 800698c:	3c01      	subs	r4, #1
 800698e:	f101 0814 	add.w	r8, r1, #20
 8006992:	f100 0514 	add.w	r5, r0, #20
 8006996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80069a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069a4:	3301      	adds	r3, #1
 80069a6:	429a      	cmp	r2, r3
 80069a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80069ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80069b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80069b4:	d331      	bcc.n	8006a1a <quorem+0x9e>
 80069b6:	f04f 0e00 	mov.w	lr, #0
 80069ba:	4640      	mov	r0, r8
 80069bc:	46ac      	mov	ip, r5
 80069be:	46f2      	mov	sl, lr
 80069c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80069c4:	b293      	uxth	r3, r2
 80069c6:	fb06 e303 	mla	r3, r6, r3, lr
 80069ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	ebaa 0303 	sub.w	r3, sl, r3
 80069d4:	f8dc a000 	ldr.w	sl, [ip]
 80069d8:	0c12      	lsrs	r2, r2, #16
 80069da:	fa13 f38a 	uxtah	r3, r3, sl
 80069de:	fb06 e202 	mla	r2, r6, r2, lr
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	9b00      	ldr	r3, [sp, #0]
 80069e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80069ea:	b292      	uxth	r2, r2
 80069ec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80069f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069f4:	f8bd 3000 	ldrh.w	r3, [sp]
 80069f8:	4581      	cmp	r9, r0
 80069fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069fe:	f84c 3b04 	str.w	r3, [ip], #4
 8006a02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a06:	d2db      	bcs.n	80069c0 <quorem+0x44>
 8006a08:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a0c:	b92b      	cbnz	r3, 8006a1a <quorem+0x9e>
 8006a0e:	9b01      	ldr	r3, [sp, #4]
 8006a10:	3b04      	subs	r3, #4
 8006a12:	429d      	cmp	r5, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	d32e      	bcc.n	8006a76 <quorem+0xfa>
 8006a18:	613c      	str	r4, [r7, #16]
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	f001 f998 	bl	8007d50 <__mcmp>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	db24      	blt.n	8006a6e <quorem+0xf2>
 8006a24:	3601      	adds	r6, #1
 8006a26:	4628      	mov	r0, r5
 8006a28:	f04f 0c00 	mov.w	ip, #0
 8006a2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a30:	f8d0 e000 	ldr.w	lr, [r0]
 8006a34:	b293      	uxth	r3, r2
 8006a36:	ebac 0303 	sub.w	r3, ip, r3
 8006a3a:	0c12      	lsrs	r2, r2, #16
 8006a3c:	fa13 f38e 	uxtah	r3, r3, lr
 8006a40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a4e:	45c1      	cmp	r9, r8
 8006a50:	f840 3b04 	str.w	r3, [r0], #4
 8006a54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a58:	d2e8      	bcs.n	8006a2c <quorem+0xb0>
 8006a5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a62:	b922      	cbnz	r2, 8006a6e <quorem+0xf2>
 8006a64:	3b04      	subs	r3, #4
 8006a66:	429d      	cmp	r5, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	d30a      	bcc.n	8006a82 <quorem+0x106>
 8006a6c:	613c      	str	r4, [r7, #16]
 8006a6e:	4630      	mov	r0, r6
 8006a70:	b003      	add	sp, #12
 8006a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	3b04      	subs	r3, #4
 8006a7a:	2a00      	cmp	r2, #0
 8006a7c:	d1cc      	bne.n	8006a18 <quorem+0x9c>
 8006a7e:	3c01      	subs	r4, #1
 8006a80:	e7c7      	b.n	8006a12 <quorem+0x96>
 8006a82:	6812      	ldr	r2, [r2, #0]
 8006a84:	3b04      	subs	r3, #4
 8006a86:	2a00      	cmp	r2, #0
 8006a88:	d1f0      	bne.n	8006a6c <quorem+0xf0>
 8006a8a:	3c01      	subs	r4, #1
 8006a8c:	e7eb      	b.n	8006a66 <quorem+0xea>
 8006a8e:	2000      	movs	r0, #0
 8006a90:	e7ee      	b.n	8006a70 <quorem+0xf4>
 8006a92:	0000      	movs	r0, r0
 8006a94:	0000      	movs	r0, r0
	...

08006a98 <_dtoa_r>:
 8006a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	ed2d 8b04 	vpush	{d8-d9}
 8006aa0:	ec57 6b10 	vmov	r6, r7, d0
 8006aa4:	b093      	sub	sp, #76	; 0x4c
 8006aa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006aa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006aac:	9106      	str	r1, [sp, #24]
 8006aae:	ee10 aa10 	vmov	sl, s0
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ab6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ab8:	46bb      	mov	fp, r7
 8006aba:	b975      	cbnz	r5, 8006ada <_dtoa_r+0x42>
 8006abc:	2010      	movs	r0, #16
 8006abe:	f000 feb1 	bl	8007824 <malloc>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6260      	str	r0, [r4, #36]	; 0x24
 8006ac6:	b920      	cbnz	r0, 8006ad2 <_dtoa_r+0x3a>
 8006ac8:	4ba7      	ldr	r3, [pc, #668]	; (8006d68 <_dtoa_r+0x2d0>)
 8006aca:	21ea      	movs	r1, #234	; 0xea
 8006acc:	48a7      	ldr	r0, [pc, #668]	; (8006d6c <_dtoa_r+0x2d4>)
 8006ace:	f001 fab5 	bl	800803c <__assert_func>
 8006ad2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ad6:	6005      	str	r5, [r0, #0]
 8006ad8:	60c5      	str	r5, [r0, #12]
 8006ada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006adc:	6819      	ldr	r1, [r3, #0]
 8006ade:	b151      	cbz	r1, 8006af6 <_dtoa_r+0x5e>
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	604a      	str	r2, [r1, #4]
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	4093      	lsls	r3, r2
 8006ae8:	608b      	str	r3, [r1, #8]
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 feee 	bl	80078cc <_Bfree>
 8006af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	1e3b      	subs	r3, r7, #0
 8006af8:	bfaa      	itet	ge
 8006afa:	2300      	movge	r3, #0
 8006afc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006b00:	f8c8 3000 	strge.w	r3, [r8]
 8006b04:	4b9a      	ldr	r3, [pc, #616]	; (8006d70 <_dtoa_r+0x2d8>)
 8006b06:	bfbc      	itt	lt
 8006b08:	2201      	movlt	r2, #1
 8006b0a:	f8c8 2000 	strlt.w	r2, [r8]
 8006b0e:	ea33 030b 	bics.w	r3, r3, fp
 8006b12:	d11b      	bne.n	8006b4c <_dtoa_r+0xb4>
 8006b14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b16:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b20:	4333      	orrs	r3, r6
 8006b22:	f000 8592 	beq.w	800764a <_dtoa_r+0xbb2>
 8006b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b28:	b963      	cbnz	r3, 8006b44 <_dtoa_r+0xac>
 8006b2a:	4b92      	ldr	r3, [pc, #584]	; (8006d74 <_dtoa_r+0x2dc>)
 8006b2c:	e022      	b.n	8006b74 <_dtoa_r+0xdc>
 8006b2e:	4b92      	ldr	r3, [pc, #584]	; (8006d78 <_dtoa_r+0x2e0>)
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	3308      	adds	r3, #8
 8006b34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	9801      	ldr	r0, [sp, #4]
 8006b3a:	b013      	add	sp, #76	; 0x4c
 8006b3c:	ecbd 8b04 	vpop	{d8-d9}
 8006b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b44:	4b8b      	ldr	r3, [pc, #556]	; (8006d74 <_dtoa_r+0x2dc>)
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	3303      	adds	r3, #3
 8006b4a:	e7f3      	b.n	8006b34 <_dtoa_r+0x9c>
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2300      	movs	r3, #0
 8006b50:	4650      	mov	r0, sl
 8006b52:	4659      	mov	r1, fp
 8006b54:	f7f9 ffd8 	bl	8000b08 <__aeabi_dcmpeq>
 8006b58:	ec4b ab19 	vmov	d9, sl, fp
 8006b5c:	4680      	mov	r8, r0
 8006b5e:	b158      	cbz	r0, 8006b78 <_dtoa_r+0xe0>
 8006b60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b62:	2301      	movs	r3, #1
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 856b 	beq.w	8007644 <_dtoa_r+0xbac>
 8006b6e:	4883      	ldr	r0, [pc, #524]	; (8006d7c <_dtoa_r+0x2e4>)
 8006b70:	6018      	str	r0, [r3, #0]
 8006b72:	1e43      	subs	r3, r0, #1
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	e7df      	b.n	8006b38 <_dtoa_r+0xa0>
 8006b78:	ec4b ab10 	vmov	d0, sl, fp
 8006b7c:	aa10      	add	r2, sp, #64	; 0x40
 8006b7e:	a911      	add	r1, sp, #68	; 0x44
 8006b80:	4620      	mov	r0, r4
 8006b82:	f001 f98b 	bl	8007e9c <__d2b>
 8006b86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006b8a:	ee08 0a10 	vmov	s16, r0
 8006b8e:	2d00      	cmp	r5, #0
 8006b90:	f000 8084 	beq.w	8006c9c <_dtoa_r+0x204>
 8006b94:	ee19 3a90 	vmov	r3, s19
 8006b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006ba0:	4656      	mov	r6, sl
 8006ba2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006ba6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006baa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006bae:	4b74      	ldr	r3, [pc, #464]	; (8006d80 <_dtoa_r+0x2e8>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	f7f9 fb87 	bl	80002c8 <__aeabi_dsub>
 8006bba:	a365      	add	r3, pc, #404	; (adr r3, 8006d50 <_dtoa_r+0x2b8>)
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	f7f9 fd3a 	bl	8000638 <__aeabi_dmul>
 8006bc4:	a364      	add	r3, pc, #400	; (adr r3, 8006d58 <_dtoa_r+0x2c0>)
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f7f9 fb7f 	bl	80002cc <__adddf3>
 8006bce:	4606      	mov	r6, r0
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	460f      	mov	r7, r1
 8006bd4:	f7f9 fcc6 	bl	8000564 <__aeabi_i2d>
 8006bd8:	a361      	add	r3, pc, #388	; (adr r3, 8006d60 <_dtoa_r+0x2c8>)
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f7f9 fd2b 	bl	8000638 <__aeabi_dmul>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	4630      	mov	r0, r6
 8006be8:	4639      	mov	r1, r7
 8006bea:	f7f9 fb6f 	bl	80002cc <__adddf3>
 8006bee:	4606      	mov	r6, r0
 8006bf0:	460f      	mov	r7, r1
 8006bf2:	f7f9 ffd1 	bl	8000b98 <__aeabi_d2iz>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	9000      	str	r0, [sp, #0]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	4639      	mov	r1, r7
 8006c00:	f7f9 ff8c 	bl	8000b1c <__aeabi_dcmplt>
 8006c04:	b150      	cbz	r0, 8006c1c <_dtoa_r+0x184>
 8006c06:	9800      	ldr	r0, [sp, #0]
 8006c08:	f7f9 fcac 	bl	8000564 <__aeabi_i2d>
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	463b      	mov	r3, r7
 8006c10:	f7f9 ff7a 	bl	8000b08 <__aeabi_dcmpeq>
 8006c14:	b910      	cbnz	r0, 8006c1c <_dtoa_r+0x184>
 8006c16:	9b00      	ldr	r3, [sp, #0]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	9b00      	ldr	r3, [sp, #0]
 8006c1e:	2b16      	cmp	r3, #22
 8006c20:	d85a      	bhi.n	8006cd8 <_dtoa_r+0x240>
 8006c22:	9a00      	ldr	r2, [sp, #0]
 8006c24:	4b57      	ldr	r3, [pc, #348]	; (8006d84 <_dtoa_r+0x2ec>)
 8006c26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	ec51 0b19 	vmov	r0, r1, d9
 8006c32:	f7f9 ff73 	bl	8000b1c <__aeabi_dcmplt>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d050      	beq.n	8006cdc <_dtoa_r+0x244>
 8006c3a:	9b00      	ldr	r3, [sp, #0]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	2300      	movs	r3, #0
 8006c42:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c46:	1b5d      	subs	r5, r3, r5
 8006c48:	1e6b      	subs	r3, r5, #1
 8006c4a:	9305      	str	r3, [sp, #20]
 8006c4c:	bf45      	ittet	mi
 8006c4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c52:	9304      	strmi	r3, [sp, #16]
 8006c54:	2300      	movpl	r3, #0
 8006c56:	2300      	movmi	r3, #0
 8006c58:	bf4c      	ite	mi
 8006c5a:	9305      	strmi	r3, [sp, #20]
 8006c5c:	9304      	strpl	r3, [sp, #16]
 8006c5e:	9b00      	ldr	r3, [sp, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	db3d      	blt.n	8006ce0 <_dtoa_r+0x248>
 8006c64:	9b05      	ldr	r3, [sp, #20]
 8006c66:	9a00      	ldr	r2, [sp, #0]
 8006c68:	920a      	str	r2, [sp, #40]	; 0x28
 8006c6a:	4413      	add	r3, r2
 8006c6c:	9305      	str	r3, [sp, #20]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9307      	str	r3, [sp, #28]
 8006c72:	9b06      	ldr	r3, [sp, #24]
 8006c74:	2b09      	cmp	r3, #9
 8006c76:	f200 8089 	bhi.w	8006d8c <_dtoa_r+0x2f4>
 8006c7a:	2b05      	cmp	r3, #5
 8006c7c:	bfc4      	itt	gt
 8006c7e:	3b04      	subgt	r3, #4
 8006c80:	9306      	strgt	r3, [sp, #24]
 8006c82:	9b06      	ldr	r3, [sp, #24]
 8006c84:	f1a3 0302 	sub.w	r3, r3, #2
 8006c88:	bfcc      	ite	gt
 8006c8a:	2500      	movgt	r5, #0
 8006c8c:	2501      	movle	r5, #1
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	f200 8087 	bhi.w	8006da2 <_dtoa_r+0x30a>
 8006c94:	e8df f003 	tbb	[pc, r3]
 8006c98:	59383a2d 	.word	0x59383a2d
 8006c9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ca0:	441d      	add	r5, r3
 8006ca2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	bfc1      	itttt	gt
 8006caa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006cae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006cb2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006cb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006cba:	bfda      	itte	le
 8006cbc:	f1c3 0320 	rsble	r3, r3, #32
 8006cc0:	fa06 f003 	lslle.w	r0, r6, r3
 8006cc4:	4318      	orrgt	r0, r3
 8006cc6:	f7f9 fc3d 	bl	8000544 <__aeabi_ui2d>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4606      	mov	r6, r0
 8006cce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006cd2:	3d01      	subs	r5, #1
 8006cd4:	930e      	str	r3, [sp, #56]	; 0x38
 8006cd6:	e76a      	b.n	8006bae <_dtoa_r+0x116>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e7b2      	b.n	8006c42 <_dtoa_r+0x1aa>
 8006cdc:	900b      	str	r0, [sp, #44]	; 0x2c
 8006cde:	e7b1      	b.n	8006c44 <_dtoa_r+0x1ac>
 8006ce0:	9b04      	ldr	r3, [sp, #16]
 8006ce2:	9a00      	ldr	r2, [sp, #0]
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	9304      	str	r3, [sp, #16]
 8006ce8:	4253      	negs	r3, r2
 8006cea:	9307      	str	r3, [sp, #28]
 8006cec:	2300      	movs	r3, #0
 8006cee:	930a      	str	r3, [sp, #40]	; 0x28
 8006cf0:	e7bf      	b.n	8006c72 <_dtoa_r+0x1da>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9308      	str	r3, [sp, #32]
 8006cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	dc55      	bgt.n	8006da8 <_dtoa_r+0x310>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d02:	461a      	mov	r2, r3
 8006d04:	9209      	str	r2, [sp, #36]	; 0x24
 8006d06:	e00c      	b.n	8006d22 <_dtoa_r+0x28a>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e7f3      	b.n	8006cf4 <_dtoa_r+0x25c>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d10:	9308      	str	r3, [sp, #32]
 8006d12:	9b00      	ldr	r3, [sp, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	9302      	str	r3, [sp, #8]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	9303      	str	r3, [sp, #12]
 8006d1e:	bfb8      	it	lt
 8006d20:	2301      	movlt	r3, #1
 8006d22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d24:	2200      	movs	r2, #0
 8006d26:	6042      	str	r2, [r0, #4]
 8006d28:	2204      	movs	r2, #4
 8006d2a:	f102 0614 	add.w	r6, r2, #20
 8006d2e:	429e      	cmp	r6, r3
 8006d30:	6841      	ldr	r1, [r0, #4]
 8006d32:	d93d      	bls.n	8006db0 <_dtoa_r+0x318>
 8006d34:	4620      	mov	r0, r4
 8006d36:	f000 fd89 	bl	800784c <_Balloc>
 8006d3a:	9001      	str	r0, [sp, #4]
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d13b      	bne.n	8006db8 <_dtoa_r+0x320>
 8006d40:	4b11      	ldr	r3, [pc, #68]	; (8006d88 <_dtoa_r+0x2f0>)
 8006d42:	4602      	mov	r2, r0
 8006d44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d48:	e6c0      	b.n	8006acc <_dtoa_r+0x34>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e7df      	b.n	8006d0e <_dtoa_r+0x276>
 8006d4e:	bf00      	nop
 8006d50:	636f4361 	.word	0x636f4361
 8006d54:	3fd287a7 	.word	0x3fd287a7
 8006d58:	8b60c8b3 	.word	0x8b60c8b3
 8006d5c:	3fc68a28 	.word	0x3fc68a28
 8006d60:	509f79fb 	.word	0x509f79fb
 8006d64:	3fd34413 	.word	0x3fd34413
 8006d68:	08008935 	.word	0x08008935
 8006d6c:	0800894c 	.word	0x0800894c
 8006d70:	7ff00000 	.word	0x7ff00000
 8006d74:	08008931 	.word	0x08008931
 8006d78:	08008928 	.word	0x08008928
 8006d7c:	08008905 	.word	0x08008905
 8006d80:	3ff80000 	.word	0x3ff80000
 8006d84:	08008a40 	.word	0x08008a40
 8006d88:	080089a7 	.word	0x080089a7
 8006d8c:	2501      	movs	r5, #1
 8006d8e:	2300      	movs	r3, #0
 8006d90:	9306      	str	r3, [sp, #24]
 8006d92:	9508      	str	r5, [sp, #32]
 8006d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2312      	movs	r3, #18
 8006da0:	e7b0      	b.n	8006d04 <_dtoa_r+0x26c>
 8006da2:	2301      	movs	r3, #1
 8006da4:	9308      	str	r3, [sp, #32]
 8006da6:	e7f5      	b.n	8006d94 <_dtoa_r+0x2fc>
 8006da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006daa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dae:	e7b8      	b.n	8006d22 <_dtoa_r+0x28a>
 8006db0:	3101      	adds	r1, #1
 8006db2:	6041      	str	r1, [r0, #4]
 8006db4:	0052      	lsls	r2, r2, #1
 8006db6:	e7b8      	b.n	8006d2a <_dtoa_r+0x292>
 8006db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dba:	9a01      	ldr	r2, [sp, #4]
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	2b0e      	cmp	r3, #14
 8006dc2:	f200 809d 	bhi.w	8006f00 <_dtoa_r+0x468>
 8006dc6:	2d00      	cmp	r5, #0
 8006dc8:	f000 809a 	beq.w	8006f00 <_dtoa_r+0x468>
 8006dcc:	9b00      	ldr	r3, [sp, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dd32      	ble.n	8006e38 <_dtoa_r+0x3a0>
 8006dd2:	4ab7      	ldr	r2, [pc, #732]	; (80070b0 <_dtoa_r+0x618>)
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ddc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006de0:	9b00      	ldr	r3, [sp, #0]
 8006de2:	05d8      	lsls	r0, r3, #23
 8006de4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006de8:	d516      	bpl.n	8006e18 <_dtoa_r+0x380>
 8006dea:	4bb2      	ldr	r3, [pc, #712]	; (80070b4 <_dtoa_r+0x61c>)
 8006dec:	ec51 0b19 	vmov	r0, r1, d9
 8006df0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006df4:	f7f9 fd4a 	bl	800088c <__aeabi_ddiv>
 8006df8:	f007 070f 	and.w	r7, r7, #15
 8006dfc:	4682      	mov	sl, r0
 8006dfe:	468b      	mov	fp, r1
 8006e00:	2503      	movs	r5, #3
 8006e02:	4eac      	ldr	r6, [pc, #688]	; (80070b4 <_dtoa_r+0x61c>)
 8006e04:	b957      	cbnz	r7, 8006e1c <_dtoa_r+0x384>
 8006e06:	4642      	mov	r2, r8
 8006e08:	464b      	mov	r3, r9
 8006e0a:	4650      	mov	r0, sl
 8006e0c:	4659      	mov	r1, fp
 8006e0e:	f7f9 fd3d 	bl	800088c <__aeabi_ddiv>
 8006e12:	4682      	mov	sl, r0
 8006e14:	468b      	mov	fp, r1
 8006e16:	e028      	b.n	8006e6a <_dtoa_r+0x3d2>
 8006e18:	2502      	movs	r5, #2
 8006e1a:	e7f2      	b.n	8006e02 <_dtoa_r+0x36a>
 8006e1c:	07f9      	lsls	r1, r7, #31
 8006e1e:	d508      	bpl.n	8006e32 <_dtoa_r+0x39a>
 8006e20:	4640      	mov	r0, r8
 8006e22:	4649      	mov	r1, r9
 8006e24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e28:	f7f9 fc06 	bl	8000638 <__aeabi_dmul>
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	4680      	mov	r8, r0
 8006e30:	4689      	mov	r9, r1
 8006e32:	107f      	asrs	r7, r7, #1
 8006e34:	3608      	adds	r6, #8
 8006e36:	e7e5      	b.n	8006e04 <_dtoa_r+0x36c>
 8006e38:	f000 809b 	beq.w	8006f72 <_dtoa_r+0x4da>
 8006e3c:	9b00      	ldr	r3, [sp, #0]
 8006e3e:	4f9d      	ldr	r7, [pc, #628]	; (80070b4 <_dtoa_r+0x61c>)
 8006e40:	425e      	negs	r6, r3
 8006e42:	4b9b      	ldr	r3, [pc, #620]	; (80070b0 <_dtoa_r+0x618>)
 8006e44:	f006 020f 	and.w	r2, r6, #15
 8006e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	ec51 0b19 	vmov	r0, r1, d9
 8006e54:	f7f9 fbf0 	bl	8000638 <__aeabi_dmul>
 8006e58:	1136      	asrs	r6, r6, #4
 8006e5a:	4682      	mov	sl, r0
 8006e5c:	468b      	mov	fp, r1
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2502      	movs	r5, #2
 8006e62:	2e00      	cmp	r6, #0
 8006e64:	d17a      	bne.n	8006f5c <_dtoa_r+0x4c4>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1d3      	bne.n	8006e12 <_dtoa_r+0x37a>
 8006e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 8082 	beq.w	8006f76 <_dtoa_r+0x4de>
 8006e72:	4b91      	ldr	r3, [pc, #580]	; (80070b8 <_dtoa_r+0x620>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	4650      	mov	r0, sl
 8006e78:	4659      	mov	r1, fp
 8006e7a:	f7f9 fe4f 	bl	8000b1c <__aeabi_dcmplt>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d079      	beq.n	8006f76 <_dtoa_r+0x4de>
 8006e82:	9b03      	ldr	r3, [sp, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d076      	beq.n	8006f76 <_dtoa_r+0x4de>
 8006e88:	9b02      	ldr	r3, [sp, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	dd36      	ble.n	8006efc <_dtoa_r+0x464>
 8006e8e:	9b00      	ldr	r3, [sp, #0]
 8006e90:	4650      	mov	r0, sl
 8006e92:	4659      	mov	r1, fp
 8006e94:	1e5f      	subs	r7, r3, #1
 8006e96:	2200      	movs	r2, #0
 8006e98:	4b88      	ldr	r3, [pc, #544]	; (80070bc <_dtoa_r+0x624>)
 8006e9a:	f7f9 fbcd 	bl	8000638 <__aeabi_dmul>
 8006e9e:	9e02      	ldr	r6, [sp, #8]
 8006ea0:	4682      	mov	sl, r0
 8006ea2:	468b      	mov	fp, r1
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f7f9 fb5c 	bl	8000564 <__aeabi_i2d>
 8006eac:	4652      	mov	r2, sl
 8006eae:	465b      	mov	r3, fp
 8006eb0:	f7f9 fbc2 	bl	8000638 <__aeabi_dmul>
 8006eb4:	4b82      	ldr	r3, [pc, #520]	; (80070c0 <_dtoa_r+0x628>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f7f9 fa08 	bl	80002cc <__adddf3>
 8006ebc:	46d0      	mov	r8, sl
 8006ebe:	46d9      	mov	r9, fp
 8006ec0:	4682      	mov	sl, r0
 8006ec2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006ec6:	2e00      	cmp	r6, #0
 8006ec8:	d158      	bne.n	8006f7c <_dtoa_r+0x4e4>
 8006eca:	4b7e      	ldr	r3, [pc, #504]	; (80070c4 <_dtoa_r+0x62c>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	4640      	mov	r0, r8
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	f7f9 f9f9 	bl	80002c8 <__aeabi_dsub>
 8006ed6:	4652      	mov	r2, sl
 8006ed8:	465b      	mov	r3, fp
 8006eda:	4680      	mov	r8, r0
 8006edc:	4689      	mov	r9, r1
 8006ede:	f7f9 fe3b 	bl	8000b58 <__aeabi_dcmpgt>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	f040 8295 	bne.w	8007412 <_dtoa_r+0x97a>
 8006ee8:	4652      	mov	r2, sl
 8006eea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006eee:	4640      	mov	r0, r8
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	f7f9 fe13 	bl	8000b1c <__aeabi_dcmplt>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f040 8289 	bne.w	800740e <_dtoa_r+0x976>
 8006efc:	ec5b ab19 	vmov	sl, fp, d9
 8006f00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f2c0 8148 	blt.w	8007198 <_dtoa_r+0x700>
 8006f08:	9a00      	ldr	r2, [sp, #0]
 8006f0a:	2a0e      	cmp	r2, #14
 8006f0c:	f300 8144 	bgt.w	8007198 <_dtoa_r+0x700>
 8006f10:	4b67      	ldr	r3, [pc, #412]	; (80070b0 <_dtoa_r+0x618>)
 8006f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f16:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f280 80d5 	bge.w	80070cc <_dtoa_r+0x634>
 8006f22:	9b03      	ldr	r3, [sp, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f300 80d1 	bgt.w	80070cc <_dtoa_r+0x634>
 8006f2a:	f040 826f 	bne.w	800740c <_dtoa_r+0x974>
 8006f2e:	4b65      	ldr	r3, [pc, #404]	; (80070c4 <_dtoa_r+0x62c>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 fb7f 	bl	8000638 <__aeabi_dmul>
 8006f3a:	4652      	mov	r2, sl
 8006f3c:	465b      	mov	r3, fp
 8006f3e:	f7f9 fe01 	bl	8000b44 <__aeabi_dcmpge>
 8006f42:	9e03      	ldr	r6, [sp, #12]
 8006f44:	4637      	mov	r7, r6
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f040 8245 	bne.w	80073d6 <_dtoa_r+0x93e>
 8006f4c:	9d01      	ldr	r5, [sp, #4]
 8006f4e:	2331      	movs	r3, #49	; 0x31
 8006f50:	f805 3b01 	strb.w	r3, [r5], #1
 8006f54:	9b00      	ldr	r3, [sp, #0]
 8006f56:	3301      	adds	r3, #1
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	e240      	b.n	80073de <_dtoa_r+0x946>
 8006f5c:	07f2      	lsls	r2, r6, #31
 8006f5e:	d505      	bpl.n	8006f6c <_dtoa_r+0x4d4>
 8006f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f64:	f7f9 fb68 	bl	8000638 <__aeabi_dmul>
 8006f68:	3501      	adds	r5, #1
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	1076      	asrs	r6, r6, #1
 8006f6e:	3708      	adds	r7, #8
 8006f70:	e777      	b.n	8006e62 <_dtoa_r+0x3ca>
 8006f72:	2502      	movs	r5, #2
 8006f74:	e779      	b.n	8006e6a <_dtoa_r+0x3d2>
 8006f76:	9f00      	ldr	r7, [sp, #0]
 8006f78:	9e03      	ldr	r6, [sp, #12]
 8006f7a:	e794      	b.n	8006ea6 <_dtoa_r+0x40e>
 8006f7c:	9901      	ldr	r1, [sp, #4]
 8006f7e:	4b4c      	ldr	r3, [pc, #304]	; (80070b0 <_dtoa_r+0x618>)
 8006f80:	4431      	add	r1, r6
 8006f82:	910d      	str	r1, [sp, #52]	; 0x34
 8006f84:	9908      	ldr	r1, [sp, #32]
 8006f86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	d043      	beq.n	800701a <_dtoa_r+0x582>
 8006f92:	494d      	ldr	r1, [pc, #308]	; (80070c8 <_dtoa_r+0x630>)
 8006f94:	2000      	movs	r0, #0
 8006f96:	f7f9 fc79 	bl	800088c <__aeabi_ddiv>
 8006f9a:	4652      	mov	r2, sl
 8006f9c:	465b      	mov	r3, fp
 8006f9e:	f7f9 f993 	bl	80002c8 <__aeabi_dsub>
 8006fa2:	9d01      	ldr	r5, [sp, #4]
 8006fa4:	4682      	mov	sl, r0
 8006fa6:	468b      	mov	fp, r1
 8006fa8:	4649      	mov	r1, r9
 8006faa:	4640      	mov	r0, r8
 8006fac:	f7f9 fdf4 	bl	8000b98 <__aeabi_d2iz>
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	f7f9 fad7 	bl	8000564 <__aeabi_i2d>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	460b      	mov	r3, r1
 8006fba:	4640      	mov	r0, r8
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	f7f9 f983 	bl	80002c8 <__aeabi_dsub>
 8006fc2:	3630      	adds	r6, #48	; 0x30
 8006fc4:	f805 6b01 	strb.w	r6, [r5], #1
 8006fc8:	4652      	mov	r2, sl
 8006fca:	465b      	mov	r3, fp
 8006fcc:	4680      	mov	r8, r0
 8006fce:	4689      	mov	r9, r1
 8006fd0:	f7f9 fda4 	bl	8000b1c <__aeabi_dcmplt>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d163      	bne.n	80070a0 <_dtoa_r+0x608>
 8006fd8:	4642      	mov	r2, r8
 8006fda:	464b      	mov	r3, r9
 8006fdc:	4936      	ldr	r1, [pc, #216]	; (80070b8 <_dtoa_r+0x620>)
 8006fde:	2000      	movs	r0, #0
 8006fe0:	f7f9 f972 	bl	80002c8 <__aeabi_dsub>
 8006fe4:	4652      	mov	r2, sl
 8006fe6:	465b      	mov	r3, fp
 8006fe8:	f7f9 fd98 	bl	8000b1c <__aeabi_dcmplt>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	f040 80b5 	bne.w	800715c <_dtoa_r+0x6c4>
 8006ff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff4:	429d      	cmp	r5, r3
 8006ff6:	d081      	beq.n	8006efc <_dtoa_r+0x464>
 8006ff8:	4b30      	ldr	r3, [pc, #192]	; (80070bc <_dtoa_r+0x624>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	4650      	mov	r0, sl
 8006ffe:	4659      	mov	r1, fp
 8007000:	f7f9 fb1a 	bl	8000638 <__aeabi_dmul>
 8007004:	4b2d      	ldr	r3, [pc, #180]	; (80070bc <_dtoa_r+0x624>)
 8007006:	4682      	mov	sl, r0
 8007008:	468b      	mov	fp, r1
 800700a:	4640      	mov	r0, r8
 800700c:	4649      	mov	r1, r9
 800700e:	2200      	movs	r2, #0
 8007010:	f7f9 fb12 	bl	8000638 <__aeabi_dmul>
 8007014:	4680      	mov	r8, r0
 8007016:	4689      	mov	r9, r1
 8007018:	e7c6      	b.n	8006fa8 <_dtoa_r+0x510>
 800701a:	4650      	mov	r0, sl
 800701c:	4659      	mov	r1, fp
 800701e:	f7f9 fb0b 	bl	8000638 <__aeabi_dmul>
 8007022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007024:	9d01      	ldr	r5, [sp, #4]
 8007026:	930f      	str	r3, [sp, #60]	; 0x3c
 8007028:	4682      	mov	sl, r0
 800702a:	468b      	mov	fp, r1
 800702c:	4649      	mov	r1, r9
 800702e:	4640      	mov	r0, r8
 8007030:	f7f9 fdb2 	bl	8000b98 <__aeabi_d2iz>
 8007034:	4606      	mov	r6, r0
 8007036:	f7f9 fa95 	bl	8000564 <__aeabi_i2d>
 800703a:	3630      	adds	r6, #48	; 0x30
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4640      	mov	r0, r8
 8007042:	4649      	mov	r1, r9
 8007044:	f7f9 f940 	bl	80002c8 <__aeabi_dsub>
 8007048:	f805 6b01 	strb.w	r6, [r5], #1
 800704c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800704e:	429d      	cmp	r5, r3
 8007050:	4680      	mov	r8, r0
 8007052:	4689      	mov	r9, r1
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	d124      	bne.n	80070a4 <_dtoa_r+0x60c>
 800705a:	4b1b      	ldr	r3, [pc, #108]	; (80070c8 <_dtoa_r+0x630>)
 800705c:	4650      	mov	r0, sl
 800705e:	4659      	mov	r1, fp
 8007060:	f7f9 f934 	bl	80002cc <__adddf3>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4640      	mov	r0, r8
 800706a:	4649      	mov	r1, r9
 800706c:	f7f9 fd74 	bl	8000b58 <__aeabi_dcmpgt>
 8007070:	2800      	cmp	r0, #0
 8007072:	d173      	bne.n	800715c <_dtoa_r+0x6c4>
 8007074:	4652      	mov	r2, sl
 8007076:	465b      	mov	r3, fp
 8007078:	4913      	ldr	r1, [pc, #76]	; (80070c8 <_dtoa_r+0x630>)
 800707a:	2000      	movs	r0, #0
 800707c:	f7f9 f924 	bl	80002c8 <__aeabi_dsub>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4640      	mov	r0, r8
 8007086:	4649      	mov	r1, r9
 8007088:	f7f9 fd48 	bl	8000b1c <__aeabi_dcmplt>
 800708c:	2800      	cmp	r0, #0
 800708e:	f43f af35 	beq.w	8006efc <_dtoa_r+0x464>
 8007092:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007094:	1e6b      	subs	r3, r5, #1
 8007096:	930f      	str	r3, [sp, #60]	; 0x3c
 8007098:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800709c:	2b30      	cmp	r3, #48	; 0x30
 800709e:	d0f8      	beq.n	8007092 <_dtoa_r+0x5fa>
 80070a0:	9700      	str	r7, [sp, #0]
 80070a2:	e049      	b.n	8007138 <_dtoa_r+0x6a0>
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <_dtoa_r+0x624>)
 80070a6:	f7f9 fac7 	bl	8000638 <__aeabi_dmul>
 80070aa:	4680      	mov	r8, r0
 80070ac:	4689      	mov	r9, r1
 80070ae:	e7bd      	b.n	800702c <_dtoa_r+0x594>
 80070b0:	08008a40 	.word	0x08008a40
 80070b4:	08008a18 	.word	0x08008a18
 80070b8:	3ff00000 	.word	0x3ff00000
 80070bc:	40240000 	.word	0x40240000
 80070c0:	401c0000 	.word	0x401c0000
 80070c4:	40140000 	.word	0x40140000
 80070c8:	3fe00000 	.word	0x3fe00000
 80070cc:	9d01      	ldr	r5, [sp, #4]
 80070ce:	4656      	mov	r6, sl
 80070d0:	465f      	mov	r7, fp
 80070d2:	4642      	mov	r2, r8
 80070d4:	464b      	mov	r3, r9
 80070d6:	4630      	mov	r0, r6
 80070d8:	4639      	mov	r1, r7
 80070da:	f7f9 fbd7 	bl	800088c <__aeabi_ddiv>
 80070de:	f7f9 fd5b 	bl	8000b98 <__aeabi_d2iz>
 80070e2:	4682      	mov	sl, r0
 80070e4:	f7f9 fa3e 	bl	8000564 <__aeabi_i2d>
 80070e8:	4642      	mov	r2, r8
 80070ea:	464b      	mov	r3, r9
 80070ec:	f7f9 faa4 	bl	8000638 <__aeabi_dmul>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4630      	mov	r0, r6
 80070f6:	4639      	mov	r1, r7
 80070f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80070fc:	f7f9 f8e4 	bl	80002c8 <__aeabi_dsub>
 8007100:	f805 6b01 	strb.w	r6, [r5], #1
 8007104:	9e01      	ldr	r6, [sp, #4]
 8007106:	9f03      	ldr	r7, [sp, #12]
 8007108:	1bae      	subs	r6, r5, r6
 800710a:	42b7      	cmp	r7, r6
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	d135      	bne.n	800717e <_dtoa_r+0x6e6>
 8007112:	f7f9 f8db 	bl	80002cc <__adddf3>
 8007116:	4642      	mov	r2, r8
 8007118:	464b      	mov	r3, r9
 800711a:	4606      	mov	r6, r0
 800711c:	460f      	mov	r7, r1
 800711e:	f7f9 fd1b 	bl	8000b58 <__aeabi_dcmpgt>
 8007122:	b9d0      	cbnz	r0, 800715a <_dtoa_r+0x6c2>
 8007124:	4642      	mov	r2, r8
 8007126:	464b      	mov	r3, r9
 8007128:	4630      	mov	r0, r6
 800712a:	4639      	mov	r1, r7
 800712c:	f7f9 fcec 	bl	8000b08 <__aeabi_dcmpeq>
 8007130:	b110      	cbz	r0, 8007138 <_dtoa_r+0x6a0>
 8007132:	f01a 0f01 	tst.w	sl, #1
 8007136:	d110      	bne.n	800715a <_dtoa_r+0x6c2>
 8007138:	4620      	mov	r0, r4
 800713a:	ee18 1a10 	vmov	r1, s16
 800713e:	f000 fbc5 	bl	80078cc <_Bfree>
 8007142:	2300      	movs	r3, #0
 8007144:	9800      	ldr	r0, [sp, #0]
 8007146:	702b      	strb	r3, [r5, #0]
 8007148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800714a:	3001      	adds	r0, #1
 800714c:	6018      	str	r0, [r3, #0]
 800714e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007150:	2b00      	cmp	r3, #0
 8007152:	f43f acf1 	beq.w	8006b38 <_dtoa_r+0xa0>
 8007156:	601d      	str	r5, [r3, #0]
 8007158:	e4ee      	b.n	8006b38 <_dtoa_r+0xa0>
 800715a:	9f00      	ldr	r7, [sp, #0]
 800715c:	462b      	mov	r3, r5
 800715e:	461d      	mov	r5, r3
 8007160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007164:	2a39      	cmp	r2, #57	; 0x39
 8007166:	d106      	bne.n	8007176 <_dtoa_r+0x6de>
 8007168:	9a01      	ldr	r2, [sp, #4]
 800716a:	429a      	cmp	r2, r3
 800716c:	d1f7      	bne.n	800715e <_dtoa_r+0x6c6>
 800716e:	9901      	ldr	r1, [sp, #4]
 8007170:	2230      	movs	r2, #48	; 0x30
 8007172:	3701      	adds	r7, #1
 8007174:	700a      	strb	r2, [r1, #0]
 8007176:	781a      	ldrb	r2, [r3, #0]
 8007178:	3201      	adds	r2, #1
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	e790      	b.n	80070a0 <_dtoa_r+0x608>
 800717e:	4ba6      	ldr	r3, [pc, #664]	; (8007418 <_dtoa_r+0x980>)
 8007180:	2200      	movs	r2, #0
 8007182:	f7f9 fa59 	bl	8000638 <__aeabi_dmul>
 8007186:	2200      	movs	r2, #0
 8007188:	2300      	movs	r3, #0
 800718a:	4606      	mov	r6, r0
 800718c:	460f      	mov	r7, r1
 800718e:	f7f9 fcbb 	bl	8000b08 <__aeabi_dcmpeq>
 8007192:	2800      	cmp	r0, #0
 8007194:	d09d      	beq.n	80070d2 <_dtoa_r+0x63a>
 8007196:	e7cf      	b.n	8007138 <_dtoa_r+0x6a0>
 8007198:	9a08      	ldr	r2, [sp, #32]
 800719a:	2a00      	cmp	r2, #0
 800719c:	f000 80d7 	beq.w	800734e <_dtoa_r+0x8b6>
 80071a0:	9a06      	ldr	r2, [sp, #24]
 80071a2:	2a01      	cmp	r2, #1
 80071a4:	f300 80ba 	bgt.w	800731c <_dtoa_r+0x884>
 80071a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071aa:	2a00      	cmp	r2, #0
 80071ac:	f000 80b2 	beq.w	8007314 <_dtoa_r+0x87c>
 80071b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071b4:	9e07      	ldr	r6, [sp, #28]
 80071b6:	9d04      	ldr	r5, [sp, #16]
 80071b8:	9a04      	ldr	r2, [sp, #16]
 80071ba:	441a      	add	r2, r3
 80071bc:	9204      	str	r2, [sp, #16]
 80071be:	9a05      	ldr	r2, [sp, #20]
 80071c0:	2101      	movs	r1, #1
 80071c2:	441a      	add	r2, r3
 80071c4:	4620      	mov	r0, r4
 80071c6:	9205      	str	r2, [sp, #20]
 80071c8:	f000 fc38 	bl	8007a3c <__i2b>
 80071cc:	4607      	mov	r7, r0
 80071ce:	2d00      	cmp	r5, #0
 80071d0:	dd0c      	ble.n	80071ec <_dtoa_r+0x754>
 80071d2:	9b05      	ldr	r3, [sp, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	dd09      	ble.n	80071ec <_dtoa_r+0x754>
 80071d8:	42ab      	cmp	r3, r5
 80071da:	9a04      	ldr	r2, [sp, #16]
 80071dc:	bfa8      	it	ge
 80071de:	462b      	movge	r3, r5
 80071e0:	1ad2      	subs	r2, r2, r3
 80071e2:	9204      	str	r2, [sp, #16]
 80071e4:	9a05      	ldr	r2, [sp, #20]
 80071e6:	1aed      	subs	r5, r5, r3
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	9305      	str	r3, [sp, #20]
 80071ec:	9b07      	ldr	r3, [sp, #28]
 80071ee:	b31b      	cbz	r3, 8007238 <_dtoa_r+0x7a0>
 80071f0:	9b08      	ldr	r3, [sp, #32]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 80af 	beq.w	8007356 <_dtoa_r+0x8be>
 80071f8:	2e00      	cmp	r6, #0
 80071fa:	dd13      	ble.n	8007224 <_dtoa_r+0x78c>
 80071fc:	4639      	mov	r1, r7
 80071fe:	4632      	mov	r2, r6
 8007200:	4620      	mov	r0, r4
 8007202:	f000 fcdb 	bl	8007bbc <__pow5mult>
 8007206:	ee18 2a10 	vmov	r2, s16
 800720a:	4601      	mov	r1, r0
 800720c:	4607      	mov	r7, r0
 800720e:	4620      	mov	r0, r4
 8007210:	f000 fc2a 	bl	8007a68 <__multiply>
 8007214:	ee18 1a10 	vmov	r1, s16
 8007218:	4680      	mov	r8, r0
 800721a:	4620      	mov	r0, r4
 800721c:	f000 fb56 	bl	80078cc <_Bfree>
 8007220:	ee08 8a10 	vmov	s16, r8
 8007224:	9b07      	ldr	r3, [sp, #28]
 8007226:	1b9a      	subs	r2, r3, r6
 8007228:	d006      	beq.n	8007238 <_dtoa_r+0x7a0>
 800722a:	ee18 1a10 	vmov	r1, s16
 800722e:	4620      	mov	r0, r4
 8007230:	f000 fcc4 	bl	8007bbc <__pow5mult>
 8007234:	ee08 0a10 	vmov	s16, r0
 8007238:	2101      	movs	r1, #1
 800723a:	4620      	mov	r0, r4
 800723c:	f000 fbfe 	bl	8007a3c <__i2b>
 8007240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007242:	2b00      	cmp	r3, #0
 8007244:	4606      	mov	r6, r0
 8007246:	f340 8088 	ble.w	800735a <_dtoa_r+0x8c2>
 800724a:	461a      	mov	r2, r3
 800724c:	4601      	mov	r1, r0
 800724e:	4620      	mov	r0, r4
 8007250:	f000 fcb4 	bl	8007bbc <__pow5mult>
 8007254:	9b06      	ldr	r3, [sp, #24]
 8007256:	2b01      	cmp	r3, #1
 8007258:	4606      	mov	r6, r0
 800725a:	f340 8081 	ble.w	8007360 <_dtoa_r+0x8c8>
 800725e:	f04f 0800 	mov.w	r8, #0
 8007262:	6933      	ldr	r3, [r6, #16]
 8007264:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007268:	6918      	ldr	r0, [r3, #16]
 800726a:	f000 fb97 	bl	800799c <__hi0bits>
 800726e:	f1c0 0020 	rsb	r0, r0, #32
 8007272:	9b05      	ldr	r3, [sp, #20]
 8007274:	4418      	add	r0, r3
 8007276:	f010 001f 	ands.w	r0, r0, #31
 800727a:	f000 8092 	beq.w	80073a2 <_dtoa_r+0x90a>
 800727e:	f1c0 0320 	rsb	r3, r0, #32
 8007282:	2b04      	cmp	r3, #4
 8007284:	f340 808a 	ble.w	800739c <_dtoa_r+0x904>
 8007288:	f1c0 001c 	rsb	r0, r0, #28
 800728c:	9b04      	ldr	r3, [sp, #16]
 800728e:	4403      	add	r3, r0
 8007290:	9304      	str	r3, [sp, #16]
 8007292:	9b05      	ldr	r3, [sp, #20]
 8007294:	4403      	add	r3, r0
 8007296:	4405      	add	r5, r0
 8007298:	9305      	str	r3, [sp, #20]
 800729a:	9b04      	ldr	r3, [sp, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	dd07      	ble.n	80072b0 <_dtoa_r+0x818>
 80072a0:	ee18 1a10 	vmov	r1, s16
 80072a4:	461a      	mov	r2, r3
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 fce2 	bl	8007c70 <__lshift>
 80072ac:	ee08 0a10 	vmov	s16, r0
 80072b0:	9b05      	ldr	r3, [sp, #20]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	dd05      	ble.n	80072c2 <_dtoa_r+0x82a>
 80072b6:	4631      	mov	r1, r6
 80072b8:	461a      	mov	r2, r3
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 fcd8 	bl	8007c70 <__lshift>
 80072c0:	4606      	mov	r6, r0
 80072c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d06e      	beq.n	80073a6 <_dtoa_r+0x90e>
 80072c8:	ee18 0a10 	vmov	r0, s16
 80072cc:	4631      	mov	r1, r6
 80072ce:	f000 fd3f 	bl	8007d50 <__mcmp>
 80072d2:	2800      	cmp	r0, #0
 80072d4:	da67      	bge.n	80073a6 <_dtoa_r+0x90e>
 80072d6:	9b00      	ldr	r3, [sp, #0]
 80072d8:	3b01      	subs	r3, #1
 80072da:	ee18 1a10 	vmov	r1, s16
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	220a      	movs	r2, #10
 80072e2:	2300      	movs	r3, #0
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 fb13 	bl	8007910 <__multadd>
 80072ea:	9b08      	ldr	r3, [sp, #32]
 80072ec:	ee08 0a10 	vmov	s16, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 81b1 	beq.w	8007658 <_dtoa_r+0xbc0>
 80072f6:	2300      	movs	r3, #0
 80072f8:	4639      	mov	r1, r7
 80072fa:	220a      	movs	r2, #10
 80072fc:	4620      	mov	r0, r4
 80072fe:	f000 fb07 	bl	8007910 <__multadd>
 8007302:	9b02      	ldr	r3, [sp, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	4607      	mov	r7, r0
 8007308:	f300 808e 	bgt.w	8007428 <_dtoa_r+0x990>
 800730c:	9b06      	ldr	r3, [sp, #24]
 800730e:	2b02      	cmp	r3, #2
 8007310:	dc51      	bgt.n	80073b6 <_dtoa_r+0x91e>
 8007312:	e089      	b.n	8007428 <_dtoa_r+0x990>
 8007314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800731a:	e74b      	b.n	80071b4 <_dtoa_r+0x71c>
 800731c:	9b03      	ldr	r3, [sp, #12]
 800731e:	1e5e      	subs	r6, r3, #1
 8007320:	9b07      	ldr	r3, [sp, #28]
 8007322:	42b3      	cmp	r3, r6
 8007324:	bfbf      	itttt	lt
 8007326:	9b07      	ldrlt	r3, [sp, #28]
 8007328:	9607      	strlt	r6, [sp, #28]
 800732a:	1af2      	sublt	r2, r6, r3
 800732c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800732e:	bfb6      	itet	lt
 8007330:	189b      	addlt	r3, r3, r2
 8007332:	1b9e      	subge	r6, r3, r6
 8007334:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	bfb8      	it	lt
 800733a:	2600      	movlt	r6, #0
 800733c:	2b00      	cmp	r3, #0
 800733e:	bfb7      	itett	lt
 8007340:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007344:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007348:	1a9d      	sublt	r5, r3, r2
 800734a:	2300      	movlt	r3, #0
 800734c:	e734      	b.n	80071b8 <_dtoa_r+0x720>
 800734e:	9e07      	ldr	r6, [sp, #28]
 8007350:	9d04      	ldr	r5, [sp, #16]
 8007352:	9f08      	ldr	r7, [sp, #32]
 8007354:	e73b      	b.n	80071ce <_dtoa_r+0x736>
 8007356:	9a07      	ldr	r2, [sp, #28]
 8007358:	e767      	b.n	800722a <_dtoa_r+0x792>
 800735a:	9b06      	ldr	r3, [sp, #24]
 800735c:	2b01      	cmp	r3, #1
 800735e:	dc18      	bgt.n	8007392 <_dtoa_r+0x8fa>
 8007360:	f1ba 0f00 	cmp.w	sl, #0
 8007364:	d115      	bne.n	8007392 <_dtoa_r+0x8fa>
 8007366:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800736a:	b993      	cbnz	r3, 8007392 <_dtoa_r+0x8fa>
 800736c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007370:	0d1b      	lsrs	r3, r3, #20
 8007372:	051b      	lsls	r3, r3, #20
 8007374:	b183      	cbz	r3, 8007398 <_dtoa_r+0x900>
 8007376:	9b04      	ldr	r3, [sp, #16]
 8007378:	3301      	adds	r3, #1
 800737a:	9304      	str	r3, [sp, #16]
 800737c:	9b05      	ldr	r3, [sp, #20]
 800737e:	3301      	adds	r3, #1
 8007380:	9305      	str	r3, [sp, #20]
 8007382:	f04f 0801 	mov.w	r8, #1
 8007386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007388:	2b00      	cmp	r3, #0
 800738a:	f47f af6a 	bne.w	8007262 <_dtoa_r+0x7ca>
 800738e:	2001      	movs	r0, #1
 8007390:	e76f      	b.n	8007272 <_dtoa_r+0x7da>
 8007392:	f04f 0800 	mov.w	r8, #0
 8007396:	e7f6      	b.n	8007386 <_dtoa_r+0x8ee>
 8007398:	4698      	mov	r8, r3
 800739a:	e7f4      	b.n	8007386 <_dtoa_r+0x8ee>
 800739c:	f43f af7d 	beq.w	800729a <_dtoa_r+0x802>
 80073a0:	4618      	mov	r0, r3
 80073a2:	301c      	adds	r0, #28
 80073a4:	e772      	b.n	800728c <_dtoa_r+0x7f4>
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	dc37      	bgt.n	800741c <_dtoa_r+0x984>
 80073ac:	9b06      	ldr	r3, [sp, #24]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	dd34      	ble.n	800741c <_dtoa_r+0x984>
 80073b2:	9b03      	ldr	r3, [sp, #12]
 80073b4:	9302      	str	r3, [sp, #8]
 80073b6:	9b02      	ldr	r3, [sp, #8]
 80073b8:	b96b      	cbnz	r3, 80073d6 <_dtoa_r+0x93e>
 80073ba:	4631      	mov	r1, r6
 80073bc:	2205      	movs	r2, #5
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 faa6 	bl	8007910 <__multadd>
 80073c4:	4601      	mov	r1, r0
 80073c6:	4606      	mov	r6, r0
 80073c8:	ee18 0a10 	vmov	r0, s16
 80073cc:	f000 fcc0 	bl	8007d50 <__mcmp>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	f73f adbb 	bgt.w	8006f4c <_dtoa_r+0x4b4>
 80073d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073d8:	9d01      	ldr	r5, [sp, #4]
 80073da:	43db      	mvns	r3, r3
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	f04f 0800 	mov.w	r8, #0
 80073e2:	4631      	mov	r1, r6
 80073e4:	4620      	mov	r0, r4
 80073e6:	f000 fa71 	bl	80078cc <_Bfree>
 80073ea:	2f00      	cmp	r7, #0
 80073ec:	f43f aea4 	beq.w	8007138 <_dtoa_r+0x6a0>
 80073f0:	f1b8 0f00 	cmp.w	r8, #0
 80073f4:	d005      	beq.n	8007402 <_dtoa_r+0x96a>
 80073f6:	45b8      	cmp	r8, r7
 80073f8:	d003      	beq.n	8007402 <_dtoa_r+0x96a>
 80073fa:	4641      	mov	r1, r8
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 fa65 	bl	80078cc <_Bfree>
 8007402:	4639      	mov	r1, r7
 8007404:	4620      	mov	r0, r4
 8007406:	f000 fa61 	bl	80078cc <_Bfree>
 800740a:	e695      	b.n	8007138 <_dtoa_r+0x6a0>
 800740c:	2600      	movs	r6, #0
 800740e:	4637      	mov	r7, r6
 8007410:	e7e1      	b.n	80073d6 <_dtoa_r+0x93e>
 8007412:	9700      	str	r7, [sp, #0]
 8007414:	4637      	mov	r7, r6
 8007416:	e599      	b.n	8006f4c <_dtoa_r+0x4b4>
 8007418:	40240000 	.word	0x40240000
 800741c:	9b08      	ldr	r3, [sp, #32]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 80ca 	beq.w	80075b8 <_dtoa_r+0xb20>
 8007424:	9b03      	ldr	r3, [sp, #12]
 8007426:	9302      	str	r3, [sp, #8]
 8007428:	2d00      	cmp	r5, #0
 800742a:	dd05      	ble.n	8007438 <_dtoa_r+0x9a0>
 800742c:	4639      	mov	r1, r7
 800742e:	462a      	mov	r2, r5
 8007430:	4620      	mov	r0, r4
 8007432:	f000 fc1d 	bl	8007c70 <__lshift>
 8007436:	4607      	mov	r7, r0
 8007438:	f1b8 0f00 	cmp.w	r8, #0
 800743c:	d05b      	beq.n	80074f6 <_dtoa_r+0xa5e>
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	4620      	mov	r0, r4
 8007442:	f000 fa03 	bl	800784c <_Balloc>
 8007446:	4605      	mov	r5, r0
 8007448:	b928      	cbnz	r0, 8007456 <_dtoa_r+0x9be>
 800744a:	4b87      	ldr	r3, [pc, #540]	; (8007668 <_dtoa_r+0xbd0>)
 800744c:	4602      	mov	r2, r0
 800744e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007452:	f7ff bb3b 	b.w	8006acc <_dtoa_r+0x34>
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	3202      	adds	r2, #2
 800745a:	0092      	lsls	r2, r2, #2
 800745c:	f107 010c 	add.w	r1, r7, #12
 8007460:	300c      	adds	r0, #12
 8007462:	f7fe fc96 	bl	8005d92 <memcpy>
 8007466:	2201      	movs	r2, #1
 8007468:	4629      	mov	r1, r5
 800746a:	4620      	mov	r0, r4
 800746c:	f000 fc00 	bl	8007c70 <__lshift>
 8007470:	9b01      	ldr	r3, [sp, #4]
 8007472:	f103 0901 	add.w	r9, r3, #1
 8007476:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800747a:	4413      	add	r3, r2
 800747c:	9305      	str	r3, [sp, #20]
 800747e:	f00a 0301 	and.w	r3, sl, #1
 8007482:	46b8      	mov	r8, r7
 8007484:	9304      	str	r3, [sp, #16]
 8007486:	4607      	mov	r7, r0
 8007488:	4631      	mov	r1, r6
 800748a:	ee18 0a10 	vmov	r0, s16
 800748e:	f7ff fa75 	bl	800697c <quorem>
 8007492:	4641      	mov	r1, r8
 8007494:	9002      	str	r0, [sp, #8]
 8007496:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800749a:	ee18 0a10 	vmov	r0, s16
 800749e:	f000 fc57 	bl	8007d50 <__mcmp>
 80074a2:	463a      	mov	r2, r7
 80074a4:	9003      	str	r0, [sp, #12]
 80074a6:	4631      	mov	r1, r6
 80074a8:	4620      	mov	r0, r4
 80074aa:	f000 fc6d 	bl	8007d88 <__mdiff>
 80074ae:	68c2      	ldr	r2, [r0, #12]
 80074b0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80074b4:	4605      	mov	r5, r0
 80074b6:	bb02      	cbnz	r2, 80074fa <_dtoa_r+0xa62>
 80074b8:	4601      	mov	r1, r0
 80074ba:	ee18 0a10 	vmov	r0, s16
 80074be:	f000 fc47 	bl	8007d50 <__mcmp>
 80074c2:	4602      	mov	r2, r0
 80074c4:	4629      	mov	r1, r5
 80074c6:	4620      	mov	r0, r4
 80074c8:	9207      	str	r2, [sp, #28]
 80074ca:	f000 f9ff 	bl	80078cc <_Bfree>
 80074ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80074d2:	ea43 0102 	orr.w	r1, r3, r2
 80074d6:	9b04      	ldr	r3, [sp, #16]
 80074d8:	430b      	orrs	r3, r1
 80074da:	464d      	mov	r5, r9
 80074dc:	d10f      	bne.n	80074fe <_dtoa_r+0xa66>
 80074de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074e2:	d02a      	beq.n	800753a <_dtoa_r+0xaa2>
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	dd02      	ble.n	80074f0 <_dtoa_r+0xa58>
 80074ea:	9b02      	ldr	r3, [sp, #8]
 80074ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80074f0:	f88b a000 	strb.w	sl, [fp]
 80074f4:	e775      	b.n	80073e2 <_dtoa_r+0x94a>
 80074f6:	4638      	mov	r0, r7
 80074f8:	e7ba      	b.n	8007470 <_dtoa_r+0x9d8>
 80074fa:	2201      	movs	r2, #1
 80074fc:	e7e2      	b.n	80074c4 <_dtoa_r+0xa2c>
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	db04      	blt.n	800750e <_dtoa_r+0xa76>
 8007504:	9906      	ldr	r1, [sp, #24]
 8007506:	430b      	orrs	r3, r1
 8007508:	9904      	ldr	r1, [sp, #16]
 800750a:	430b      	orrs	r3, r1
 800750c:	d122      	bne.n	8007554 <_dtoa_r+0xabc>
 800750e:	2a00      	cmp	r2, #0
 8007510:	ddee      	ble.n	80074f0 <_dtoa_r+0xa58>
 8007512:	ee18 1a10 	vmov	r1, s16
 8007516:	2201      	movs	r2, #1
 8007518:	4620      	mov	r0, r4
 800751a:	f000 fba9 	bl	8007c70 <__lshift>
 800751e:	4631      	mov	r1, r6
 8007520:	ee08 0a10 	vmov	s16, r0
 8007524:	f000 fc14 	bl	8007d50 <__mcmp>
 8007528:	2800      	cmp	r0, #0
 800752a:	dc03      	bgt.n	8007534 <_dtoa_r+0xa9c>
 800752c:	d1e0      	bne.n	80074f0 <_dtoa_r+0xa58>
 800752e:	f01a 0f01 	tst.w	sl, #1
 8007532:	d0dd      	beq.n	80074f0 <_dtoa_r+0xa58>
 8007534:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007538:	d1d7      	bne.n	80074ea <_dtoa_r+0xa52>
 800753a:	2339      	movs	r3, #57	; 0x39
 800753c:	f88b 3000 	strb.w	r3, [fp]
 8007540:	462b      	mov	r3, r5
 8007542:	461d      	mov	r5, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800754a:	2a39      	cmp	r2, #57	; 0x39
 800754c:	d071      	beq.n	8007632 <_dtoa_r+0xb9a>
 800754e:	3201      	adds	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
 8007552:	e746      	b.n	80073e2 <_dtoa_r+0x94a>
 8007554:	2a00      	cmp	r2, #0
 8007556:	dd07      	ble.n	8007568 <_dtoa_r+0xad0>
 8007558:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800755c:	d0ed      	beq.n	800753a <_dtoa_r+0xaa2>
 800755e:	f10a 0301 	add.w	r3, sl, #1
 8007562:	f88b 3000 	strb.w	r3, [fp]
 8007566:	e73c      	b.n	80073e2 <_dtoa_r+0x94a>
 8007568:	9b05      	ldr	r3, [sp, #20]
 800756a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800756e:	4599      	cmp	r9, r3
 8007570:	d047      	beq.n	8007602 <_dtoa_r+0xb6a>
 8007572:	ee18 1a10 	vmov	r1, s16
 8007576:	2300      	movs	r3, #0
 8007578:	220a      	movs	r2, #10
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f9c8 	bl	8007910 <__multadd>
 8007580:	45b8      	cmp	r8, r7
 8007582:	ee08 0a10 	vmov	s16, r0
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	f04f 020a 	mov.w	r2, #10
 800758e:	4641      	mov	r1, r8
 8007590:	4620      	mov	r0, r4
 8007592:	d106      	bne.n	80075a2 <_dtoa_r+0xb0a>
 8007594:	f000 f9bc 	bl	8007910 <__multadd>
 8007598:	4680      	mov	r8, r0
 800759a:	4607      	mov	r7, r0
 800759c:	f109 0901 	add.w	r9, r9, #1
 80075a0:	e772      	b.n	8007488 <_dtoa_r+0x9f0>
 80075a2:	f000 f9b5 	bl	8007910 <__multadd>
 80075a6:	4639      	mov	r1, r7
 80075a8:	4680      	mov	r8, r0
 80075aa:	2300      	movs	r3, #0
 80075ac:	220a      	movs	r2, #10
 80075ae:	4620      	mov	r0, r4
 80075b0:	f000 f9ae 	bl	8007910 <__multadd>
 80075b4:	4607      	mov	r7, r0
 80075b6:	e7f1      	b.n	800759c <_dtoa_r+0xb04>
 80075b8:	9b03      	ldr	r3, [sp, #12]
 80075ba:	9302      	str	r3, [sp, #8]
 80075bc:	9d01      	ldr	r5, [sp, #4]
 80075be:	ee18 0a10 	vmov	r0, s16
 80075c2:	4631      	mov	r1, r6
 80075c4:	f7ff f9da 	bl	800697c <quorem>
 80075c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80075cc:	9b01      	ldr	r3, [sp, #4]
 80075ce:	f805 ab01 	strb.w	sl, [r5], #1
 80075d2:	1aea      	subs	r2, r5, r3
 80075d4:	9b02      	ldr	r3, [sp, #8]
 80075d6:	4293      	cmp	r3, r2
 80075d8:	dd09      	ble.n	80075ee <_dtoa_r+0xb56>
 80075da:	ee18 1a10 	vmov	r1, s16
 80075de:	2300      	movs	r3, #0
 80075e0:	220a      	movs	r2, #10
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 f994 	bl	8007910 <__multadd>
 80075e8:	ee08 0a10 	vmov	s16, r0
 80075ec:	e7e7      	b.n	80075be <_dtoa_r+0xb26>
 80075ee:	9b02      	ldr	r3, [sp, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bfc8      	it	gt
 80075f4:	461d      	movgt	r5, r3
 80075f6:	9b01      	ldr	r3, [sp, #4]
 80075f8:	bfd8      	it	le
 80075fa:	2501      	movle	r5, #1
 80075fc:	441d      	add	r5, r3
 80075fe:	f04f 0800 	mov.w	r8, #0
 8007602:	ee18 1a10 	vmov	r1, s16
 8007606:	2201      	movs	r2, #1
 8007608:	4620      	mov	r0, r4
 800760a:	f000 fb31 	bl	8007c70 <__lshift>
 800760e:	4631      	mov	r1, r6
 8007610:	ee08 0a10 	vmov	s16, r0
 8007614:	f000 fb9c 	bl	8007d50 <__mcmp>
 8007618:	2800      	cmp	r0, #0
 800761a:	dc91      	bgt.n	8007540 <_dtoa_r+0xaa8>
 800761c:	d102      	bne.n	8007624 <_dtoa_r+0xb8c>
 800761e:	f01a 0f01 	tst.w	sl, #1
 8007622:	d18d      	bne.n	8007540 <_dtoa_r+0xaa8>
 8007624:	462b      	mov	r3, r5
 8007626:	461d      	mov	r5, r3
 8007628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800762c:	2a30      	cmp	r2, #48	; 0x30
 800762e:	d0fa      	beq.n	8007626 <_dtoa_r+0xb8e>
 8007630:	e6d7      	b.n	80073e2 <_dtoa_r+0x94a>
 8007632:	9a01      	ldr	r2, [sp, #4]
 8007634:	429a      	cmp	r2, r3
 8007636:	d184      	bne.n	8007542 <_dtoa_r+0xaaa>
 8007638:	9b00      	ldr	r3, [sp, #0]
 800763a:	3301      	adds	r3, #1
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	2331      	movs	r3, #49	; 0x31
 8007640:	7013      	strb	r3, [r2, #0]
 8007642:	e6ce      	b.n	80073e2 <_dtoa_r+0x94a>
 8007644:	4b09      	ldr	r3, [pc, #36]	; (800766c <_dtoa_r+0xbd4>)
 8007646:	f7ff ba95 	b.w	8006b74 <_dtoa_r+0xdc>
 800764a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800764c:	2b00      	cmp	r3, #0
 800764e:	f47f aa6e 	bne.w	8006b2e <_dtoa_r+0x96>
 8007652:	4b07      	ldr	r3, [pc, #28]	; (8007670 <_dtoa_r+0xbd8>)
 8007654:	f7ff ba8e 	b.w	8006b74 <_dtoa_r+0xdc>
 8007658:	9b02      	ldr	r3, [sp, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	dcae      	bgt.n	80075bc <_dtoa_r+0xb24>
 800765e:	9b06      	ldr	r3, [sp, #24]
 8007660:	2b02      	cmp	r3, #2
 8007662:	f73f aea8 	bgt.w	80073b6 <_dtoa_r+0x91e>
 8007666:	e7a9      	b.n	80075bc <_dtoa_r+0xb24>
 8007668:	080089a7 	.word	0x080089a7
 800766c:	08008904 	.word	0x08008904
 8007670:	08008928 	.word	0x08008928

08007674 <__sflush_r>:
 8007674:	898a      	ldrh	r2, [r1, #12]
 8007676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800767a:	4605      	mov	r5, r0
 800767c:	0710      	lsls	r0, r2, #28
 800767e:	460c      	mov	r4, r1
 8007680:	d458      	bmi.n	8007734 <__sflush_r+0xc0>
 8007682:	684b      	ldr	r3, [r1, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	dc05      	bgt.n	8007694 <__sflush_r+0x20>
 8007688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	dc02      	bgt.n	8007694 <__sflush_r+0x20>
 800768e:	2000      	movs	r0, #0
 8007690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007696:	2e00      	cmp	r6, #0
 8007698:	d0f9      	beq.n	800768e <__sflush_r+0x1a>
 800769a:	2300      	movs	r3, #0
 800769c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076a0:	682f      	ldr	r7, [r5, #0]
 80076a2:	602b      	str	r3, [r5, #0]
 80076a4:	d032      	beq.n	800770c <__sflush_r+0x98>
 80076a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	075a      	lsls	r2, r3, #29
 80076ac:	d505      	bpl.n	80076ba <__sflush_r+0x46>
 80076ae:	6863      	ldr	r3, [r4, #4]
 80076b0:	1ac0      	subs	r0, r0, r3
 80076b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076b4:	b10b      	cbz	r3, 80076ba <__sflush_r+0x46>
 80076b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076b8:	1ac0      	subs	r0, r0, r3
 80076ba:	2300      	movs	r3, #0
 80076bc:	4602      	mov	r2, r0
 80076be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076c0:	6a21      	ldr	r1, [r4, #32]
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b0      	blx	r6
 80076c6:	1c43      	adds	r3, r0, #1
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	d106      	bne.n	80076da <__sflush_r+0x66>
 80076cc:	6829      	ldr	r1, [r5, #0]
 80076ce:	291d      	cmp	r1, #29
 80076d0:	d82c      	bhi.n	800772c <__sflush_r+0xb8>
 80076d2:	4a2a      	ldr	r2, [pc, #168]	; (800777c <__sflush_r+0x108>)
 80076d4:	40ca      	lsrs	r2, r1
 80076d6:	07d6      	lsls	r6, r2, #31
 80076d8:	d528      	bpl.n	800772c <__sflush_r+0xb8>
 80076da:	2200      	movs	r2, #0
 80076dc:	6062      	str	r2, [r4, #4]
 80076de:	04d9      	lsls	r1, r3, #19
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	6022      	str	r2, [r4, #0]
 80076e4:	d504      	bpl.n	80076f0 <__sflush_r+0x7c>
 80076e6:	1c42      	adds	r2, r0, #1
 80076e8:	d101      	bne.n	80076ee <__sflush_r+0x7a>
 80076ea:	682b      	ldr	r3, [r5, #0]
 80076ec:	b903      	cbnz	r3, 80076f0 <__sflush_r+0x7c>
 80076ee:	6560      	str	r0, [r4, #84]	; 0x54
 80076f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076f2:	602f      	str	r7, [r5, #0]
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d0ca      	beq.n	800768e <__sflush_r+0x1a>
 80076f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076fc:	4299      	cmp	r1, r3
 80076fe:	d002      	beq.n	8007706 <__sflush_r+0x92>
 8007700:	4628      	mov	r0, r5
 8007702:	f000 fc3d 	bl	8007f80 <_free_r>
 8007706:	2000      	movs	r0, #0
 8007708:	6360      	str	r0, [r4, #52]	; 0x34
 800770a:	e7c1      	b.n	8007690 <__sflush_r+0x1c>
 800770c:	6a21      	ldr	r1, [r4, #32]
 800770e:	2301      	movs	r3, #1
 8007710:	4628      	mov	r0, r5
 8007712:	47b0      	blx	r6
 8007714:	1c41      	adds	r1, r0, #1
 8007716:	d1c7      	bne.n	80076a8 <__sflush_r+0x34>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0c4      	beq.n	80076a8 <__sflush_r+0x34>
 800771e:	2b1d      	cmp	r3, #29
 8007720:	d001      	beq.n	8007726 <__sflush_r+0xb2>
 8007722:	2b16      	cmp	r3, #22
 8007724:	d101      	bne.n	800772a <__sflush_r+0xb6>
 8007726:	602f      	str	r7, [r5, #0]
 8007728:	e7b1      	b.n	800768e <__sflush_r+0x1a>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007730:	81a3      	strh	r3, [r4, #12]
 8007732:	e7ad      	b.n	8007690 <__sflush_r+0x1c>
 8007734:	690f      	ldr	r7, [r1, #16]
 8007736:	2f00      	cmp	r7, #0
 8007738:	d0a9      	beq.n	800768e <__sflush_r+0x1a>
 800773a:	0793      	lsls	r3, r2, #30
 800773c:	680e      	ldr	r6, [r1, #0]
 800773e:	bf08      	it	eq
 8007740:	694b      	ldreq	r3, [r1, #20]
 8007742:	600f      	str	r7, [r1, #0]
 8007744:	bf18      	it	ne
 8007746:	2300      	movne	r3, #0
 8007748:	eba6 0807 	sub.w	r8, r6, r7
 800774c:	608b      	str	r3, [r1, #8]
 800774e:	f1b8 0f00 	cmp.w	r8, #0
 8007752:	dd9c      	ble.n	800768e <__sflush_r+0x1a>
 8007754:	6a21      	ldr	r1, [r4, #32]
 8007756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007758:	4643      	mov	r3, r8
 800775a:	463a      	mov	r2, r7
 800775c:	4628      	mov	r0, r5
 800775e:	47b0      	blx	r6
 8007760:	2800      	cmp	r0, #0
 8007762:	dc06      	bgt.n	8007772 <__sflush_r+0xfe>
 8007764:	89a3      	ldrh	r3, [r4, #12]
 8007766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800776a:	81a3      	strh	r3, [r4, #12]
 800776c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007770:	e78e      	b.n	8007690 <__sflush_r+0x1c>
 8007772:	4407      	add	r7, r0
 8007774:	eba8 0800 	sub.w	r8, r8, r0
 8007778:	e7e9      	b.n	800774e <__sflush_r+0xda>
 800777a:	bf00      	nop
 800777c:	20400001 	.word	0x20400001

08007780 <_fflush_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	690b      	ldr	r3, [r1, #16]
 8007784:	4605      	mov	r5, r0
 8007786:	460c      	mov	r4, r1
 8007788:	b913      	cbnz	r3, 8007790 <_fflush_r+0x10>
 800778a:	2500      	movs	r5, #0
 800778c:	4628      	mov	r0, r5
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	b118      	cbz	r0, 800779a <_fflush_r+0x1a>
 8007792:	6983      	ldr	r3, [r0, #24]
 8007794:	b90b      	cbnz	r3, 800779a <_fflush_r+0x1a>
 8007796:	f7fe fa37 	bl	8005c08 <__sinit>
 800779a:	4b14      	ldr	r3, [pc, #80]	; (80077ec <_fflush_r+0x6c>)
 800779c:	429c      	cmp	r4, r3
 800779e:	d11b      	bne.n	80077d8 <_fflush_r+0x58>
 80077a0:	686c      	ldr	r4, [r5, #4]
 80077a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d0ef      	beq.n	800778a <_fflush_r+0xa>
 80077aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077ac:	07d0      	lsls	r0, r2, #31
 80077ae:	d404      	bmi.n	80077ba <_fflush_r+0x3a>
 80077b0:	0599      	lsls	r1, r3, #22
 80077b2:	d402      	bmi.n	80077ba <_fflush_r+0x3a>
 80077b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077b6:	f7fe faea 	bl	8005d8e <__retarget_lock_acquire_recursive>
 80077ba:	4628      	mov	r0, r5
 80077bc:	4621      	mov	r1, r4
 80077be:	f7ff ff59 	bl	8007674 <__sflush_r>
 80077c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077c4:	07da      	lsls	r2, r3, #31
 80077c6:	4605      	mov	r5, r0
 80077c8:	d4e0      	bmi.n	800778c <_fflush_r+0xc>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	059b      	lsls	r3, r3, #22
 80077ce:	d4dd      	bmi.n	800778c <_fflush_r+0xc>
 80077d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077d2:	f7fe fadd 	bl	8005d90 <__retarget_lock_release_recursive>
 80077d6:	e7d9      	b.n	800778c <_fflush_r+0xc>
 80077d8:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <_fflush_r+0x70>)
 80077da:	429c      	cmp	r4, r3
 80077dc:	d101      	bne.n	80077e2 <_fflush_r+0x62>
 80077de:	68ac      	ldr	r4, [r5, #8]
 80077e0:	e7df      	b.n	80077a2 <_fflush_r+0x22>
 80077e2:	4b04      	ldr	r3, [pc, #16]	; (80077f4 <_fflush_r+0x74>)
 80077e4:	429c      	cmp	r4, r3
 80077e6:	bf08      	it	eq
 80077e8:	68ec      	ldreq	r4, [r5, #12]
 80077ea:	e7da      	b.n	80077a2 <_fflush_r+0x22>
 80077ec:	080088b0 	.word	0x080088b0
 80077f0:	080088d0 	.word	0x080088d0
 80077f4:	08008890 	.word	0x08008890

080077f8 <_localeconv_r>:
 80077f8:	4800      	ldr	r0, [pc, #0]	; (80077fc <_localeconv_r+0x4>)
 80077fa:	4770      	bx	lr
 80077fc:	20000168 	.word	0x20000168

08007800 <_lseek_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d07      	ldr	r5, [pc, #28]	; (8007820 <_lseek_r+0x20>)
 8007804:	4604      	mov	r4, r0
 8007806:	4608      	mov	r0, r1
 8007808:	4611      	mov	r1, r2
 800780a:	2200      	movs	r2, #0
 800780c:	602a      	str	r2, [r5, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	f7f9 ff98 	bl	8001744 <_lseek>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_lseek_r+0x1e>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_lseek_r+0x1e>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	200042bc 	.word	0x200042bc

08007824 <malloc>:
 8007824:	4b02      	ldr	r3, [pc, #8]	; (8007830 <malloc+0xc>)
 8007826:	4601      	mov	r1, r0
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	f7fe bae9 	b.w	8005e00 <_malloc_r>
 800782e:	bf00      	nop
 8007830:	20000014 	.word	0x20000014

08007834 <__malloc_lock>:
 8007834:	4801      	ldr	r0, [pc, #4]	; (800783c <__malloc_lock+0x8>)
 8007836:	f7fe baaa 	b.w	8005d8e <__retarget_lock_acquire_recursive>
 800783a:	bf00      	nop
 800783c:	200042b0 	.word	0x200042b0

08007840 <__malloc_unlock>:
 8007840:	4801      	ldr	r0, [pc, #4]	; (8007848 <__malloc_unlock+0x8>)
 8007842:	f7fe baa5 	b.w	8005d90 <__retarget_lock_release_recursive>
 8007846:	bf00      	nop
 8007848:	200042b0 	.word	0x200042b0

0800784c <_Balloc>:
 800784c:	b570      	push	{r4, r5, r6, lr}
 800784e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007850:	4604      	mov	r4, r0
 8007852:	460d      	mov	r5, r1
 8007854:	b976      	cbnz	r6, 8007874 <_Balloc+0x28>
 8007856:	2010      	movs	r0, #16
 8007858:	f7ff ffe4 	bl	8007824 <malloc>
 800785c:	4602      	mov	r2, r0
 800785e:	6260      	str	r0, [r4, #36]	; 0x24
 8007860:	b920      	cbnz	r0, 800786c <_Balloc+0x20>
 8007862:	4b18      	ldr	r3, [pc, #96]	; (80078c4 <_Balloc+0x78>)
 8007864:	4818      	ldr	r0, [pc, #96]	; (80078c8 <_Balloc+0x7c>)
 8007866:	2166      	movs	r1, #102	; 0x66
 8007868:	f000 fbe8 	bl	800803c <__assert_func>
 800786c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007870:	6006      	str	r6, [r0, #0]
 8007872:	60c6      	str	r6, [r0, #12]
 8007874:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007876:	68f3      	ldr	r3, [r6, #12]
 8007878:	b183      	cbz	r3, 800789c <_Balloc+0x50>
 800787a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007882:	b9b8      	cbnz	r0, 80078b4 <_Balloc+0x68>
 8007884:	2101      	movs	r1, #1
 8007886:	fa01 f605 	lsl.w	r6, r1, r5
 800788a:	1d72      	adds	r2, r6, #5
 800788c:	0092      	lsls	r2, r2, #2
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fb60 	bl	8007f54 <_calloc_r>
 8007894:	b160      	cbz	r0, 80078b0 <_Balloc+0x64>
 8007896:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800789a:	e00e      	b.n	80078ba <_Balloc+0x6e>
 800789c:	2221      	movs	r2, #33	; 0x21
 800789e:	2104      	movs	r1, #4
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 fb57 	bl	8007f54 <_calloc_r>
 80078a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078a8:	60f0      	str	r0, [r6, #12]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e4      	bne.n	800787a <_Balloc+0x2e>
 80078b0:	2000      	movs	r0, #0
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
 80078b4:	6802      	ldr	r2, [r0, #0]
 80078b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078ba:	2300      	movs	r3, #0
 80078bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078c0:	e7f7      	b.n	80078b2 <_Balloc+0x66>
 80078c2:	bf00      	nop
 80078c4:	08008935 	.word	0x08008935
 80078c8:	080089b8 	.word	0x080089b8

080078cc <_Bfree>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078d0:	4605      	mov	r5, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	b976      	cbnz	r6, 80078f4 <_Bfree+0x28>
 80078d6:	2010      	movs	r0, #16
 80078d8:	f7ff ffa4 	bl	8007824 <malloc>
 80078dc:	4602      	mov	r2, r0
 80078de:	6268      	str	r0, [r5, #36]	; 0x24
 80078e0:	b920      	cbnz	r0, 80078ec <_Bfree+0x20>
 80078e2:	4b09      	ldr	r3, [pc, #36]	; (8007908 <_Bfree+0x3c>)
 80078e4:	4809      	ldr	r0, [pc, #36]	; (800790c <_Bfree+0x40>)
 80078e6:	218a      	movs	r1, #138	; 0x8a
 80078e8:	f000 fba8 	bl	800803c <__assert_func>
 80078ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078f0:	6006      	str	r6, [r0, #0]
 80078f2:	60c6      	str	r6, [r0, #12]
 80078f4:	b13c      	cbz	r4, 8007906 <_Bfree+0x3a>
 80078f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078f8:	6862      	ldr	r2, [r4, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007900:	6021      	str	r1, [r4, #0]
 8007902:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007906:	bd70      	pop	{r4, r5, r6, pc}
 8007908:	08008935 	.word	0x08008935
 800790c:	080089b8 	.word	0x080089b8

08007910 <__multadd>:
 8007910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007914:	690d      	ldr	r5, [r1, #16]
 8007916:	4607      	mov	r7, r0
 8007918:	460c      	mov	r4, r1
 800791a:	461e      	mov	r6, r3
 800791c:	f101 0c14 	add.w	ip, r1, #20
 8007920:	2000      	movs	r0, #0
 8007922:	f8dc 3000 	ldr.w	r3, [ip]
 8007926:	b299      	uxth	r1, r3
 8007928:	fb02 6101 	mla	r1, r2, r1, r6
 800792c:	0c1e      	lsrs	r6, r3, #16
 800792e:	0c0b      	lsrs	r3, r1, #16
 8007930:	fb02 3306 	mla	r3, r2, r6, r3
 8007934:	b289      	uxth	r1, r1
 8007936:	3001      	adds	r0, #1
 8007938:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800793c:	4285      	cmp	r5, r0
 800793e:	f84c 1b04 	str.w	r1, [ip], #4
 8007942:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007946:	dcec      	bgt.n	8007922 <__multadd+0x12>
 8007948:	b30e      	cbz	r6, 800798e <__multadd+0x7e>
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	42ab      	cmp	r3, r5
 800794e:	dc19      	bgt.n	8007984 <__multadd+0x74>
 8007950:	6861      	ldr	r1, [r4, #4]
 8007952:	4638      	mov	r0, r7
 8007954:	3101      	adds	r1, #1
 8007956:	f7ff ff79 	bl	800784c <_Balloc>
 800795a:	4680      	mov	r8, r0
 800795c:	b928      	cbnz	r0, 800796a <__multadd+0x5a>
 800795e:	4602      	mov	r2, r0
 8007960:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <__multadd+0x84>)
 8007962:	480d      	ldr	r0, [pc, #52]	; (8007998 <__multadd+0x88>)
 8007964:	21b5      	movs	r1, #181	; 0xb5
 8007966:	f000 fb69 	bl	800803c <__assert_func>
 800796a:	6922      	ldr	r2, [r4, #16]
 800796c:	3202      	adds	r2, #2
 800796e:	f104 010c 	add.w	r1, r4, #12
 8007972:	0092      	lsls	r2, r2, #2
 8007974:	300c      	adds	r0, #12
 8007976:	f7fe fa0c 	bl	8005d92 <memcpy>
 800797a:	4621      	mov	r1, r4
 800797c:	4638      	mov	r0, r7
 800797e:	f7ff ffa5 	bl	80078cc <_Bfree>
 8007982:	4644      	mov	r4, r8
 8007984:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007988:	3501      	adds	r5, #1
 800798a:	615e      	str	r6, [r3, #20]
 800798c:	6125      	str	r5, [r4, #16]
 800798e:	4620      	mov	r0, r4
 8007990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007994:	080089a7 	.word	0x080089a7
 8007998:	080089b8 	.word	0x080089b8

0800799c <__hi0bits>:
 800799c:	0c03      	lsrs	r3, r0, #16
 800799e:	041b      	lsls	r3, r3, #16
 80079a0:	b9d3      	cbnz	r3, 80079d8 <__hi0bits+0x3c>
 80079a2:	0400      	lsls	r0, r0, #16
 80079a4:	2310      	movs	r3, #16
 80079a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079aa:	bf04      	itt	eq
 80079ac:	0200      	lsleq	r0, r0, #8
 80079ae:	3308      	addeq	r3, #8
 80079b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079b4:	bf04      	itt	eq
 80079b6:	0100      	lsleq	r0, r0, #4
 80079b8:	3304      	addeq	r3, #4
 80079ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079be:	bf04      	itt	eq
 80079c0:	0080      	lsleq	r0, r0, #2
 80079c2:	3302      	addeq	r3, #2
 80079c4:	2800      	cmp	r0, #0
 80079c6:	db05      	blt.n	80079d4 <__hi0bits+0x38>
 80079c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80079cc:	f103 0301 	add.w	r3, r3, #1
 80079d0:	bf08      	it	eq
 80079d2:	2320      	moveq	r3, #32
 80079d4:	4618      	mov	r0, r3
 80079d6:	4770      	bx	lr
 80079d8:	2300      	movs	r3, #0
 80079da:	e7e4      	b.n	80079a6 <__hi0bits+0xa>

080079dc <__lo0bits>:
 80079dc:	6803      	ldr	r3, [r0, #0]
 80079de:	f013 0207 	ands.w	r2, r3, #7
 80079e2:	4601      	mov	r1, r0
 80079e4:	d00b      	beq.n	80079fe <__lo0bits+0x22>
 80079e6:	07da      	lsls	r2, r3, #31
 80079e8:	d423      	bmi.n	8007a32 <__lo0bits+0x56>
 80079ea:	0798      	lsls	r0, r3, #30
 80079ec:	bf49      	itett	mi
 80079ee:	085b      	lsrmi	r3, r3, #1
 80079f0:	089b      	lsrpl	r3, r3, #2
 80079f2:	2001      	movmi	r0, #1
 80079f4:	600b      	strmi	r3, [r1, #0]
 80079f6:	bf5c      	itt	pl
 80079f8:	600b      	strpl	r3, [r1, #0]
 80079fa:	2002      	movpl	r0, #2
 80079fc:	4770      	bx	lr
 80079fe:	b298      	uxth	r0, r3
 8007a00:	b9a8      	cbnz	r0, 8007a2e <__lo0bits+0x52>
 8007a02:	0c1b      	lsrs	r3, r3, #16
 8007a04:	2010      	movs	r0, #16
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	b90a      	cbnz	r2, 8007a0e <__lo0bits+0x32>
 8007a0a:	3008      	adds	r0, #8
 8007a0c:	0a1b      	lsrs	r3, r3, #8
 8007a0e:	071a      	lsls	r2, r3, #28
 8007a10:	bf04      	itt	eq
 8007a12:	091b      	lsreq	r3, r3, #4
 8007a14:	3004      	addeq	r0, #4
 8007a16:	079a      	lsls	r2, r3, #30
 8007a18:	bf04      	itt	eq
 8007a1a:	089b      	lsreq	r3, r3, #2
 8007a1c:	3002      	addeq	r0, #2
 8007a1e:	07da      	lsls	r2, r3, #31
 8007a20:	d403      	bmi.n	8007a2a <__lo0bits+0x4e>
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	f100 0001 	add.w	r0, r0, #1
 8007a28:	d005      	beq.n	8007a36 <__lo0bits+0x5a>
 8007a2a:	600b      	str	r3, [r1, #0]
 8007a2c:	4770      	bx	lr
 8007a2e:	4610      	mov	r0, r2
 8007a30:	e7e9      	b.n	8007a06 <__lo0bits+0x2a>
 8007a32:	2000      	movs	r0, #0
 8007a34:	4770      	bx	lr
 8007a36:	2020      	movs	r0, #32
 8007a38:	4770      	bx	lr
	...

08007a3c <__i2b>:
 8007a3c:	b510      	push	{r4, lr}
 8007a3e:	460c      	mov	r4, r1
 8007a40:	2101      	movs	r1, #1
 8007a42:	f7ff ff03 	bl	800784c <_Balloc>
 8007a46:	4602      	mov	r2, r0
 8007a48:	b928      	cbnz	r0, 8007a56 <__i2b+0x1a>
 8007a4a:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <__i2b+0x24>)
 8007a4c:	4805      	ldr	r0, [pc, #20]	; (8007a64 <__i2b+0x28>)
 8007a4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a52:	f000 faf3 	bl	800803c <__assert_func>
 8007a56:	2301      	movs	r3, #1
 8007a58:	6144      	str	r4, [r0, #20]
 8007a5a:	6103      	str	r3, [r0, #16]
 8007a5c:	bd10      	pop	{r4, pc}
 8007a5e:	bf00      	nop
 8007a60:	080089a7 	.word	0x080089a7
 8007a64:	080089b8 	.word	0x080089b8

08007a68 <__multiply>:
 8007a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6c:	4691      	mov	r9, r2
 8007a6e:	690a      	ldr	r2, [r1, #16]
 8007a70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	bfb8      	it	lt
 8007a78:	460b      	movlt	r3, r1
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	bfbc      	itt	lt
 8007a7e:	464c      	movlt	r4, r9
 8007a80:	4699      	movlt	r9, r3
 8007a82:	6927      	ldr	r7, [r4, #16]
 8007a84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a88:	68a3      	ldr	r3, [r4, #8]
 8007a8a:	6861      	ldr	r1, [r4, #4]
 8007a8c:	eb07 060a 	add.w	r6, r7, sl
 8007a90:	42b3      	cmp	r3, r6
 8007a92:	b085      	sub	sp, #20
 8007a94:	bfb8      	it	lt
 8007a96:	3101      	addlt	r1, #1
 8007a98:	f7ff fed8 	bl	800784c <_Balloc>
 8007a9c:	b930      	cbnz	r0, 8007aac <__multiply+0x44>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	4b44      	ldr	r3, [pc, #272]	; (8007bb4 <__multiply+0x14c>)
 8007aa2:	4845      	ldr	r0, [pc, #276]	; (8007bb8 <__multiply+0x150>)
 8007aa4:	f240 115d 	movw	r1, #349	; 0x15d
 8007aa8:	f000 fac8 	bl	800803c <__assert_func>
 8007aac:	f100 0514 	add.w	r5, r0, #20
 8007ab0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ab4:	462b      	mov	r3, r5
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	4543      	cmp	r3, r8
 8007aba:	d321      	bcc.n	8007b00 <__multiply+0x98>
 8007abc:	f104 0314 	add.w	r3, r4, #20
 8007ac0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ac4:	f109 0314 	add.w	r3, r9, #20
 8007ac8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007acc:	9202      	str	r2, [sp, #8]
 8007ace:	1b3a      	subs	r2, r7, r4
 8007ad0:	3a15      	subs	r2, #21
 8007ad2:	f022 0203 	bic.w	r2, r2, #3
 8007ad6:	3204      	adds	r2, #4
 8007ad8:	f104 0115 	add.w	r1, r4, #21
 8007adc:	428f      	cmp	r7, r1
 8007ade:	bf38      	it	cc
 8007ae0:	2204      	movcc	r2, #4
 8007ae2:	9201      	str	r2, [sp, #4]
 8007ae4:	9a02      	ldr	r2, [sp, #8]
 8007ae6:	9303      	str	r3, [sp, #12]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d80c      	bhi.n	8007b06 <__multiply+0x9e>
 8007aec:	2e00      	cmp	r6, #0
 8007aee:	dd03      	ble.n	8007af8 <__multiply+0x90>
 8007af0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d05a      	beq.n	8007bae <__multiply+0x146>
 8007af8:	6106      	str	r6, [r0, #16]
 8007afa:	b005      	add	sp, #20
 8007afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b00:	f843 2b04 	str.w	r2, [r3], #4
 8007b04:	e7d8      	b.n	8007ab8 <__multiply+0x50>
 8007b06:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b0a:	f1ba 0f00 	cmp.w	sl, #0
 8007b0e:	d024      	beq.n	8007b5a <__multiply+0xf2>
 8007b10:	f104 0e14 	add.w	lr, r4, #20
 8007b14:	46a9      	mov	r9, r5
 8007b16:	f04f 0c00 	mov.w	ip, #0
 8007b1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b1e:	f8d9 1000 	ldr.w	r1, [r9]
 8007b22:	fa1f fb82 	uxth.w	fp, r2
 8007b26:	b289      	uxth	r1, r1
 8007b28:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b30:	f8d9 2000 	ldr.w	r2, [r9]
 8007b34:	4461      	add	r1, ip
 8007b36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b3a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b42:	b289      	uxth	r1, r1
 8007b44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b48:	4577      	cmp	r7, lr
 8007b4a:	f849 1b04 	str.w	r1, [r9], #4
 8007b4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b52:	d8e2      	bhi.n	8007b1a <__multiply+0xb2>
 8007b54:	9a01      	ldr	r2, [sp, #4]
 8007b56:	f845 c002 	str.w	ip, [r5, r2]
 8007b5a:	9a03      	ldr	r2, [sp, #12]
 8007b5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b60:	3304      	adds	r3, #4
 8007b62:	f1b9 0f00 	cmp.w	r9, #0
 8007b66:	d020      	beq.n	8007baa <__multiply+0x142>
 8007b68:	6829      	ldr	r1, [r5, #0]
 8007b6a:	f104 0c14 	add.w	ip, r4, #20
 8007b6e:	46ae      	mov	lr, r5
 8007b70:	f04f 0a00 	mov.w	sl, #0
 8007b74:	f8bc b000 	ldrh.w	fp, [ip]
 8007b78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b7c:	fb09 220b 	mla	r2, r9, fp, r2
 8007b80:	4492      	add	sl, r2
 8007b82:	b289      	uxth	r1, r1
 8007b84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007b88:	f84e 1b04 	str.w	r1, [lr], #4
 8007b8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b90:	f8be 1000 	ldrh.w	r1, [lr]
 8007b94:	0c12      	lsrs	r2, r2, #16
 8007b96:	fb09 1102 	mla	r1, r9, r2, r1
 8007b9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007b9e:	4567      	cmp	r7, ip
 8007ba0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ba4:	d8e6      	bhi.n	8007b74 <__multiply+0x10c>
 8007ba6:	9a01      	ldr	r2, [sp, #4]
 8007ba8:	50a9      	str	r1, [r5, r2]
 8007baa:	3504      	adds	r5, #4
 8007bac:	e79a      	b.n	8007ae4 <__multiply+0x7c>
 8007bae:	3e01      	subs	r6, #1
 8007bb0:	e79c      	b.n	8007aec <__multiply+0x84>
 8007bb2:	bf00      	nop
 8007bb4:	080089a7 	.word	0x080089a7
 8007bb8:	080089b8 	.word	0x080089b8

08007bbc <__pow5mult>:
 8007bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc0:	4615      	mov	r5, r2
 8007bc2:	f012 0203 	ands.w	r2, r2, #3
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	460f      	mov	r7, r1
 8007bca:	d007      	beq.n	8007bdc <__pow5mult+0x20>
 8007bcc:	4c25      	ldr	r4, [pc, #148]	; (8007c64 <__pow5mult+0xa8>)
 8007bce:	3a01      	subs	r2, #1
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bd6:	f7ff fe9b 	bl	8007910 <__multadd>
 8007bda:	4607      	mov	r7, r0
 8007bdc:	10ad      	asrs	r5, r5, #2
 8007bde:	d03d      	beq.n	8007c5c <__pow5mult+0xa0>
 8007be0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007be2:	b97c      	cbnz	r4, 8007c04 <__pow5mult+0x48>
 8007be4:	2010      	movs	r0, #16
 8007be6:	f7ff fe1d 	bl	8007824 <malloc>
 8007bea:	4602      	mov	r2, r0
 8007bec:	6270      	str	r0, [r6, #36]	; 0x24
 8007bee:	b928      	cbnz	r0, 8007bfc <__pow5mult+0x40>
 8007bf0:	4b1d      	ldr	r3, [pc, #116]	; (8007c68 <__pow5mult+0xac>)
 8007bf2:	481e      	ldr	r0, [pc, #120]	; (8007c6c <__pow5mult+0xb0>)
 8007bf4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007bf8:	f000 fa20 	bl	800803c <__assert_func>
 8007bfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c00:	6004      	str	r4, [r0, #0]
 8007c02:	60c4      	str	r4, [r0, #12]
 8007c04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c0c:	b94c      	cbnz	r4, 8007c22 <__pow5mult+0x66>
 8007c0e:	f240 2171 	movw	r1, #625	; 0x271
 8007c12:	4630      	mov	r0, r6
 8007c14:	f7ff ff12 	bl	8007a3c <__i2b>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c1e:	4604      	mov	r4, r0
 8007c20:	6003      	str	r3, [r0, #0]
 8007c22:	f04f 0900 	mov.w	r9, #0
 8007c26:	07eb      	lsls	r3, r5, #31
 8007c28:	d50a      	bpl.n	8007c40 <__pow5mult+0x84>
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	4622      	mov	r2, r4
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7ff ff1a 	bl	8007a68 <__multiply>
 8007c34:	4639      	mov	r1, r7
 8007c36:	4680      	mov	r8, r0
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f7ff fe47 	bl	80078cc <_Bfree>
 8007c3e:	4647      	mov	r7, r8
 8007c40:	106d      	asrs	r5, r5, #1
 8007c42:	d00b      	beq.n	8007c5c <__pow5mult+0xa0>
 8007c44:	6820      	ldr	r0, [r4, #0]
 8007c46:	b938      	cbnz	r0, 8007c58 <__pow5mult+0x9c>
 8007c48:	4622      	mov	r2, r4
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7ff ff0b 	bl	8007a68 <__multiply>
 8007c52:	6020      	str	r0, [r4, #0]
 8007c54:	f8c0 9000 	str.w	r9, [r0]
 8007c58:	4604      	mov	r4, r0
 8007c5a:	e7e4      	b.n	8007c26 <__pow5mult+0x6a>
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c62:	bf00      	nop
 8007c64:	08008b08 	.word	0x08008b08
 8007c68:	08008935 	.word	0x08008935
 8007c6c:	080089b8 	.word	0x080089b8

08007c70 <__lshift>:
 8007c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c74:	460c      	mov	r4, r1
 8007c76:	6849      	ldr	r1, [r1, #4]
 8007c78:	6923      	ldr	r3, [r4, #16]
 8007c7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	4607      	mov	r7, r0
 8007c82:	4691      	mov	r9, r2
 8007c84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c88:	f108 0601 	add.w	r6, r8, #1
 8007c8c:	42b3      	cmp	r3, r6
 8007c8e:	db0b      	blt.n	8007ca8 <__lshift+0x38>
 8007c90:	4638      	mov	r0, r7
 8007c92:	f7ff fddb 	bl	800784c <_Balloc>
 8007c96:	4605      	mov	r5, r0
 8007c98:	b948      	cbnz	r0, 8007cae <__lshift+0x3e>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	4b2a      	ldr	r3, [pc, #168]	; (8007d48 <__lshift+0xd8>)
 8007c9e:	482b      	ldr	r0, [pc, #172]	; (8007d4c <__lshift+0xdc>)
 8007ca0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ca4:	f000 f9ca 	bl	800803c <__assert_func>
 8007ca8:	3101      	adds	r1, #1
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	e7ee      	b.n	8007c8c <__lshift+0x1c>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	f100 0114 	add.w	r1, r0, #20
 8007cb4:	f100 0210 	add.w	r2, r0, #16
 8007cb8:	4618      	mov	r0, r3
 8007cba:	4553      	cmp	r3, sl
 8007cbc:	db37      	blt.n	8007d2e <__lshift+0xbe>
 8007cbe:	6920      	ldr	r0, [r4, #16]
 8007cc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cc4:	f104 0314 	add.w	r3, r4, #20
 8007cc8:	f019 091f 	ands.w	r9, r9, #31
 8007ccc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007cd4:	d02f      	beq.n	8007d36 <__lshift+0xc6>
 8007cd6:	f1c9 0e20 	rsb	lr, r9, #32
 8007cda:	468a      	mov	sl, r1
 8007cdc:	f04f 0c00 	mov.w	ip, #0
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	fa02 f209 	lsl.w	r2, r2, r9
 8007ce6:	ea42 020c 	orr.w	r2, r2, ip
 8007cea:	f84a 2b04 	str.w	r2, [sl], #4
 8007cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf2:	4298      	cmp	r0, r3
 8007cf4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007cf8:	d8f2      	bhi.n	8007ce0 <__lshift+0x70>
 8007cfa:	1b03      	subs	r3, r0, r4
 8007cfc:	3b15      	subs	r3, #21
 8007cfe:	f023 0303 	bic.w	r3, r3, #3
 8007d02:	3304      	adds	r3, #4
 8007d04:	f104 0215 	add.w	r2, r4, #21
 8007d08:	4290      	cmp	r0, r2
 8007d0a:	bf38      	it	cc
 8007d0c:	2304      	movcc	r3, #4
 8007d0e:	f841 c003 	str.w	ip, [r1, r3]
 8007d12:	f1bc 0f00 	cmp.w	ip, #0
 8007d16:	d001      	beq.n	8007d1c <__lshift+0xac>
 8007d18:	f108 0602 	add.w	r6, r8, #2
 8007d1c:	3e01      	subs	r6, #1
 8007d1e:	4638      	mov	r0, r7
 8007d20:	612e      	str	r6, [r5, #16]
 8007d22:	4621      	mov	r1, r4
 8007d24:	f7ff fdd2 	bl	80078cc <_Bfree>
 8007d28:	4628      	mov	r0, r5
 8007d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d32:	3301      	adds	r3, #1
 8007d34:	e7c1      	b.n	8007cba <__lshift+0x4a>
 8007d36:	3904      	subs	r1, #4
 8007d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d40:	4298      	cmp	r0, r3
 8007d42:	d8f9      	bhi.n	8007d38 <__lshift+0xc8>
 8007d44:	e7ea      	b.n	8007d1c <__lshift+0xac>
 8007d46:	bf00      	nop
 8007d48:	080089a7 	.word	0x080089a7
 8007d4c:	080089b8 	.word	0x080089b8

08007d50 <__mcmp>:
 8007d50:	b530      	push	{r4, r5, lr}
 8007d52:	6902      	ldr	r2, [r0, #16]
 8007d54:	690c      	ldr	r4, [r1, #16]
 8007d56:	1b12      	subs	r2, r2, r4
 8007d58:	d10e      	bne.n	8007d78 <__mcmp+0x28>
 8007d5a:	f100 0314 	add.w	r3, r0, #20
 8007d5e:	3114      	adds	r1, #20
 8007d60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d70:	42a5      	cmp	r5, r4
 8007d72:	d003      	beq.n	8007d7c <__mcmp+0x2c>
 8007d74:	d305      	bcc.n	8007d82 <__mcmp+0x32>
 8007d76:	2201      	movs	r2, #1
 8007d78:	4610      	mov	r0, r2
 8007d7a:	bd30      	pop	{r4, r5, pc}
 8007d7c:	4283      	cmp	r3, r0
 8007d7e:	d3f3      	bcc.n	8007d68 <__mcmp+0x18>
 8007d80:	e7fa      	b.n	8007d78 <__mcmp+0x28>
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d86:	e7f7      	b.n	8007d78 <__mcmp+0x28>

08007d88 <__mdiff>:
 8007d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	4606      	mov	r6, r0
 8007d90:	4611      	mov	r1, r2
 8007d92:	4620      	mov	r0, r4
 8007d94:	4690      	mov	r8, r2
 8007d96:	f7ff ffdb 	bl	8007d50 <__mcmp>
 8007d9a:	1e05      	subs	r5, r0, #0
 8007d9c:	d110      	bne.n	8007dc0 <__mdiff+0x38>
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4630      	mov	r0, r6
 8007da2:	f7ff fd53 	bl	800784c <_Balloc>
 8007da6:	b930      	cbnz	r0, 8007db6 <__mdiff+0x2e>
 8007da8:	4b3a      	ldr	r3, [pc, #232]	; (8007e94 <__mdiff+0x10c>)
 8007daa:	4602      	mov	r2, r0
 8007dac:	f240 2132 	movw	r1, #562	; 0x232
 8007db0:	4839      	ldr	r0, [pc, #228]	; (8007e98 <__mdiff+0x110>)
 8007db2:	f000 f943 	bl	800803c <__assert_func>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc0:	bfa4      	itt	ge
 8007dc2:	4643      	movge	r3, r8
 8007dc4:	46a0      	movge	r8, r4
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007dcc:	bfa6      	itte	ge
 8007dce:	461c      	movge	r4, r3
 8007dd0:	2500      	movge	r5, #0
 8007dd2:	2501      	movlt	r5, #1
 8007dd4:	f7ff fd3a 	bl	800784c <_Balloc>
 8007dd8:	b920      	cbnz	r0, 8007de4 <__mdiff+0x5c>
 8007dda:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <__mdiff+0x10c>)
 8007ddc:	4602      	mov	r2, r0
 8007dde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007de2:	e7e5      	b.n	8007db0 <__mdiff+0x28>
 8007de4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007de8:	6926      	ldr	r6, [r4, #16]
 8007dea:	60c5      	str	r5, [r0, #12]
 8007dec:	f104 0914 	add.w	r9, r4, #20
 8007df0:	f108 0514 	add.w	r5, r8, #20
 8007df4:	f100 0e14 	add.w	lr, r0, #20
 8007df8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007dfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e00:	f108 0210 	add.w	r2, r8, #16
 8007e04:	46f2      	mov	sl, lr
 8007e06:	2100      	movs	r1, #0
 8007e08:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e10:	fa1f f883 	uxth.w	r8, r3
 8007e14:	fa11 f18b 	uxtah	r1, r1, fp
 8007e18:	0c1b      	lsrs	r3, r3, #16
 8007e1a:	eba1 0808 	sub.w	r8, r1, r8
 8007e1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e26:	fa1f f888 	uxth.w	r8, r8
 8007e2a:	1419      	asrs	r1, r3, #16
 8007e2c:	454e      	cmp	r6, r9
 8007e2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e32:	f84a 3b04 	str.w	r3, [sl], #4
 8007e36:	d8e7      	bhi.n	8007e08 <__mdiff+0x80>
 8007e38:	1b33      	subs	r3, r6, r4
 8007e3a:	3b15      	subs	r3, #21
 8007e3c:	f023 0303 	bic.w	r3, r3, #3
 8007e40:	3304      	adds	r3, #4
 8007e42:	3415      	adds	r4, #21
 8007e44:	42a6      	cmp	r6, r4
 8007e46:	bf38      	it	cc
 8007e48:	2304      	movcc	r3, #4
 8007e4a:	441d      	add	r5, r3
 8007e4c:	4473      	add	r3, lr
 8007e4e:	469e      	mov	lr, r3
 8007e50:	462e      	mov	r6, r5
 8007e52:	4566      	cmp	r6, ip
 8007e54:	d30e      	bcc.n	8007e74 <__mdiff+0xec>
 8007e56:	f10c 0203 	add.w	r2, ip, #3
 8007e5a:	1b52      	subs	r2, r2, r5
 8007e5c:	f022 0203 	bic.w	r2, r2, #3
 8007e60:	3d03      	subs	r5, #3
 8007e62:	45ac      	cmp	ip, r5
 8007e64:	bf38      	it	cc
 8007e66:	2200      	movcc	r2, #0
 8007e68:	441a      	add	r2, r3
 8007e6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007e6e:	b17b      	cbz	r3, 8007e90 <__mdiff+0x108>
 8007e70:	6107      	str	r7, [r0, #16]
 8007e72:	e7a3      	b.n	8007dbc <__mdiff+0x34>
 8007e74:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e78:	fa11 f288 	uxtah	r2, r1, r8
 8007e7c:	1414      	asrs	r4, r2, #16
 8007e7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e82:	b292      	uxth	r2, r2
 8007e84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e88:	f84e 2b04 	str.w	r2, [lr], #4
 8007e8c:	1421      	asrs	r1, r4, #16
 8007e8e:	e7e0      	b.n	8007e52 <__mdiff+0xca>
 8007e90:	3f01      	subs	r7, #1
 8007e92:	e7ea      	b.n	8007e6a <__mdiff+0xe2>
 8007e94:	080089a7 	.word	0x080089a7
 8007e98:	080089b8 	.word	0x080089b8

08007e9c <__d2b>:
 8007e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ea0:	4689      	mov	r9, r1
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	ec57 6b10 	vmov	r6, r7, d0
 8007ea8:	4690      	mov	r8, r2
 8007eaa:	f7ff fccf 	bl	800784c <_Balloc>
 8007eae:	4604      	mov	r4, r0
 8007eb0:	b930      	cbnz	r0, 8007ec0 <__d2b+0x24>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	4b25      	ldr	r3, [pc, #148]	; (8007f4c <__d2b+0xb0>)
 8007eb6:	4826      	ldr	r0, [pc, #152]	; (8007f50 <__d2b+0xb4>)
 8007eb8:	f240 310a 	movw	r1, #778	; 0x30a
 8007ebc:	f000 f8be 	bl	800803c <__assert_func>
 8007ec0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007ec4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ec8:	bb35      	cbnz	r5, 8007f18 <__d2b+0x7c>
 8007eca:	2e00      	cmp	r6, #0
 8007ecc:	9301      	str	r3, [sp, #4]
 8007ece:	d028      	beq.n	8007f22 <__d2b+0x86>
 8007ed0:	4668      	mov	r0, sp
 8007ed2:	9600      	str	r6, [sp, #0]
 8007ed4:	f7ff fd82 	bl	80079dc <__lo0bits>
 8007ed8:	9900      	ldr	r1, [sp, #0]
 8007eda:	b300      	cbz	r0, 8007f1e <__d2b+0x82>
 8007edc:	9a01      	ldr	r2, [sp, #4]
 8007ede:	f1c0 0320 	rsb	r3, r0, #32
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	430b      	orrs	r3, r1
 8007ee8:	40c2      	lsrs	r2, r0
 8007eea:	6163      	str	r3, [r4, #20]
 8007eec:	9201      	str	r2, [sp, #4]
 8007eee:	9b01      	ldr	r3, [sp, #4]
 8007ef0:	61a3      	str	r3, [r4, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bf14      	ite	ne
 8007ef6:	2202      	movne	r2, #2
 8007ef8:	2201      	moveq	r2, #1
 8007efa:	6122      	str	r2, [r4, #16]
 8007efc:	b1d5      	cbz	r5, 8007f34 <__d2b+0x98>
 8007efe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f02:	4405      	add	r5, r0
 8007f04:	f8c9 5000 	str.w	r5, [r9]
 8007f08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f0c:	f8c8 0000 	str.w	r0, [r8]
 8007f10:	4620      	mov	r0, r4
 8007f12:	b003      	add	sp, #12
 8007f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f1c:	e7d5      	b.n	8007eca <__d2b+0x2e>
 8007f1e:	6161      	str	r1, [r4, #20]
 8007f20:	e7e5      	b.n	8007eee <__d2b+0x52>
 8007f22:	a801      	add	r0, sp, #4
 8007f24:	f7ff fd5a 	bl	80079dc <__lo0bits>
 8007f28:	9b01      	ldr	r3, [sp, #4]
 8007f2a:	6163      	str	r3, [r4, #20]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	6122      	str	r2, [r4, #16]
 8007f30:	3020      	adds	r0, #32
 8007f32:	e7e3      	b.n	8007efc <__d2b+0x60>
 8007f34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f3c:	f8c9 0000 	str.w	r0, [r9]
 8007f40:	6918      	ldr	r0, [r3, #16]
 8007f42:	f7ff fd2b 	bl	800799c <__hi0bits>
 8007f46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f4a:	e7df      	b.n	8007f0c <__d2b+0x70>
 8007f4c:	080089a7 	.word	0x080089a7
 8007f50:	080089b8 	.word	0x080089b8

08007f54 <_calloc_r>:
 8007f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f56:	fba1 2402 	umull	r2, r4, r1, r2
 8007f5a:	b94c      	cbnz	r4, 8007f70 <_calloc_r+0x1c>
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	9201      	str	r2, [sp, #4]
 8007f60:	f7fd ff4e 	bl	8005e00 <_malloc_r>
 8007f64:	9a01      	ldr	r2, [sp, #4]
 8007f66:	4605      	mov	r5, r0
 8007f68:	b930      	cbnz	r0, 8007f78 <_calloc_r+0x24>
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	b003      	add	sp, #12
 8007f6e:	bd30      	pop	{r4, r5, pc}
 8007f70:	220c      	movs	r2, #12
 8007f72:	6002      	str	r2, [r0, #0]
 8007f74:	2500      	movs	r5, #0
 8007f76:	e7f8      	b.n	8007f6a <_calloc_r+0x16>
 8007f78:	4621      	mov	r1, r4
 8007f7a:	f7fd ff18 	bl	8005dae <memset>
 8007f7e:	e7f4      	b.n	8007f6a <_calloc_r+0x16>

08007f80 <_free_r>:
 8007f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f82:	2900      	cmp	r1, #0
 8007f84:	d044      	beq.n	8008010 <_free_r+0x90>
 8007f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f8a:	9001      	str	r0, [sp, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f92:	bfb8      	it	lt
 8007f94:	18e4      	addlt	r4, r4, r3
 8007f96:	f7ff fc4d 	bl	8007834 <__malloc_lock>
 8007f9a:	4a1e      	ldr	r2, [pc, #120]	; (8008014 <_free_r+0x94>)
 8007f9c:	9801      	ldr	r0, [sp, #4]
 8007f9e:	6813      	ldr	r3, [r2, #0]
 8007fa0:	b933      	cbnz	r3, 8007fb0 <_free_r+0x30>
 8007fa2:	6063      	str	r3, [r4, #4]
 8007fa4:	6014      	str	r4, [r2, #0]
 8007fa6:	b003      	add	sp, #12
 8007fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fac:	f7ff bc48 	b.w	8007840 <__malloc_unlock>
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	d908      	bls.n	8007fc6 <_free_r+0x46>
 8007fb4:	6825      	ldr	r5, [r4, #0]
 8007fb6:	1961      	adds	r1, r4, r5
 8007fb8:	428b      	cmp	r3, r1
 8007fba:	bf01      	itttt	eq
 8007fbc:	6819      	ldreq	r1, [r3, #0]
 8007fbe:	685b      	ldreq	r3, [r3, #4]
 8007fc0:	1949      	addeq	r1, r1, r5
 8007fc2:	6021      	streq	r1, [r4, #0]
 8007fc4:	e7ed      	b.n	8007fa2 <_free_r+0x22>
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	b10b      	cbz	r3, 8007fd0 <_free_r+0x50>
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	d9fa      	bls.n	8007fc6 <_free_r+0x46>
 8007fd0:	6811      	ldr	r1, [r2, #0]
 8007fd2:	1855      	adds	r5, r2, r1
 8007fd4:	42a5      	cmp	r5, r4
 8007fd6:	d10b      	bne.n	8007ff0 <_free_r+0x70>
 8007fd8:	6824      	ldr	r4, [r4, #0]
 8007fda:	4421      	add	r1, r4
 8007fdc:	1854      	adds	r4, r2, r1
 8007fde:	42a3      	cmp	r3, r4
 8007fe0:	6011      	str	r1, [r2, #0]
 8007fe2:	d1e0      	bne.n	8007fa6 <_free_r+0x26>
 8007fe4:	681c      	ldr	r4, [r3, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	6053      	str	r3, [r2, #4]
 8007fea:	4421      	add	r1, r4
 8007fec:	6011      	str	r1, [r2, #0]
 8007fee:	e7da      	b.n	8007fa6 <_free_r+0x26>
 8007ff0:	d902      	bls.n	8007ff8 <_free_r+0x78>
 8007ff2:	230c      	movs	r3, #12
 8007ff4:	6003      	str	r3, [r0, #0]
 8007ff6:	e7d6      	b.n	8007fa6 <_free_r+0x26>
 8007ff8:	6825      	ldr	r5, [r4, #0]
 8007ffa:	1961      	adds	r1, r4, r5
 8007ffc:	428b      	cmp	r3, r1
 8007ffe:	bf04      	itt	eq
 8008000:	6819      	ldreq	r1, [r3, #0]
 8008002:	685b      	ldreq	r3, [r3, #4]
 8008004:	6063      	str	r3, [r4, #4]
 8008006:	bf04      	itt	eq
 8008008:	1949      	addeq	r1, r1, r5
 800800a:	6021      	streq	r1, [r4, #0]
 800800c:	6054      	str	r4, [r2, #4]
 800800e:	e7ca      	b.n	8007fa6 <_free_r+0x26>
 8008010:	b003      	add	sp, #12
 8008012:	bd30      	pop	{r4, r5, pc}
 8008014:	200042b4 	.word	0x200042b4

08008018 <_read_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4d07      	ldr	r5, [pc, #28]	; (8008038 <_read_r+0x20>)
 800801c:	4604      	mov	r4, r0
 800801e:	4608      	mov	r0, r1
 8008020:	4611      	mov	r1, r2
 8008022:	2200      	movs	r2, #0
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	f7f9 fb2c 	bl	8001684 <_read>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_read_r+0x1e>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_read_r+0x1e>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	200042bc 	.word	0x200042bc

0800803c <__assert_func>:
 800803c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800803e:	4614      	mov	r4, r2
 8008040:	461a      	mov	r2, r3
 8008042:	4b09      	ldr	r3, [pc, #36]	; (8008068 <__assert_func+0x2c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4605      	mov	r5, r0
 8008048:	68d8      	ldr	r0, [r3, #12]
 800804a:	b14c      	cbz	r4, 8008060 <__assert_func+0x24>
 800804c:	4b07      	ldr	r3, [pc, #28]	; (800806c <__assert_func+0x30>)
 800804e:	9100      	str	r1, [sp, #0]
 8008050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008054:	4906      	ldr	r1, [pc, #24]	; (8008070 <__assert_func+0x34>)
 8008056:	462b      	mov	r3, r5
 8008058:	f000 f80e 	bl	8008078 <fiprintf>
 800805c:	f000 fa58 	bl	8008510 <abort>
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <__assert_func+0x38>)
 8008062:	461c      	mov	r4, r3
 8008064:	e7f3      	b.n	800804e <__assert_func+0x12>
 8008066:	bf00      	nop
 8008068:	20000014 	.word	0x20000014
 800806c:	08008b14 	.word	0x08008b14
 8008070:	08008b21 	.word	0x08008b21
 8008074:	08008b4f 	.word	0x08008b4f

08008078 <fiprintf>:
 8008078:	b40e      	push	{r1, r2, r3}
 800807a:	b503      	push	{r0, r1, lr}
 800807c:	4601      	mov	r1, r0
 800807e:	ab03      	add	r3, sp, #12
 8008080:	4805      	ldr	r0, [pc, #20]	; (8008098 <fiprintf+0x20>)
 8008082:	f853 2b04 	ldr.w	r2, [r3], #4
 8008086:	6800      	ldr	r0, [r0, #0]
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	f000 f843 	bl	8008114 <_vfiprintf_r>
 800808e:	b002      	add	sp, #8
 8008090:	f85d eb04 	ldr.w	lr, [sp], #4
 8008094:	b003      	add	sp, #12
 8008096:	4770      	bx	lr
 8008098:	20000014 	.word	0x20000014

0800809c <__ascii_mbtowc>:
 800809c:	b082      	sub	sp, #8
 800809e:	b901      	cbnz	r1, 80080a2 <__ascii_mbtowc+0x6>
 80080a0:	a901      	add	r1, sp, #4
 80080a2:	b142      	cbz	r2, 80080b6 <__ascii_mbtowc+0x1a>
 80080a4:	b14b      	cbz	r3, 80080ba <__ascii_mbtowc+0x1e>
 80080a6:	7813      	ldrb	r3, [r2, #0]
 80080a8:	600b      	str	r3, [r1, #0]
 80080aa:	7812      	ldrb	r2, [r2, #0]
 80080ac:	1e10      	subs	r0, r2, #0
 80080ae:	bf18      	it	ne
 80080b0:	2001      	movne	r0, #1
 80080b2:	b002      	add	sp, #8
 80080b4:	4770      	bx	lr
 80080b6:	4610      	mov	r0, r2
 80080b8:	e7fb      	b.n	80080b2 <__ascii_mbtowc+0x16>
 80080ba:	f06f 0001 	mvn.w	r0, #1
 80080be:	e7f8      	b.n	80080b2 <__ascii_mbtowc+0x16>

080080c0 <__sfputc_r>:
 80080c0:	6893      	ldr	r3, [r2, #8]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	b410      	push	{r4}
 80080c8:	6093      	str	r3, [r2, #8]
 80080ca:	da08      	bge.n	80080de <__sfputc_r+0x1e>
 80080cc:	6994      	ldr	r4, [r2, #24]
 80080ce:	42a3      	cmp	r3, r4
 80080d0:	db01      	blt.n	80080d6 <__sfputc_r+0x16>
 80080d2:	290a      	cmp	r1, #10
 80080d4:	d103      	bne.n	80080de <__sfputc_r+0x1e>
 80080d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080da:	f000 b94b 	b.w	8008374 <__swbuf_r>
 80080de:	6813      	ldr	r3, [r2, #0]
 80080e0:	1c58      	adds	r0, r3, #1
 80080e2:	6010      	str	r0, [r2, #0]
 80080e4:	7019      	strb	r1, [r3, #0]
 80080e6:	4608      	mov	r0, r1
 80080e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <__sfputs_r>:
 80080ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f0:	4606      	mov	r6, r0
 80080f2:	460f      	mov	r7, r1
 80080f4:	4614      	mov	r4, r2
 80080f6:	18d5      	adds	r5, r2, r3
 80080f8:	42ac      	cmp	r4, r5
 80080fa:	d101      	bne.n	8008100 <__sfputs_r+0x12>
 80080fc:	2000      	movs	r0, #0
 80080fe:	e007      	b.n	8008110 <__sfputs_r+0x22>
 8008100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008104:	463a      	mov	r2, r7
 8008106:	4630      	mov	r0, r6
 8008108:	f7ff ffda 	bl	80080c0 <__sfputc_r>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d1f3      	bne.n	80080f8 <__sfputs_r+0xa>
 8008110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008114 <_vfiprintf_r>:
 8008114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	460d      	mov	r5, r1
 800811a:	b09d      	sub	sp, #116	; 0x74
 800811c:	4614      	mov	r4, r2
 800811e:	4698      	mov	r8, r3
 8008120:	4606      	mov	r6, r0
 8008122:	b118      	cbz	r0, 800812c <_vfiprintf_r+0x18>
 8008124:	6983      	ldr	r3, [r0, #24]
 8008126:	b90b      	cbnz	r3, 800812c <_vfiprintf_r+0x18>
 8008128:	f7fd fd6e 	bl	8005c08 <__sinit>
 800812c:	4b89      	ldr	r3, [pc, #548]	; (8008354 <_vfiprintf_r+0x240>)
 800812e:	429d      	cmp	r5, r3
 8008130:	d11b      	bne.n	800816a <_vfiprintf_r+0x56>
 8008132:	6875      	ldr	r5, [r6, #4]
 8008134:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008136:	07d9      	lsls	r1, r3, #31
 8008138:	d405      	bmi.n	8008146 <_vfiprintf_r+0x32>
 800813a:	89ab      	ldrh	r3, [r5, #12]
 800813c:	059a      	lsls	r2, r3, #22
 800813e:	d402      	bmi.n	8008146 <_vfiprintf_r+0x32>
 8008140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008142:	f7fd fe24 	bl	8005d8e <__retarget_lock_acquire_recursive>
 8008146:	89ab      	ldrh	r3, [r5, #12]
 8008148:	071b      	lsls	r3, r3, #28
 800814a:	d501      	bpl.n	8008150 <_vfiprintf_r+0x3c>
 800814c:	692b      	ldr	r3, [r5, #16]
 800814e:	b9eb      	cbnz	r3, 800818c <_vfiprintf_r+0x78>
 8008150:	4629      	mov	r1, r5
 8008152:	4630      	mov	r0, r6
 8008154:	f000 f96e 	bl	8008434 <__swsetup_r>
 8008158:	b1c0      	cbz	r0, 800818c <_vfiprintf_r+0x78>
 800815a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800815c:	07dc      	lsls	r4, r3, #31
 800815e:	d50e      	bpl.n	800817e <_vfiprintf_r+0x6a>
 8008160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008164:	b01d      	add	sp, #116	; 0x74
 8008166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816a:	4b7b      	ldr	r3, [pc, #492]	; (8008358 <_vfiprintf_r+0x244>)
 800816c:	429d      	cmp	r5, r3
 800816e:	d101      	bne.n	8008174 <_vfiprintf_r+0x60>
 8008170:	68b5      	ldr	r5, [r6, #8]
 8008172:	e7df      	b.n	8008134 <_vfiprintf_r+0x20>
 8008174:	4b79      	ldr	r3, [pc, #484]	; (800835c <_vfiprintf_r+0x248>)
 8008176:	429d      	cmp	r5, r3
 8008178:	bf08      	it	eq
 800817a:	68f5      	ldreq	r5, [r6, #12]
 800817c:	e7da      	b.n	8008134 <_vfiprintf_r+0x20>
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	0598      	lsls	r0, r3, #22
 8008182:	d4ed      	bmi.n	8008160 <_vfiprintf_r+0x4c>
 8008184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008186:	f7fd fe03 	bl	8005d90 <__retarget_lock_release_recursive>
 800818a:	e7e9      	b.n	8008160 <_vfiprintf_r+0x4c>
 800818c:	2300      	movs	r3, #0
 800818e:	9309      	str	r3, [sp, #36]	; 0x24
 8008190:	2320      	movs	r3, #32
 8008192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008196:	f8cd 800c 	str.w	r8, [sp, #12]
 800819a:	2330      	movs	r3, #48	; 0x30
 800819c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008360 <_vfiprintf_r+0x24c>
 80081a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081a4:	f04f 0901 	mov.w	r9, #1
 80081a8:	4623      	mov	r3, r4
 80081aa:	469a      	mov	sl, r3
 80081ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081b0:	b10a      	cbz	r2, 80081b6 <_vfiprintf_r+0xa2>
 80081b2:	2a25      	cmp	r2, #37	; 0x25
 80081b4:	d1f9      	bne.n	80081aa <_vfiprintf_r+0x96>
 80081b6:	ebba 0b04 	subs.w	fp, sl, r4
 80081ba:	d00b      	beq.n	80081d4 <_vfiprintf_r+0xc0>
 80081bc:	465b      	mov	r3, fp
 80081be:	4622      	mov	r2, r4
 80081c0:	4629      	mov	r1, r5
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7ff ff93 	bl	80080ee <__sfputs_r>
 80081c8:	3001      	adds	r0, #1
 80081ca:	f000 80aa 	beq.w	8008322 <_vfiprintf_r+0x20e>
 80081ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d0:	445a      	add	r2, fp
 80081d2:	9209      	str	r2, [sp, #36]	; 0x24
 80081d4:	f89a 3000 	ldrb.w	r3, [sl]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 80a2 	beq.w	8008322 <_vfiprintf_r+0x20e>
 80081de:	2300      	movs	r3, #0
 80081e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e8:	f10a 0a01 	add.w	sl, sl, #1
 80081ec:	9304      	str	r3, [sp, #16]
 80081ee:	9307      	str	r3, [sp, #28]
 80081f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081f4:	931a      	str	r3, [sp, #104]	; 0x68
 80081f6:	4654      	mov	r4, sl
 80081f8:	2205      	movs	r2, #5
 80081fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fe:	4858      	ldr	r0, [pc, #352]	; (8008360 <_vfiprintf_r+0x24c>)
 8008200:	f7f8 f80e 	bl	8000220 <memchr>
 8008204:	9a04      	ldr	r2, [sp, #16]
 8008206:	b9d8      	cbnz	r0, 8008240 <_vfiprintf_r+0x12c>
 8008208:	06d1      	lsls	r1, r2, #27
 800820a:	bf44      	itt	mi
 800820c:	2320      	movmi	r3, #32
 800820e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008212:	0713      	lsls	r3, r2, #28
 8008214:	bf44      	itt	mi
 8008216:	232b      	movmi	r3, #43	; 0x2b
 8008218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800821c:	f89a 3000 	ldrb.w	r3, [sl]
 8008220:	2b2a      	cmp	r3, #42	; 0x2a
 8008222:	d015      	beq.n	8008250 <_vfiprintf_r+0x13c>
 8008224:	9a07      	ldr	r2, [sp, #28]
 8008226:	4654      	mov	r4, sl
 8008228:	2000      	movs	r0, #0
 800822a:	f04f 0c0a 	mov.w	ip, #10
 800822e:	4621      	mov	r1, r4
 8008230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008234:	3b30      	subs	r3, #48	; 0x30
 8008236:	2b09      	cmp	r3, #9
 8008238:	d94e      	bls.n	80082d8 <_vfiprintf_r+0x1c4>
 800823a:	b1b0      	cbz	r0, 800826a <_vfiprintf_r+0x156>
 800823c:	9207      	str	r2, [sp, #28]
 800823e:	e014      	b.n	800826a <_vfiprintf_r+0x156>
 8008240:	eba0 0308 	sub.w	r3, r0, r8
 8008244:	fa09 f303 	lsl.w	r3, r9, r3
 8008248:	4313      	orrs	r3, r2
 800824a:	9304      	str	r3, [sp, #16]
 800824c:	46a2      	mov	sl, r4
 800824e:	e7d2      	b.n	80081f6 <_vfiprintf_r+0xe2>
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	1d19      	adds	r1, r3, #4
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	9103      	str	r1, [sp, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	bfbb      	ittet	lt
 800825c:	425b      	neglt	r3, r3
 800825e:	f042 0202 	orrlt.w	r2, r2, #2
 8008262:	9307      	strge	r3, [sp, #28]
 8008264:	9307      	strlt	r3, [sp, #28]
 8008266:	bfb8      	it	lt
 8008268:	9204      	strlt	r2, [sp, #16]
 800826a:	7823      	ldrb	r3, [r4, #0]
 800826c:	2b2e      	cmp	r3, #46	; 0x2e
 800826e:	d10c      	bne.n	800828a <_vfiprintf_r+0x176>
 8008270:	7863      	ldrb	r3, [r4, #1]
 8008272:	2b2a      	cmp	r3, #42	; 0x2a
 8008274:	d135      	bne.n	80082e2 <_vfiprintf_r+0x1ce>
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	1d1a      	adds	r2, r3, #4
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	9203      	str	r2, [sp, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	bfb8      	it	lt
 8008282:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008286:	3402      	adds	r4, #2
 8008288:	9305      	str	r3, [sp, #20]
 800828a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008370 <_vfiprintf_r+0x25c>
 800828e:	7821      	ldrb	r1, [r4, #0]
 8008290:	2203      	movs	r2, #3
 8008292:	4650      	mov	r0, sl
 8008294:	f7f7 ffc4 	bl	8000220 <memchr>
 8008298:	b140      	cbz	r0, 80082ac <_vfiprintf_r+0x198>
 800829a:	2340      	movs	r3, #64	; 0x40
 800829c:	eba0 000a 	sub.w	r0, r0, sl
 80082a0:	fa03 f000 	lsl.w	r0, r3, r0
 80082a4:	9b04      	ldr	r3, [sp, #16]
 80082a6:	4303      	orrs	r3, r0
 80082a8:	3401      	adds	r4, #1
 80082aa:	9304      	str	r3, [sp, #16]
 80082ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b0:	482c      	ldr	r0, [pc, #176]	; (8008364 <_vfiprintf_r+0x250>)
 80082b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082b6:	2206      	movs	r2, #6
 80082b8:	f7f7 ffb2 	bl	8000220 <memchr>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d03f      	beq.n	8008340 <_vfiprintf_r+0x22c>
 80082c0:	4b29      	ldr	r3, [pc, #164]	; (8008368 <_vfiprintf_r+0x254>)
 80082c2:	bb1b      	cbnz	r3, 800830c <_vfiprintf_r+0x1f8>
 80082c4:	9b03      	ldr	r3, [sp, #12]
 80082c6:	3307      	adds	r3, #7
 80082c8:	f023 0307 	bic.w	r3, r3, #7
 80082cc:	3308      	adds	r3, #8
 80082ce:	9303      	str	r3, [sp, #12]
 80082d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d2:	443b      	add	r3, r7
 80082d4:	9309      	str	r3, [sp, #36]	; 0x24
 80082d6:	e767      	b.n	80081a8 <_vfiprintf_r+0x94>
 80082d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082dc:	460c      	mov	r4, r1
 80082de:	2001      	movs	r0, #1
 80082e0:	e7a5      	b.n	800822e <_vfiprintf_r+0x11a>
 80082e2:	2300      	movs	r3, #0
 80082e4:	3401      	adds	r4, #1
 80082e6:	9305      	str	r3, [sp, #20]
 80082e8:	4619      	mov	r1, r3
 80082ea:	f04f 0c0a 	mov.w	ip, #10
 80082ee:	4620      	mov	r0, r4
 80082f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082f4:	3a30      	subs	r2, #48	; 0x30
 80082f6:	2a09      	cmp	r2, #9
 80082f8:	d903      	bls.n	8008302 <_vfiprintf_r+0x1ee>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0c5      	beq.n	800828a <_vfiprintf_r+0x176>
 80082fe:	9105      	str	r1, [sp, #20]
 8008300:	e7c3      	b.n	800828a <_vfiprintf_r+0x176>
 8008302:	fb0c 2101 	mla	r1, ip, r1, r2
 8008306:	4604      	mov	r4, r0
 8008308:	2301      	movs	r3, #1
 800830a:	e7f0      	b.n	80082ee <_vfiprintf_r+0x1da>
 800830c:	ab03      	add	r3, sp, #12
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	462a      	mov	r2, r5
 8008312:	4b16      	ldr	r3, [pc, #88]	; (800836c <_vfiprintf_r+0x258>)
 8008314:	a904      	add	r1, sp, #16
 8008316:	4630      	mov	r0, r6
 8008318:	f7fd fe86 	bl	8006028 <_printf_float>
 800831c:	4607      	mov	r7, r0
 800831e:	1c78      	adds	r0, r7, #1
 8008320:	d1d6      	bne.n	80082d0 <_vfiprintf_r+0x1bc>
 8008322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008324:	07d9      	lsls	r1, r3, #31
 8008326:	d405      	bmi.n	8008334 <_vfiprintf_r+0x220>
 8008328:	89ab      	ldrh	r3, [r5, #12]
 800832a:	059a      	lsls	r2, r3, #22
 800832c:	d402      	bmi.n	8008334 <_vfiprintf_r+0x220>
 800832e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008330:	f7fd fd2e 	bl	8005d90 <__retarget_lock_release_recursive>
 8008334:	89ab      	ldrh	r3, [r5, #12]
 8008336:	065b      	lsls	r3, r3, #25
 8008338:	f53f af12 	bmi.w	8008160 <_vfiprintf_r+0x4c>
 800833c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800833e:	e711      	b.n	8008164 <_vfiprintf_r+0x50>
 8008340:	ab03      	add	r3, sp, #12
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	462a      	mov	r2, r5
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <_vfiprintf_r+0x258>)
 8008348:	a904      	add	r1, sp, #16
 800834a:	4630      	mov	r0, r6
 800834c:	f7fe f910 	bl	8006570 <_printf_i>
 8008350:	e7e4      	b.n	800831c <_vfiprintf_r+0x208>
 8008352:	bf00      	nop
 8008354:	080088b0 	.word	0x080088b0
 8008358:	080088d0 	.word	0x080088d0
 800835c:	08008890 	.word	0x08008890
 8008360:	08008b5a 	.word	0x08008b5a
 8008364:	08008b64 	.word	0x08008b64
 8008368:	08006029 	.word	0x08006029
 800836c:	080080ef 	.word	0x080080ef
 8008370:	08008b60 	.word	0x08008b60

08008374 <__swbuf_r>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	460e      	mov	r6, r1
 8008378:	4614      	mov	r4, r2
 800837a:	4605      	mov	r5, r0
 800837c:	b118      	cbz	r0, 8008386 <__swbuf_r+0x12>
 800837e:	6983      	ldr	r3, [r0, #24]
 8008380:	b90b      	cbnz	r3, 8008386 <__swbuf_r+0x12>
 8008382:	f7fd fc41 	bl	8005c08 <__sinit>
 8008386:	4b21      	ldr	r3, [pc, #132]	; (800840c <__swbuf_r+0x98>)
 8008388:	429c      	cmp	r4, r3
 800838a:	d12b      	bne.n	80083e4 <__swbuf_r+0x70>
 800838c:	686c      	ldr	r4, [r5, #4]
 800838e:	69a3      	ldr	r3, [r4, #24]
 8008390:	60a3      	str	r3, [r4, #8]
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	071a      	lsls	r2, r3, #28
 8008396:	d52f      	bpl.n	80083f8 <__swbuf_r+0x84>
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	b36b      	cbz	r3, 80083f8 <__swbuf_r+0x84>
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	6820      	ldr	r0, [r4, #0]
 80083a0:	1ac0      	subs	r0, r0, r3
 80083a2:	6963      	ldr	r3, [r4, #20]
 80083a4:	b2f6      	uxtb	r6, r6
 80083a6:	4283      	cmp	r3, r0
 80083a8:	4637      	mov	r7, r6
 80083aa:	dc04      	bgt.n	80083b6 <__swbuf_r+0x42>
 80083ac:	4621      	mov	r1, r4
 80083ae:	4628      	mov	r0, r5
 80083b0:	f7ff f9e6 	bl	8007780 <_fflush_r>
 80083b4:	bb30      	cbnz	r0, 8008404 <__swbuf_r+0x90>
 80083b6:	68a3      	ldr	r3, [r4, #8]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	60a3      	str	r3, [r4, #8]
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	6022      	str	r2, [r4, #0]
 80083c2:	701e      	strb	r6, [r3, #0]
 80083c4:	6963      	ldr	r3, [r4, #20]
 80083c6:	3001      	adds	r0, #1
 80083c8:	4283      	cmp	r3, r0
 80083ca:	d004      	beq.n	80083d6 <__swbuf_r+0x62>
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	07db      	lsls	r3, r3, #31
 80083d0:	d506      	bpl.n	80083e0 <__swbuf_r+0x6c>
 80083d2:	2e0a      	cmp	r6, #10
 80083d4:	d104      	bne.n	80083e0 <__swbuf_r+0x6c>
 80083d6:	4621      	mov	r1, r4
 80083d8:	4628      	mov	r0, r5
 80083da:	f7ff f9d1 	bl	8007780 <_fflush_r>
 80083de:	b988      	cbnz	r0, 8008404 <__swbuf_r+0x90>
 80083e0:	4638      	mov	r0, r7
 80083e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e4:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <__swbuf_r+0x9c>)
 80083e6:	429c      	cmp	r4, r3
 80083e8:	d101      	bne.n	80083ee <__swbuf_r+0x7a>
 80083ea:	68ac      	ldr	r4, [r5, #8]
 80083ec:	e7cf      	b.n	800838e <__swbuf_r+0x1a>
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <__swbuf_r+0xa0>)
 80083f0:	429c      	cmp	r4, r3
 80083f2:	bf08      	it	eq
 80083f4:	68ec      	ldreq	r4, [r5, #12]
 80083f6:	e7ca      	b.n	800838e <__swbuf_r+0x1a>
 80083f8:	4621      	mov	r1, r4
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 f81a 	bl	8008434 <__swsetup_r>
 8008400:	2800      	cmp	r0, #0
 8008402:	d0cb      	beq.n	800839c <__swbuf_r+0x28>
 8008404:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008408:	e7ea      	b.n	80083e0 <__swbuf_r+0x6c>
 800840a:	bf00      	nop
 800840c:	080088b0 	.word	0x080088b0
 8008410:	080088d0 	.word	0x080088d0
 8008414:	08008890 	.word	0x08008890

08008418 <__ascii_wctomb>:
 8008418:	b149      	cbz	r1, 800842e <__ascii_wctomb+0x16>
 800841a:	2aff      	cmp	r2, #255	; 0xff
 800841c:	bf85      	ittet	hi
 800841e:	238a      	movhi	r3, #138	; 0x8a
 8008420:	6003      	strhi	r3, [r0, #0]
 8008422:	700a      	strbls	r2, [r1, #0]
 8008424:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008428:	bf98      	it	ls
 800842a:	2001      	movls	r0, #1
 800842c:	4770      	bx	lr
 800842e:	4608      	mov	r0, r1
 8008430:	4770      	bx	lr
	...

08008434 <__swsetup_r>:
 8008434:	4b32      	ldr	r3, [pc, #200]	; (8008500 <__swsetup_r+0xcc>)
 8008436:	b570      	push	{r4, r5, r6, lr}
 8008438:	681d      	ldr	r5, [r3, #0]
 800843a:	4606      	mov	r6, r0
 800843c:	460c      	mov	r4, r1
 800843e:	b125      	cbz	r5, 800844a <__swsetup_r+0x16>
 8008440:	69ab      	ldr	r3, [r5, #24]
 8008442:	b913      	cbnz	r3, 800844a <__swsetup_r+0x16>
 8008444:	4628      	mov	r0, r5
 8008446:	f7fd fbdf 	bl	8005c08 <__sinit>
 800844a:	4b2e      	ldr	r3, [pc, #184]	; (8008504 <__swsetup_r+0xd0>)
 800844c:	429c      	cmp	r4, r3
 800844e:	d10f      	bne.n	8008470 <__swsetup_r+0x3c>
 8008450:	686c      	ldr	r4, [r5, #4]
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008458:	0719      	lsls	r1, r3, #28
 800845a:	d42c      	bmi.n	80084b6 <__swsetup_r+0x82>
 800845c:	06dd      	lsls	r5, r3, #27
 800845e:	d411      	bmi.n	8008484 <__swsetup_r+0x50>
 8008460:	2309      	movs	r3, #9
 8008462:	6033      	str	r3, [r6, #0]
 8008464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800846e:	e03e      	b.n	80084ee <__swsetup_r+0xba>
 8008470:	4b25      	ldr	r3, [pc, #148]	; (8008508 <__swsetup_r+0xd4>)
 8008472:	429c      	cmp	r4, r3
 8008474:	d101      	bne.n	800847a <__swsetup_r+0x46>
 8008476:	68ac      	ldr	r4, [r5, #8]
 8008478:	e7eb      	b.n	8008452 <__swsetup_r+0x1e>
 800847a:	4b24      	ldr	r3, [pc, #144]	; (800850c <__swsetup_r+0xd8>)
 800847c:	429c      	cmp	r4, r3
 800847e:	bf08      	it	eq
 8008480:	68ec      	ldreq	r4, [r5, #12]
 8008482:	e7e6      	b.n	8008452 <__swsetup_r+0x1e>
 8008484:	0758      	lsls	r0, r3, #29
 8008486:	d512      	bpl.n	80084ae <__swsetup_r+0x7a>
 8008488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800848a:	b141      	cbz	r1, 800849e <__swsetup_r+0x6a>
 800848c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008490:	4299      	cmp	r1, r3
 8008492:	d002      	beq.n	800849a <__swsetup_r+0x66>
 8008494:	4630      	mov	r0, r6
 8008496:	f7ff fd73 	bl	8007f80 <_free_r>
 800849a:	2300      	movs	r3, #0
 800849c:	6363      	str	r3, [r4, #52]	; 0x34
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	2300      	movs	r3, #0
 80084a8:	6063      	str	r3, [r4, #4]
 80084aa:	6923      	ldr	r3, [r4, #16]
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	f043 0308 	orr.w	r3, r3, #8
 80084b4:	81a3      	strh	r3, [r4, #12]
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	b94b      	cbnz	r3, 80084ce <__swsetup_r+0x9a>
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084c4:	d003      	beq.n	80084ce <__swsetup_r+0x9a>
 80084c6:	4621      	mov	r1, r4
 80084c8:	4630      	mov	r0, r6
 80084ca:	f000 f84d 	bl	8008568 <__smakebuf_r>
 80084ce:	89a0      	ldrh	r0, [r4, #12]
 80084d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084d4:	f010 0301 	ands.w	r3, r0, #1
 80084d8:	d00a      	beq.n	80084f0 <__swsetup_r+0xbc>
 80084da:	2300      	movs	r3, #0
 80084dc:	60a3      	str	r3, [r4, #8]
 80084de:	6963      	ldr	r3, [r4, #20]
 80084e0:	425b      	negs	r3, r3
 80084e2:	61a3      	str	r3, [r4, #24]
 80084e4:	6923      	ldr	r3, [r4, #16]
 80084e6:	b943      	cbnz	r3, 80084fa <__swsetup_r+0xc6>
 80084e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80084ec:	d1ba      	bne.n	8008464 <__swsetup_r+0x30>
 80084ee:	bd70      	pop	{r4, r5, r6, pc}
 80084f0:	0781      	lsls	r1, r0, #30
 80084f2:	bf58      	it	pl
 80084f4:	6963      	ldrpl	r3, [r4, #20]
 80084f6:	60a3      	str	r3, [r4, #8]
 80084f8:	e7f4      	b.n	80084e4 <__swsetup_r+0xb0>
 80084fa:	2000      	movs	r0, #0
 80084fc:	e7f7      	b.n	80084ee <__swsetup_r+0xba>
 80084fe:	bf00      	nop
 8008500:	20000014 	.word	0x20000014
 8008504:	080088b0 	.word	0x080088b0
 8008508:	080088d0 	.word	0x080088d0
 800850c:	08008890 	.word	0x08008890

08008510 <abort>:
 8008510:	b508      	push	{r3, lr}
 8008512:	2006      	movs	r0, #6
 8008514:	f000 f890 	bl	8008638 <raise>
 8008518:	2001      	movs	r0, #1
 800851a:	f7f9 f8a9 	bl	8001670 <_exit>

0800851e <__swhatbuf_r>:
 800851e:	b570      	push	{r4, r5, r6, lr}
 8008520:	460e      	mov	r6, r1
 8008522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008526:	2900      	cmp	r1, #0
 8008528:	b096      	sub	sp, #88	; 0x58
 800852a:	4614      	mov	r4, r2
 800852c:	461d      	mov	r5, r3
 800852e:	da08      	bge.n	8008542 <__swhatbuf_r+0x24>
 8008530:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	602a      	str	r2, [r5, #0]
 8008538:	061a      	lsls	r2, r3, #24
 800853a:	d410      	bmi.n	800855e <__swhatbuf_r+0x40>
 800853c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008540:	e00e      	b.n	8008560 <__swhatbuf_r+0x42>
 8008542:	466a      	mov	r2, sp
 8008544:	f000 f894 	bl	8008670 <_fstat_r>
 8008548:	2800      	cmp	r0, #0
 800854a:	dbf1      	blt.n	8008530 <__swhatbuf_r+0x12>
 800854c:	9a01      	ldr	r2, [sp, #4]
 800854e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008552:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008556:	425a      	negs	r2, r3
 8008558:	415a      	adcs	r2, r3
 800855a:	602a      	str	r2, [r5, #0]
 800855c:	e7ee      	b.n	800853c <__swhatbuf_r+0x1e>
 800855e:	2340      	movs	r3, #64	; 0x40
 8008560:	2000      	movs	r0, #0
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	b016      	add	sp, #88	; 0x58
 8008566:	bd70      	pop	{r4, r5, r6, pc}

08008568 <__smakebuf_r>:
 8008568:	898b      	ldrh	r3, [r1, #12]
 800856a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800856c:	079d      	lsls	r5, r3, #30
 800856e:	4606      	mov	r6, r0
 8008570:	460c      	mov	r4, r1
 8008572:	d507      	bpl.n	8008584 <__smakebuf_r+0x1c>
 8008574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	6123      	str	r3, [r4, #16]
 800857c:	2301      	movs	r3, #1
 800857e:	6163      	str	r3, [r4, #20]
 8008580:	b002      	add	sp, #8
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	ab01      	add	r3, sp, #4
 8008586:	466a      	mov	r2, sp
 8008588:	f7ff ffc9 	bl	800851e <__swhatbuf_r>
 800858c:	9900      	ldr	r1, [sp, #0]
 800858e:	4605      	mov	r5, r0
 8008590:	4630      	mov	r0, r6
 8008592:	f7fd fc35 	bl	8005e00 <_malloc_r>
 8008596:	b948      	cbnz	r0, 80085ac <__smakebuf_r+0x44>
 8008598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800859c:	059a      	lsls	r2, r3, #22
 800859e:	d4ef      	bmi.n	8008580 <__smakebuf_r+0x18>
 80085a0:	f023 0303 	bic.w	r3, r3, #3
 80085a4:	f043 0302 	orr.w	r3, r3, #2
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	e7e3      	b.n	8008574 <__smakebuf_r+0xc>
 80085ac:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <__smakebuf_r+0x7c>)
 80085ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	6020      	str	r0, [r4, #0]
 80085b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b8:	81a3      	strh	r3, [r4, #12]
 80085ba:	9b00      	ldr	r3, [sp, #0]
 80085bc:	6163      	str	r3, [r4, #20]
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	6120      	str	r0, [r4, #16]
 80085c2:	b15b      	cbz	r3, 80085dc <__smakebuf_r+0x74>
 80085c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085c8:	4630      	mov	r0, r6
 80085ca:	f000 f863 	bl	8008694 <_isatty_r>
 80085ce:	b128      	cbz	r0, 80085dc <__smakebuf_r+0x74>
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	f023 0303 	bic.w	r3, r3, #3
 80085d6:	f043 0301 	orr.w	r3, r3, #1
 80085da:	81a3      	strh	r3, [r4, #12]
 80085dc:	89a0      	ldrh	r0, [r4, #12]
 80085de:	4305      	orrs	r5, r0
 80085e0:	81a5      	strh	r5, [r4, #12]
 80085e2:	e7cd      	b.n	8008580 <__smakebuf_r+0x18>
 80085e4:	08005ba1 	.word	0x08005ba1

080085e8 <_raise_r>:
 80085e8:	291f      	cmp	r1, #31
 80085ea:	b538      	push	{r3, r4, r5, lr}
 80085ec:	4604      	mov	r4, r0
 80085ee:	460d      	mov	r5, r1
 80085f0:	d904      	bls.n	80085fc <_raise_r+0x14>
 80085f2:	2316      	movs	r3, #22
 80085f4:	6003      	str	r3, [r0, #0]
 80085f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085fe:	b112      	cbz	r2, 8008606 <_raise_r+0x1e>
 8008600:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008604:	b94b      	cbnz	r3, 800861a <_raise_r+0x32>
 8008606:	4620      	mov	r0, r4
 8008608:	f000 f830 	bl	800866c <_getpid_r>
 800860c:	462a      	mov	r2, r5
 800860e:	4601      	mov	r1, r0
 8008610:	4620      	mov	r0, r4
 8008612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008616:	f000 b817 	b.w	8008648 <_kill_r>
 800861a:	2b01      	cmp	r3, #1
 800861c:	d00a      	beq.n	8008634 <_raise_r+0x4c>
 800861e:	1c59      	adds	r1, r3, #1
 8008620:	d103      	bne.n	800862a <_raise_r+0x42>
 8008622:	2316      	movs	r3, #22
 8008624:	6003      	str	r3, [r0, #0]
 8008626:	2001      	movs	r0, #1
 8008628:	e7e7      	b.n	80085fa <_raise_r+0x12>
 800862a:	2400      	movs	r4, #0
 800862c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008630:	4628      	mov	r0, r5
 8008632:	4798      	blx	r3
 8008634:	2000      	movs	r0, #0
 8008636:	e7e0      	b.n	80085fa <_raise_r+0x12>

08008638 <raise>:
 8008638:	4b02      	ldr	r3, [pc, #8]	; (8008644 <raise+0xc>)
 800863a:	4601      	mov	r1, r0
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	f7ff bfd3 	b.w	80085e8 <_raise_r>
 8008642:	bf00      	nop
 8008644:	20000014 	.word	0x20000014

08008648 <_kill_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4d07      	ldr	r5, [pc, #28]	; (8008668 <_kill_r+0x20>)
 800864c:	2300      	movs	r3, #0
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	4611      	mov	r1, r2
 8008654:	602b      	str	r3, [r5, #0]
 8008656:	f7f8 fffb 	bl	8001650 <_kill>
 800865a:	1c43      	adds	r3, r0, #1
 800865c:	d102      	bne.n	8008664 <_kill_r+0x1c>
 800865e:	682b      	ldr	r3, [r5, #0]
 8008660:	b103      	cbz	r3, 8008664 <_kill_r+0x1c>
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	bd38      	pop	{r3, r4, r5, pc}
 8008666:	bf00      	nop
 8008668:	200042bc 	.word	0x200042bc

0800866c <_getpid_r>:
 800866c:	f7f8 bfe8 	b.w	8001640 <_getpid>

08008670 <_fstat_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4d07      	ldr	r5, [pc, #28]	; (8008690 <_fstat_r+0x20>)
 8008674:	2300      	movs	r3, #0
 8008676:	4604      	mov	r4, r0
 8008678:	4608      	mov	r0, r1
 800867a:	4611      	mov	r1, r2
 800867c:	602b      	str	r3, [r5, #0]
 800867e:	f7f9 f846 	bl	800170e <_fstat>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	d102      	bne.n	800868c <_fstat_r+0x1c>
 8008686:	682b      	ldr	r3, [r5, #0]
 8008688:	b103      	cbz	r3, 800868c <_fstat_r+0x1c>
 800868a:	6023      	str	r3, [r4, #0]
 800868c:	bd38      	pop	{r3, r4, r5, pc}
 800868e:	bf00      	nop
 8008690:	200042bc 	.word	0x200042bc

08008694 <_isatty_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4d06      	ldr	r5, [pc, #24]	; (80086b0 <_isatty_r+0x1c>)
 8008698:	2300      	movs	r3, #0
 800869a:	4604      	mov	r4, r0
 800869c:	4608      	mov	r0, r1
 800869e:	602b      	str	r3, [r5, #0]
 80086a0:	f7f9 f845 	bl	800172e <_isatty>
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d102      	bne.n	80086ae <_isatty_r+0x1a>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	b103      	cbz	r3, 80086ae <_isatty_r+0x1a>
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	bd38      	pop	{r3, r4, r5, pc}
 80086b0:	200042bc 	.word	0x200042bc

080086b4 <_init>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	bf00      	nop
 80086b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ba:	bc08      	pop	{r3}
 80086bc:	469e      	mov	lr, r3
 80086be:	4770      	bx	lr

080086c0 <_fini>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr
